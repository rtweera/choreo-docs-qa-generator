question,answer
How can I configure a custom error page for managed authentication in Choreo?,"To configure a custom error page for managed authentication in Choreo, you need to specify an error path during the setup of managed authentication for your web application. Here’s how you can do this:\n\n### Steps to Configure a Custom Error Page\n\n1. **Enable Managed Authentication**: When you deploy your web application, ensure that managed authentication is enabled.\n\n2. **Configure Error Path**:\n   - During the deployment process, you will see an option to configure various paths, including the **Error Path**.\n   - Set the **Error Path** to the relative URL of your custom error page. This path will be used by Choreo to redirect users in case of an error during the sign-in or sign-out processes.\n   - If you do not specify an error path, Choreo will use its default error page.\n\n### Important Notes\n- When Choreo redirects to your custom error page, it will include the following query parameters in the URL:\n   - **code**: A short textual error code indicating the error.\n   - **message**: A description of the error.\n\nBy following these steps, you can ensure that any errors encountered during authentication processes are directed to your custom error page, providing a better user experience.\n\nFor more details, you can refer to the relevant section in the documentation: [Set up a custom error page](https://wso2.com/choreo/docs/authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-1-set-up-managed-authentication-for-your-web-application)."
"How do I troubleshoot a ""403 Forbidden"" error when accessing an API in Choreo?","When troubleshooting '403 Forbidden' errors when accessing APIs in Choreo, it is typically related to authorization issues. Here are some steps to consider:\n\n1. **Check Permissions**: Ensure that the necessary permissions have been assigned to the API resources. You can manage permissions in the Choreo Console. To do this:\n   - Navigate to your project and select the component.\n   - In the **Deploy** section, go to **Endpoint Configurations**.\n   - Under **Permissions List**, add the required permissions and ensure they are attached to the relevant resources.\n   - Remember to redeploy your component after making changes to permissions.\n\n2. **Authentication Issues**: If you're using API key or OAuth2 for securing your API:\n   - Make sure the API key is correctly included in your request headers if you're using API Key security.\n   - For OAuth2 secured services, verify that you have a valid access token and that it has not expired. Also, ensure that the token has the necessary scopes to access the API.\n\n3. **User Access**: If the API is secured using an identity provider (IdP), check whether the user has the necessary rights to access the API. This might involve configuring user roles and groups on the IdP side.\n\n4. **Client-Side Errors**: Sometimes, the error could be due to client-side misconfigurations. Ensure that the request is correctly formatted and that the correct endpoint is being accessed.\n\n5. **Logs and Monitoring**: Utilize any available logging and monitoring tools provided by Choreo to check for additional error messages or logs that can give more insight into the '403 Forbidden' error.\n\nFor more detailed instructions on managing permissions and troubleshooting, you can refer to the following links:\n- [Assign permissions to an API in Choreo](https://wso2.com/choreo/docs/authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#step-1-assign-permissions-to-an-api-in-choreo)\n- [Consume an API Key Secured Service](https://wso2.com/choreo/docs/consuming-services/consuming-a-service-apikey/)\n- [Consume a OAuth2 Secured Service](https://wso2.com/choreo/docs/consuming-services/consuming-a-sevice-oauth2/) \n\nThese resources should help you identify and resolve the '403 Forbidden' errors when accessing your APIs in Choreo."
What are the steps to configure a persistent volume for my application in Choreo?,"To configure a persistent volume for your application in Choreo, follow these steps:\n\n1. In the **Component Listing** pane, select the component for which you want to create a persistent storage.\n2. In the left navigation menu, click on **DevOps** and then select **Storage**.\n3. Click on **+ Create** to initiate the creation of a new volume.\n4. In the **Create a Volume Mount** pane, provide a name for the volume and select **Persistent Volume** as the type.\n5. Choose a **Storage Class** that suits your requirements.\n6. Adjust the **Storage Capacity** slider to set the desired capacity for your volume.\n7. Select an appropriate **Access Mode**. Ensure that the access mode is supported by the selected storage class, as Choreo does not verify this compatibility.\n8. Click **Next** to proceed.\n9. Add a mount location by specifying a **Mount Path** and clicking **Add mount**. You can add multiple mount locations if necessary. Ensure that the mount paths are absolute file paths, as these will be used by your application for read/write operations.\n10. Finally, click **Create** to apply the volume to your container immediately.\n\nThis process allows you to create a persistent storage space that remains available even if the container is restarted or removed.\n\nFor more detailed information, you can refer to the documentation here: [Create a persistent storage space for your container](https://wso2.com/choreo/docs/devops-and-ci-cd/configure-storage/#create-a-persistent-storage-space-for-your-container)."
How do I integrate a third-party logging service with Choreo?,"To integrate a third-party logging service with Choreo, you need to register the service in the Choreo Console. Here’s a step-by-step guide on how to do this:\n\n### Step 1: Register the Third-Party Service\n1. **Select the appropriate level of registration**:\n   - **Organization level**: If the logging service should be accessible from any project within the organization.\n   - **Project level**: If the service should be restricted to a specific project.\n   \n2. **Access the Third-Party Services section**:\n   - In the left navigation menu, click on **Dependencies**, then **Third-Party Services**.\n   - Click on **+ Register**.\n\n3. **Provide service details**:\n   - Enter a **Name** and **Version** for the service.\n   - Upload the service definition file (like OpenAPI or GraphQL schema). This will automatically detect the service type.\n   - Verify the **Service Type**.\n\n4. **Define Endpoints**:\n   - Click on **Define Endpoints**.\n   - For each endpoint, enter a **Name** and the **Endpoint URL**.\n   - Add any additional parameters required to connect to the logging service, such as API keys or authorization tokens. If any parameter should be kept confidential, select the **Secret** checkbox.\n\n5. **Select environments**:\n   - Specify the environments where the endpoint should be accessible. The connections to this endpoint can only be created from these environments.\n\n6. **Complete the registration**:\n   - Once all required parameters for at least one endpoint are defined, click **Register** to add the service to the Internal Marketplace.\n\n### Step 2: Manage the Third-Party Service\n- After registering, you can manage the service by viewing or updating its details from the **Third-Party Services** list. This includes updating the service definition or modifying the endpoints.\n\nBy following these steps, you will be able to successfully integrate a third-party logging service with Choreo. For more detailed information, you can refer to the documentation here: [Register a third-party service in Choreo](https://wso2.com/choreo/docs/integrate-and-manage-external-services/integrate-and-manage-third-party-services/#register-a-third-party-service-in-choreo)."
How can I create a scheduled task that runs daily at a specific time?,"To create a scheduled task in Choreo that runs daily at a specific time, you can follow these steps:\n\n### Step 1: Create a Scheduled Task Component\n1. **Create a new component**:\n   - Click on **+ Create** if you have components in your project, or directly click on the **Scheduled Task** card.\n   - Authorize Choreo with your GitHub account if you haven't already.\n   - Enter the details for your scheduled task:\n     - **Component Name**: A unique name for your task.\n     - **Description**: A brief description of what your task does.\n   - Select **Ballerina** as the build pack.\n   - Click **Create** to initialize the component with a sample implementation.\n\n### Step 2: Build the Scheduled Task\n1. Go to the **Build** section in the left navigation menu.\n2. Trigger the build by selecting the latest commit and clicking **Build**. Monitor the build progress in the **Build Logs** pane.\n\n### Step 3: Deploy the Scheduled Task\n1. In the left navigation menu, click **Deploy**.\n2. Click **Configure & Deploy** in the **Set Up** card.\n3. Specify values for any configurable variables needed for your task.\n4. **Define the schedule**:\n   - Select the time zone for your scheduled task.\n   - Set the **Select Range** to **Day** and specify:\n     - **Every**: `1`\n     - **At**: `08:00` (or your desired time).\n5. Click **Deploy** to activate your scheduled task.\n\n### Step 4: Test the Scheduled Task\nOnce deployed, your scheduled task will run at the configured time. You can verify its execution by checking for the expected output, such as an email notification or logs.\n\nThis process ensures that your scheduled task runs daily at the specified time, automating the desired integration effectively.\n\nFor more detailed steps and information, you can refer to the documentation: [Develop a Scheduled Task](https://wso2.com/choreo/docs/develop-components/develop-integrations/develop-a-scheduled-task/)."
How do I configure an egress deny list to restrict outbound traffic from my organization?,"To configure an egress deny list in Choreo and restrict outbound traffic from your organization, you will need to set up an egress policy at the organization level. Here’s how you can do that:\n\n### Steps to Configure Egress Deny List\n\n1. **Select Your Organization**:\n   - In the Choreo Console header, go to the **Organization** list and select your organization.\n\n2. **Access Organization Settings**:\n   - In the left navigation menu, click on **Settings**. This will open the organization-level settings page.\n\n3. **Navigate to Egress Control**:\n   - Click on the **Egress Control** tab.\n\n4. **Create a New Egress Policy**:\n   - Click on **+ Create** to add a new egress policy.\n\n5. **Choose Egress Control Type**:\n   - Select the **Deny All** option. This will block all egress traffic by default.\n   - You can then selectively allow traffic to specific IP ranges or domains as per your requirements.\n\n### Important Notes\n- Once you select an egress control type and create a rule, you cannot change the type without deleting existing rules.\n- Be cautious while adding rules, as blocking required destinations can disrupt your applications.\n- Ensure to add Choreo-managed database hosts to the allowed list if you are using the **Deny All** type.\n- Egress policies you set apply across all environments in your organization.\n\n### Visual Guide\n![Configure an organization-level egress policy](https://wso2.com/choreo/docs/assets/img/administer/configure-an-organization-level-egress-policy.png)\n\nFor more detailed information, you can refer to the [Control Egress Traffic for Your Organization documentation](https://wso2.com/choreo/docs/administer/control-egress-traffic-for-your-organization/#configure-an-egress-policy-at-the-organization-level)."
What are the best practices for managing API keys in Choreo?,"Managing API keys effectively is crucial for ensuring secure and controlled access to your APIs in Choreo. Here are some best practices for managing API keys:\n\n1. **Generate Dedicated API Keys**: Always generate a unique API key for each specific API you plan to publish. This helps in tracking and controlling the access to each individual API.\n\n2. **Monitoring and Management**: Utilize the **Credentials section of the API** in the Choreo Developer Portal to monitor and manage API keys associated with that specific API. This section provides an overview of all API keys, allowing API owners to keep track of their usage.\n\n3. **Application-Level Control**: Similarly, use the **Credentials section of the Application** to view and manage all API keys linked to your application. This ensures that application owners have the necessary control over API subscriptions and access.\n\n4. **API Key Regeneration**: If you need to update an API key, use the regeneration feature. When an API key is regenerated, the existing key remains valid for a grace period (one hour) which allows applications to update their credentials without service interruptions. It’s essential to ensure that all applications using the existing key are updated promptly to avoid disruptions.\n\n5. **API Key Deletion**: API keys can be deleted when they are no longer needed. Keep in mind that deletion is irreversible and will revoke access immediately, which can lead to service interruptions for any application relying on that key. Therefore, proceed with caution when deleting keys.\n\n6. **Use in API Requests**: When consuming an API secured with an API key, ensure to include the key in the `api-key` header of your requests to authenticate properly.\n\nFor further details on managing API keys, you can refer to the Choreo documentation [here](https://wso2.com/choreo/docs/consuming-services/manage-api-keys/)."
How can I add a description to my service in Choreo?,"To add or update the description for a service in the Choreo Console, you can follow these steps:\n\n1. **Access the Third-Party or GenAI Services**:\n   - In the left navigation menu, click on **Dependencies**.\n   - Choose either **Third-Party Services** or **GenAI Services** based on the type of service you're working with. This will display a list of all the services you have created.\n\n2. **Select the Service**:\n   - Click on the service for which you want to update the description. This will open the service details.\n\n3. **Update General Details**:\n   - In the service details view, you will see a section labeled **General Details**. This section displays the service metadata, including the service name, overview, labels, etc.\n   - Here, you can edit the description field to add or update the service description as needed.\n\n4. **Save Changes**:\n   - After updating the description, ensure you save the changes to apply them to the service.\n\n### Additional Note:\n- When services are redeployed, Choreo automatically updates their definitions, visibility, and descriptions. This means any changes you make will be reflected during the redeployment process.\n\nFor more details, you can refer to the following documentation links:\n- [Manage third-party services](https://wso2.com/choreo/docs/integrate-and-manage-external-services/integrate-and-manage-third-party-services/#manage-third-party-services)\n- [Manage GenAI services](https://wso2.com/choreo/docs/integrate-and-manage-external-services/integrate-and-manage-gen-ai-services/#manage-genai-services)"
How do I configure a liveness probe for a gRPC service in Choreo?,"To set up a liveness probe for a gRPC service using Choreo, you need to follow these steps within the Choreo Console:\n\n### Steps to Configure Liveness Probes\n\n1. **Select the Component**:\n   - In the **Component Listing** pane, click on the component for which you want to configure the liveness probe.\n\n2. **Access Health Checks**:\n   - In the left navigation menu, click on **DevOps** and then select **Health Checks**.\n\n3. **Create a New Probe**:\n   - On the **Health Checks** page, click on **+ Create**.\n\n4. **Configure the Liveness Probe**:\n   - You will need to define how the liveness probe checks the health of your gRPC service. You can use one of the following probe types:\n     - **HTTP GET request**: This is the most common approach. It involves implementing a health check endpoint like `/healthz` or `/health` in your gRPC service that responds with an HTTP status code in the range of 200-399.\n     - **TCP connection probe**: This checks if a TCP connection can be established on a specified port of your service.\n     - **Execute a command**: This executes a script or command inside your container and checks the return code to determine if the service is healthy.\n\n5. **Save the Configuration**:\n   - After configuring the liveness probe, click **Save**.\n\n6. **(Optional) Configure a Readiness Probe**:\n   - If needed, you can also set up a readiness probe following similar steps to ensure the service is ready to handle traffic.\n\n### Important Notes:\n- Liveness probes run periodically and will restart the container if the probe fails, allowing for self-healing in cases where the application becomes unresponsive. \n- You can update or remove a probe at any time if your requirements change.\n\n### Check Runtime Status:\nOnce configured, you can monitor the status of your container:\n1. In the left navigation menu, click on **Runtime** under **DevOps**.\n2. Verify that the container is running as expected. If it does not start, check the events and conditions to diagnose any issues with the probes.\n\nFor more detailed information about health checks and probe configurations, you can refer to the documentation [here](https://wso2.com/choreo/docs/devops-and-ci-cd/set-up-health-checks/#configure-liveness-and-readiness-probes)."
How do I use the Choreo CLI to promote a component to the production environment?,"To promote a component to the production environment using the Choreo CLI, you first need to ensure that your component is already created, built, and deployed in the development environment. Additionally, an approval workflow must be configured for environment promotions.\n\nHere are the steps to request approval for promoting a component:\n\n1. **Select the Component**: Navigate to the **Component Listing** pane in the Choreo Console and click on the component you wish to promote. This will take you to the **Overview** page of that component.\n\n2. **Request Promotion**: \n   - Click on the **Deploy** option in the left navigation menu.\n   - Locate the **Development** card and click on **Request to Promote**.\n   - In the **Request Approval** pane that appears, fill in the necessary request details and then click **Submit**. This will create a request and notify the authorized assignees via email.\n\n3. **Await Approval**: Once your request is submitted, you will need to wait for it to be approved. During this time, other developers will not be able to submit a promotion request for the same component. After approval, you will receive a confirmation email.\n\n4. **Promote the Component**: After receiving approval, you can proceed with the promotion to production.\n\n5. **Create Short URL (Optional)**: If you are promoting a web application, you can create a personalized short URL for your application in production by clicking **Promote** in the **Development** card, and then specifying a short URL prefix.\n\nFor more detailed information, you can refer to the following links:\n- [Request approval for environment promotion](https://wso2.com/choreo/docs/develop-components/submit-and-manage-workflow-approval-requests/#request-approval-for-environment-promotion)\n- [Choreo environments](https://wso2.com/choreo/docs/choreo-concepts/environments/) \n\nIf you have specific commands related to the Choreo CLI that you need help with, unfortunately, the provided documentation does not contain that information."
How can I enable automatic builds on commit for a specific component in Choreo?,"To enable automatic builds on commit for a specific component in Choreo, follow these steps:\n\n1. **Navigate to the Build Page**: In the Choreo console, locate and click on the **Build** page associated with your component.\n\n2. **Enable Auto Build on Commit**: Find the option labeled **Auto Build on Commit**. This setting allows Choreo to automatically trigger a build whenever a commit is made to the connected Git repository for that component.\n\n3. **Manual Trigger for Initial Build**: Note that you must manually trigger the first build for your component. This step ensures that Choreo applies the necessary configurations to your development environment. You can do this by clicking **Build Latest** and selecting a specific commit if needed.\n\n4. **Subsequent Automatic Builds**: Once you have enabled Auto Build on Commit and completed the initial manual build, Choreo will automatically handle builds for every subsequent commit made to the repository.\n\n5. **Build Logs**: You can view build logs for specific builds on the **Build** page, which will help you track the progress and status of your builds.\n\nBy enabling this feature, you ensure that your component is built automatically with every commit, simplifying your development workflow.\n\nFor more detailed information, you can refer to the [CI/CD documentation](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#build)."
How do I configure a connection to a database that requires client certificate authentication?,"To configure a connection to a database using client certificate authentication in Choreo, you can utilize mutual TLS (mTLS). This ensures that both the client (Choreo) and the server (your database) authenticate each other using digital certificates. Here are the steps to set up mutual TLS for your database connection:\n\n### 1. Generate Certificates\nYou need to generate the following certificates:\n- **Root Certificate**: This is needed to sign both the client and server certificates. You can create this using a tool like OpenSSL.\n- **Client Certificate**: This certificate identifies the client (Choreo) and must be signed by the root certificate.\n- **Server Certificate**: This is used by the client to verify the server's identity and must also be signed by the root certificate.\n\n### 2. Configure the Backend Certificate\n- Ensure your backend (database) is protected with TLS.\n- Extract the public certificate of your backend server in PEM format.\n\n#### Steps:\n1. In the **Component Listing** pane, click on the API proxy for which you want to configure TLS.\n2. In the left navigation menu, click **Develop** and then click **Endpoints**.\n3. On the **Endpoints** page, click **Configure** corresponding to the endpoint.\n4. Click **Upload Endpoint Certificate** and select the backend certificate file to add it.\n\n### 3. Enable Mutual TLS\nTo enable mutual TLS, follow these steps:\n\n#### Approach 1: Generate a Key Pair through Choreo\n1. In the **Endpoints** page, turn on the **Mutual SSL** toggle.\n2. Click **Add Client Certificate**.\n3. In the dialog, select **Generate new key pair**, and specify a common name for the certificate.\n4. Click **Generate** to create the certificate.\n5. Download the client certificate in PEM format.\n\n#### Approach 2: Use Your Own Certificate Pair\n1. In the **Endpoints** page, turn on the **Mutual SSL** toggle.\n2. Click **Add Client Certificate**.\n3. In the dialog, select **Use my own key pair** and upload your private key and public certificate in PEM format.\n4. Click **Add** to save the certificate.\n\n### 4. Associate the Certificate with the API\n1. On the **Endpoints** page, go to the **Existing Certificates** section.\n2. Select the certificate you want to associate with the API.\n3. Click **Save**.\n\n### 5. Deploy the API\n1. In the left navigation menu, click **Deploy**.\n2. In the **Build Area** card, click **Configure & Deploy**.\n3. After verifying the endpoint URL, click **Save & Deploy**.\n\nThis process establishes a secure connection to your database with client certificate authentication.\n\nFor further details on configuring mutual TLS and certificates, you can refer to the following documentation:\n- [Configure Mutual TLS Between Components](https://wso2.com/choreo/docs/authentication-and-authorization/configure-mutual-tls-between-components/)\n- [Secure Communication Between the Choreo Gateway and Your Backend with Mutual TLS](https://wso2.com/choreo/docs/authentication-and-authorization/secure-communication-between-the-choreo-gateway-and-your-backend-with-mutual-tls/)"
How do I monitor the disk usage of my Choreo-managed database?,"To monitor the disk usage of a Choreo-managed database, you can utilize the Observability dashboard available in the Choreo console. This dashboard provides a comprehensive interface to visualize and monitor the performance of your deployed services, including metrics related to databases.\n\nHere are the steps to monitor the disk usage:\n\n1. **Access the Observability Dashboard**: In the left navigation menu of the Choreo console, click on **Observability**.\n\n2. **Monitor Key Metrics**: The Observability dashboard allows you to observe various metrics, including:\n   - **Throughput**: The number of requests served over a given period.\n   - **Latencies**: The response times associated with those requests.\n   - **Logs**: View logs generated over a specific timeframe, which can help identify any issues related to disk usage.\n\n3. **Diagnostic View**: Use the diagnostics view to analyze any anomalies or performance issues. This can include examining logs and throughput data that may indicate disk usage concerns.\n\nFor further details about the observability features, you can refer to the [Observability Overview](https://wso2.com/choreo/docs/monitoring-and-insights/observability-overview/) documentation.\n\nUnfortunately, the specific steps to monitor disk usage directly are not detailed in the provided documentation, so if you require more specific information or functionality, I recommend checking within the observability tools in the Choreo console or contacting support for assistance."
What are the steps to back up and restore a Choreo-managed MySQL database?,"Choreo provides automatic backups for MySQL databases based on different service plans. The backup and restore capabilities depend on the chosen service plan. Here’s a summary of how backups work for Choreo-managed MySQL databases:\n\n### Backup Mechanism\n- **Automatic Backups**: Choreo runs full backups daily for MySQL databases and records binary logs continuously.\n- **Backup Retention Time**: The duration for which backups are retained varies by service plan:\n  - **Hobbyist Plan**: No backup retention.\n  - **Startup Plan**: Backups retained for 2 days.\n  - **Business Plan**: Backups retained for 14 days.\n  - **Premium Plan**: Backups retained for 30 days.\n  \n### High Availability\n- The availability of backups is also linked to the high availability configurations of your service plan, with higher plans providing better redundancy and quicker restore options in case of failures. \n\n### Restoring a Database\nWhile the documentation does not provide specific steps for manually restoring a MySQL database, it indicates that Choreo automatically handles outages and failures by replacing broken nodes with new ones, which resume from the last known good state based on the backups.\n\nFor detailed information regarding the backup and restore process and the specifics of your plan, you can refer to the following documentation: [Choreo-managed MySQL Databases](https://wso2.com/choreo/docs/manage-databases-and-caches/choreo-managed-mysql-databases/#high-availability-and-automatic-backups). \n\nIf you have more specific requirements or a different context concerning your database backup and restore needs, please let me know!"
How can I configure a custom health check endpoint for my web application?,"To configure a custom health check endpoint for your web application in Choreo, you can set up liveness and readiness probes. Here are the steps to do so:\n\n### Steps to Configure Health Checks\n\n1. **Select Your Component**:\n   - In the Choreo Console, navigate to the **Component Listing** pane and click on the component (your web application) for which you want to configure health checks.\n\n2. **Access Health Checks**:\n   - In the left navigation menu, click on **DevOps**, then select **Health Checks**.\n\n3. **Create Health Checks**:\n   - On the **Health Checks** page, click **+ Create** to set up your probes.\n\n4. **Configure Liveness Probe**:\n   - Set up the liveness probe, which can be an HTTP `GET` request to your custom health check endpoint (e.g., `/healthz` or `/health`). You may also configure additional HTTP headers if necessary.\n   - Click **Save** after configuring.\n\n5. **Configure Readiness Probe**:\n   - Similarly, configure the readiness probe based on your requirements.\n   - Click **Save** again.\n\n### Important Notes\n- Liveness probes are used to determine if your application is running; if it fails, the container will restart.\n- Readiness probes check if your application is ready to handle traffic. If it fails, the container will stop receiving requests but won’t restart.\n- You can update or remove these probes at any time.\n\n### Additional Considerations\n- Ensure that your application is capable of responding to the health check requests at the specified endpoint.\n- You can monitor the status of your container by navigating to the **Runtime** section under **DevOps** to confirm that it operates as expected.\n\nFor more detailed information, you can refer to the official documentation: [Set Up Health Checks](https://wso2.com/choreo/docs/devops-and-ci-cd/set-up-health-checks/#configure-liveness-and-readiness-probes)."
How can I use a personal access token (PAT) to automate deployments with the Choreo CLI?,"To use a personal access token (PAT) for authentication and automate deployments with the Choreo CLI, you need to connect your Git repository to Choreo using the PAT. This allows Choreo to perform actions on your behalf within the repository.\n\nHere's how you can do that:\n\n1. **Access the Choreo Console**: Ensure you are in the Choreo Console.\n\n2. **Select Your Organization**: In the Choreo Console header, go to the **Organization** list and select your organization.\n\n3. **Navigate to Settings**: In the left navigation menu, click on **Settings**. This will open the organization-level settings page.\n\n4. **Add Credentials**: \n   - Click on the **Credentials** tab.\n   - Click on **+Add Credentials** to configure the Git repository connection.\n   - Enter a **Credential Name**.\n   - Select your Git provider (such as Bitbucket or GitLab).\n   - Enter the **Personal Access Token** you obtained from your Git provider.\n   - Click **Save**.\n\nBy completing these steps, you authorize Choreo to access your Git repository using the PAT, allowing for automated deployments and other actions like triggering deployments and managing configurations.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/develop-components/develop-components-with-git/#connect-a-git-repository-to-choreo)."
How do I revoke a personal access token in Choreo?,"To revoke a personal access token in the Choreo Console, you will need to use the appropriate API endpoint for revocation. Here’s a general guideline on how to handle the revocation of access tokens:\n\n1. **Understand Token Lifespan**: By default, the lifespan of the tokens is set to 15 minutes (900 seconds). It's advisable to keep the expiry time short to minimize security risks.\n\n2. **Revocation Process**: To revoke an access token, Choreo uses a mechanism that typically involves invoking a specific revoke endpoint for the token you wish to invalidate. This action is usually done programmatically through API calls rather than directly through the UI. \n\n3. **Use Short-lived Tokens**: Since revoking JWT tokens can be complex due to their self-validating nature, it's recommended to use short-lived access tokens and refresh them regularly to enhance security.\n\n4. **Caution on Revocation**: Once an API Key or a token is deleted or revoked, this action is irreversible. Ensure that you confirm the action, as any application depending on the revoked token will lose access immediately.\n\nFor detailed steps or specific API endpoint information, please refer to the documentation [here](https://wso2.com/choreo/docs/consuming-services/manage-application/#revoke-access-tokens). \n\nIf you need further assistance or specific endpoint details, feel free to ask!"
How do I configure a custom domain for the Developer Portal?,"To configure a custom domain for the Developer Portal in Choreo, you need to follow a series of steps in the Choreo Console. Ensure you have organization administrator privileges before proceeding. Here's how to do it:\n\n### Steps to Add a Custom Domain\n\n1. **Open the Choreo Console**: Since you are already in the console, proceed to the next step.\n   \n2. **Navigate to Organization Settings**:\n   - In the Choreo Console header, click on the **Organization** list.\n   - In the left navigation menu, click **Settings**. This opens the organization-level settings page.\n\n3. **Access URL Settings**:\n   - Click on the **URL Settings** tab.\n   - Then, go to the **Active Domains** tab.\n\n4. **Add a Custom Domain**:\n   - Click on **+ Add Domains**.\n   - In the **Add a Custom Domain** pane, enter your desired domain name.\n   - Select **Developer Portal** as the entity type. Note that the environment selection is not applicable for the Developer Portal.\n   - After that, the CNAME alias for the Developer Portal will be generated. Create a DNS record with your DNS provider to associate your domain name with the provided CNAME target value.\n\n5. **Verify the CNAME Mapping**:\n   - Once the DNS record is created, click the **Verify** button in the Choreo Console. It may take some time for the CNAME mapping to become globally available. If verification is successful, proceed to the next step.\n\n6. **Select a TLS Certificate Provider**:\n   - You can either import your own TLS certificates for the custom domain or select **Let's Encrypt** to allow Choreo to generate and manage the certificates for you.\n\n7. **Save the Custom Domain**:\n   - Finally, click **Add** to save the custom domain. Once added, the custom domain will be listed in the **Active Domains** tab under the URL **Settings** tab.\n\nUpon successful configuration, the custom domain will be immediately available for accessing the Developer Portal.\n\nFor more detailed information and visual guidance, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-an-organization)."
How can I customize the header and footer of the Developer Portal?,"To customize the header and footer of the Developer Portal in Choreo, you can follow these steps:\n\n1. **Access the Developer Portal Theme Settings**:\n   - Click on **Settings** in the left pane of the Choreo Console.\n   - In the header, select the **Organization** list to navigate to your organization's settings page.\n   - Click on the **API Management** tab, then select **Devportal Theme**.\n\n2. **Customize Header and Footer**:\n   - Once you are in the theme customization section, you will find options to modify various components of the portal, including the header and footer.\n   - Expand the relevant sections to access the customization options for the header and footer.\n   - Make your desired changes, such as updating text, colors, or logos.\n\n3. **Preview Changes**:\n   - After making changes, click the **Preview** button to see how the Developer Portal looks with your updates. This allows you to verify that your changes appear as intended.\n\n4. **Save and Go Live**:\n   - If you are satisfied with the changes, click **Save** to save your theme as a draft.\n   - To apply the changes to the Developer Portal, toggle the **Go Live** switch and confirm your action by clicking **Enable** in the popup message.\n\n5. **View Changes in the Developer Portal**:\n   - Finally, visit your Developer Portal to see the updated header and footer live on the site.\n\nPlease note that you need to be an admin user of the organization to customize the Developer Portal theme. Once you make changes, they cannot be undone, but you can reset to the default theme if needed.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/customize-the-developer-portal/)."
How do I add a new OAuth 2.0 grant type to my application in Asgardeo for use with Choreo?,"To add a new OAuth 2.0 grant type to your application in Asgardeo for integration with Choreo, you will need to configure an OIDC/OAuth 2.0 application in Asgardeo and ensure that it is linked correctly to your Choreo component. Here are the detailed steps you should follow:\n\n### Step 1: Create and Configure an OIDC/OAuth 2.0 Application in Asgardeo\n\n1. **Sign in to Asgardeo**: Go to [Asgardeo Console](https://console.asgardeo.io/).\n2. **Select Your Organization**: In the top navigation menu, click the **Organization** list and select your organization.\n3. **Create New Application**:\n   - Click **Applications** in the left navigation menu.\n   - Click **+ New Application** and choose **Standard-Based Application**.\n   - Specify a name for the application and select **OAuth2.0 OpenID Connect** as the protocol.\n   - Click **Register**.\n4. **Configure Protocol Settings**:\n   - Click the **Protocol** tab.\n   - Set the **Allowed grant types** based on your requirements (e.g., `Code`, `Refresh Token`).\n   - Add the following as **Authorized redirect URLs**:\n     - `[your-web-application-url]/auth/login/callback`\n     - `[your-web-application-url]/auth/logout/callback`\n   - Specify your web application URL under **Allowed origins**.\n   - In the **Access Token** section, select `JWT` as the **Token type**.\n   - Click **Update**.\n5. **Copy Client ID and Client Secret**: After the application is created, copy the **Client ID** and **Client Secret** as you will need these for the next step.\n\n### Step 2: Link the OIDC/OAuth 2.0 Application to Your Choreo Component\n\n1. **Go to Choreo Console**: In the Choreo Console, navigate to the component for which you want to manage OAuth keys.\n2. **Access Settings**:\n   - Click **Settings** in the left navigation menu.\n   - Click the **Authentication Keys** tab and select the environment where you want to generate keys.\n3. **Select Identity Provider**:\n   - In the **Identity Provider** list, select **Asgardeo - [your-org-name]**.\n4. **Add Keys**:\n   - Paste the **Client ID** and **Client Secret** from the Asgardeo application you created.\n   - Click **Add Keys** to complete the linking process.\n\n### Considerations\n\n- Ensure that you select the appropriate grant types based on the nature of your application (e.g., for user authentication, `Authorization Code` is usually recommended).\n- If you plan to invoke APIs secured with role-based access control, you will need to create roles in Asgardeo and map them accordingly.\n- Make sure to treat the `Client Secret` securely as it can grant access to your application.\n\nBy following these steps, you'll successfully add a new OAuth 2.0 grant type to your application in Asgardeo and integrate it with Choreo.\n\nFor further details, you can refer to the documentation links:\n- [Configure the identity provider for the web application](https://wso2.com/choreo/docs/authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-3-configure-the-identity-provider-for-the-web-application)\n- [Manage Applications and Grant types](https://wso2.com/choreo/docs/consuming-services/manage-application/#grant-types)\n- [Secure API Access with Asgardeo](https://wso2.com/choreo/docs/authentication-and-authorization/secure-api-access-with-asgardeo/#step-4-invoke-the-choreo-api-with-scopes)"
How do I implement a custom API policy using Ballerina in Choreo?,"To implement a custom API policy using Ballerina in Choreo, follow these steps:\n\n### Prerequisites\n1. **Ballerina Installation**: Ensure that you have Ballerina version 2201.5.5 installed. You can download it from the [Ballerina website](https://ballerina.io/downloads/swan-lake-release-notes/swan-lake-2201.5.5).\n2. **Access Token Configuration**: Open the `~/.ballerina/settings.toml` file and configure an access token for Ballerina Central. You can generate a token from [Ballerina Central](https://central.ballerina.io/dashboard?tab=token) and copy the `Settings.toml` file to your local `~/.ballerina` directory or set it as an environment variable.\n\n### Step 1: Initialize a Ballerina Project\nUse the Choreo template to create a mediation policy project:\n```bash\nbal new -t choreo/mediation.template:1.0.0 <policy-name>\n```\nExample:\n```bash\nbal new -t choreo/mediation.template:1.0.0 validateHeader\n```\nThis will create a Ballerina project with the necessary configurations.\n\n### Step 2: Implement the Policy\nOpen the `policy.bal` file in your project and implement your policy. For instance, if you want to validate an incoming request header, you can modify the request and response stubs accordingly. \n\n#### Sample Implementation:\n**Request Flow**:\n```ballerina\n@mediation:RequestFlow\npublic function validateRequestHeader(mediation:Context ctx, http:Request req, string headerName, string headerValue) returns http:Response|false|error|() {\n    string|http:HeaderNotFoundError header = req.getHeader(headerName);\n    if (header is http:HeaderNotFoundError) {\n        string message = string `Header ${headerName} is not found`;\n        log:printError(message);\n        return generateResponse(message, http:STATUS_BAD_REQUEST);\n    }\n    if (header != headerValue) {\n        string validationFailedMessage = string `Header validation failed. Expected ${headerValue} but found ${header}`;\n        log:printError(validationFailedMessage);\n        return generateResponse(validationFailedMessage, http:STATUS_BAD_REQUEST);\n    }\n    log:printInfo(""Header validation successful"");\n    return ();\n}\n\nfunction generateResponse(string message, int statusCode) returns http:Response {\n    http:Response response = new();\n    response.setTextPayload(message);\n    response.statusCode = statusCode;\n    return response;\n}\n```\n\n**Response Flow**:\n```ballerina\n@mediation:ResponseFlow\npublic function validateResponseHeader(mediation:Context ctx, http:Request req, http:Response res, string headerName, string headerValue) returns http:Response|false|error|() {\n    string|http:HeaderNotFoundError header = res.getHeader(headerName);\n    if (header is http:HeaderNotFoundError) {\n        string message = string `Header ${headerName} is not found`;\n        log:printError(message);\n        return ();\n    }\n    if (header != headerValue) {\n        string validationFailedMessage = string `Header validation failed. Expected ${headerValue} but found ${header}`;\n        log:printError(validationFailedMessage);\n        return ();\n    }\n    return ();\n}\n```\n\n### Step 3: Publish the Policy\nOnce your policy is implemented, you need to publish it to Ballerina Central:\n1. Package the policy:\n   ```bash\n   bal pack\n   ```\n2. Publish the package:\n   ```bash\n   bal push\n   ```\n\n### Best Practices\n- Organize your source code within the default module and avoid adding additional modules.\n- Familiarize yourself with different return types of policy flows (like `http:Response`, `false`, `error`, and `()`).\n\nFor detailed information, you can refer to the documentation on how to [implement an API policy](https://wso2.com/choreo/docs/api-management/api-policies/#implement-an-api-policy) in Choreo."
How can I view the audit logs for my organization?,"To view the audit logs for your organization in Choreo, follow these steps:\n\n1. In the Choreo Console, navigate to the top navigation menu and click on **Organization**.\n2. In the left navigation menu, click on **DevOps** and then select **Audit Logs**. This will display the audit logs for the past 30 days by default.\n3. You can apply filter criteria to view audit logs based on a specific time range and other requirements.\n\nAudit logs in Choreo record organization-level user-specific operations, such as project and component creation, updates, and deletions, among others. The logs capture the timestamp and the outcome of each action. \n\nPlease note that only organization administrators can view audit logs by default. If other members need access, the administrator can create a role with the relevant permission and assign it to those members.\n\nFor more detailed instructions on managing audit log access, you can refer to the [Manage audit log access](https://wso2.com/choreo/docs/monitoring-and-insights/view-logs/#manage-audit-log-access) section.\n\nHere’s a visual reference for navigating to the audit logs:\n\n![Audit logs](https://wso2.com/choreo/docs/assets/img/monitoring-and-insights/view-logs/audit-logs.png)\n\nFor additional information on viewing logs, you can check the comprehensive guide [here](https://wso2.com/choreo/docs/monitoring-and-insights/view-logs/#audit-logs)."
How do I create a role that can only view audit logs?,"To create a role in Choreo that grants permissions to view audit logs, follow these steps:\n\n### Step 1: Create a Role with Audit Log Access Permission\n1. In the Choreo Console, go to the top navigation menu and click **Organization**.\n2. In the left navigation menu, click **Settings**.\n3. On the **Organization** tab, click **Roles** and then click **+ Create Role**.\n4. Enter a name and a description for the role.\n5. Click **Next**.\n6. In the **Create Role** dialog, select **LOG-MANAGEMENT** under **Permissions**.\n7. Click **Create**.\n\n### Step 2: Assign the Created Role to an Organization Member\n1. On the **Organization** tab, click **Members** to list the members of the organization.\n2. Click on the member who needs access to audit logs, and then click **+ Add Role**.\n3. Expand the **Roles** list and select the role you created in Step 1.\n4. Click **Add** to assign the selected role to the member.\n\nNow, the designated member will have access to view the audit logs.\n\nFor more details, you can refer to the documentation here: [Manage audit log access](https://wso2.com/choreo/docs/monitoring-and-insights/view-logs/#audit-logs)."
How can I troubleshoot issues related to scale-to-zero in Choreo?,"To troubleshoot issues related to the scale-to-zero feature in Choreo, you can follow these guidelines to identify and resolve common problems:\n\n### 1. **503 Status Code on First Request**\n   - It's common to encounter a 503 status code on the first request after deploying a component with scale-to-zero enabled. This usually happens because the readiness probe has default values that may not align with your application's needs. \n   - **Solution**: Adjust the readiness probe settings in the **DevOps** → **Health Checks** view to better fit your application.\n\n### 2. **Port Limitations**\n   - Ensure that your HTTP service runs on the specified ports for scale-to-zero to work. The supported ports are:\n     - 5000, 6000, 7000, 8000, 9000, 7070 to 7079, 8080 to 8089, and 9090 to 9099, or 8290.\n   - **Solution**: If your service is running on a different port, it will not automatically scale to zero. You may need to change the port or adjust your service configuration.\n\n### 3. **Scheduled Tasks and Component Connections**\n   - Scheduled tasks and manually triggered components cannot connect to a service on a project scope if scale-to-zero is enabled. This may result in errors like `Host not found, not forwarding request`.\n   - **Solution**: Set the task-type component to HPA mode (if on a paid plan) or to no scaling (if on the Developer plan).\n\n### 4. **Service Startup Time**\n   - After enabling scale-to-zero, the service should start within 60 seconds. If it does not, the gateway will timeout the request.\n   - **Solution**: Monitor the startup time and ensure that it is within the expected limit. If it consistently exceeds this duration, consider optimizing your service's startup process.\n\n### 5. **Component Deployment and Environment Configuration**\n   - Make sure that your component is deployed and ready to receive traffic before expecting it to scale to zero.\n   - **Solution**: Check the deployment status in the **Component Listing** pane and ensure that your settings are correctly applied in the **DevOps** → **Scaling** view.\n\nBy following these troubleshooting steps, you should be able to identify and resolve common issues related to the scale-to-zero feature in Choreo.\n\nFor more detailed guidance, please refer to the documentation [here](https://wso2.com/choreo/docs/devops-and-ci-cd/autoscale/autoscale-components-with-scale-to-zero/#troubleshooting)."
How do I configure resource limits for a manual task component?,"To set resource limits for a manual task component in Choreo, you can configure the default container settings associated with the component. Here are the steps to do this:\n\n1. In the Choreo Console, go to the **Overview** page of your manual task component.\n2. Look for the section that allows you to view and edit the container configuration, which includes resource limits.\n3. Set the resource limits according to your requirements. This includes specifying the memory and CPU limits. \n\n   - **Memory Limit**: If the process exceeds the allocated memory limit, the container will be forcefully shut down and restarted.\n   - **CPU Limit**: If the container exceeds the allocated CPU limit, it will be throttled, which may cause significant latencies in compute and I/O operations.\n\nBy setting these limits, you ensure that your manual task component does not consume more resources than necessary, which helps maintain the performance of other workloads on the data plane.\n\nFor more detailed instructions, you can refer to the documentation [here](https://wso2.com/choreo/docs/devops-and-ci-cd/configure-container-resources-commands-and-arguments/)."
How do I add build-time environment variables to a buildpack-based component?,"To add build-time environment variables to a buildpack-based component in Choreo, you can follow these steps:\n\n1. **Access the Component**: In the Choreo Console, navigate to the **Component Listing** pane and select the component you want to configure.\n\n2. **Open Build Configurations**: Go to the **Build** page of the selected component.\n\n3. **Use Build Configurations Editor**: Look for the **Build Configurations Editor** where you can configure the necessary environment variables for building your component.\n\n4. **Add Environment Variables**: Here, you can specify the build-time environment variables by defining the key-value pairs. It's important to note that these environment variables will be passed to the buildpack during the build process, thus allowing you to configure both buildpack-specific environment variables and those required for your component's build.\n\n5. **Example of Setting Variables**: For instance, if you want to override the default Maven command in a Java buildpack, you can set the environment variable `GOOGLE_MAVEN_BUILD_ARGS` with the value `clean install`.\n\nPlease note that the capability to configure build-time environment variables is not available for components created using **Ballerina** or **WSO2 MI** buildpacks.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/develop-components/deploy-an-application-with-buildpacks/#develop-a-component)."
How do I configure file mounts for a Dockerfile-based component?,"To configure file mounts for a Dockerfile-based component in Choreo, follow the steps outlined below:\n\n1. **Select Your Component**: In the Choreo Console, navigate to the **Component Listing** pane and click on the component for which you want to define file mounts.\n\n2. **Access DevOps Settings**: In the left navigation menu, click on **DevOps**, and then select **Configs & Secrets**.\n\n3. **Create a New Config or Secret**: Click on **+ Create** to open the creation pane.\n\n4. **Select File Mount**: In the **Create a Config or Secret** pane, choose the option for **File Mount**.\n\n5. **Mark as Secret (Optional)**: If you want to create the file mount as a secret, check the option **Mark as a Secret**. Otherwise, you can proceed without marking it as a secret.\n\n   > **Note**: If marked as a secret, you won't be able to read the file content after creation.\n\n6. **Specify Display Name**: In the **Display Name** field, enter a name for the file mount. This name is just a reference for identification and does not affect the content.\n\n7. **Define File Mount Path**: In the **File Mount Path** field, specify where to mount the file inside the container using an absolute file path that includes the file name and extension if applicable.\n\n   > **Tip**: The file name in the mount path does not need to match the configuration name or the name of the file you upload.\n\n8. **Upload or Edit File Content**: Upload your configuration file or copy and paste the content into the editor.\n\n9. **Create the File Mount**: Click **Create** to finalize your configuration. \n\n   > **Note**: The configurations and secrets are applied immediately, and any existing running replicas will undergo a rolling restart to reflect the changes.\n\nFor more detailed information, you can refer to the official documentation: [Manage Configurations and Secrets](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-configurations-and-secrets/#apply-a-file-mount-to-your-container)."
How do I use the Choreo CLI to describe a project?,"To describe a project using the Choreo CLI, you can utilize the appropriate command that is designed for this purpose. Although the specific command for describing a project isn't detailed in the documents provided, you can generally use the Choreo CLI commands to manage your projects.\n\nTypically, the command structure might look something like this:\n\n```sh\nchoreo project describe <project-name>\n```\n\nThis command would provide details about a specific project, including its components and configurations. If you're unsure of the exact command syntax, you can always check the help section of the CLI by running:\n\n```sh\nchoreo project --help\n```\n\nThis will give you information about all available commands and options related to projects in the Choreo CLI.\n\nFor more detailed information on the Choreo CLI and its commands, you can refer to the FAQ section [here](https://wso2.com/choreo/docs/references/faq/#choreo-cli)."
How do I configure a Tailscale auth key to automatically approve new nodes?,"I'm here to assist with questions related to Choreo. If your question is about integrating Tailscale with a service or platform within Choreo, please provide more details or clarify how it relates to Choreo. Otherwise, I won't be able to assist with non-Choreo related questions."
How can I secure my API with scopes using Choreo’s built-in security token service?,"To secure an API with scopes using Choreo’s built-in security token service, you can follow these steps:\n\n### Step 1: Assign Permissions to the API\n1. In the Choreo Console, navigate to your project.\n2. Select the component (API) for which you want to set permissions.\n3. Go to the **Deploy** section.\n4. Access the **Endpoint Configurations**.\n5. In the **Permissions List**, click **+ Add Permission(Scope)** and enter the desired permission value.\n6. Click **+ Add New** to add the permission.\n7. Copy the fully qualified name of the added permission for future reference.\n8. Attach the permissions to the respective resources by selecting from the **Select Permissions** list.\n9. Click **Apply**.\n10. Redeploy the component by going to **Configure & Deploy** and clicking **Deploy**.\n\nFor more detailed steps, you can refer to the documentation [here](https://wso2.com/choreo/docs/authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#step-1-assign-permissions-to-an-api).\n\n### Step 2: Create Roles and Assign Permissions\n1. In the Choreo Console, navigate to **Settings**.\n2. Click on the **Application Security** tab.\n3. Click **+ Role**.\n4. Provide a **Role Name** and **Role Description**.\n5. Select the permissions you want to assign to the role and click **Create**.\n\nFor more details, refer to the documentation [here](https://wso2.com/choreo/docs/authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#step-2-create-roles-and-assign-permissions).\n\n### Step 3: Assign Roles to User Groups\n1. Go to the **Organization** tab in the Choreo Console.\n2. Click on **Application Security** and then **Role Management**.\n3. Click **Map Groups** next to the role you want to assign.\n4. Specify the group name and save your changes.\n\nFor further information, check the documentation [here](https://wso2.com/choreo/docs/authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#step-3-assign-roles-to-user-groups).\n\n### Conclusion\nBy following these steps, you can effectively secure your API with scopes using Choreo’s built-in security token service. This setup helps manage access control and ensures that only authorized users can invoke the API based on their assigned roles and permissions. \n\nFor a comprehensive overview of setting up security for APIs, refer to the main documentation [here](https://wso2.com/choreo/docs/authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/)."
How can I configure a continuous deployment pipeline with more than two environments?,"To configure a continuous deployment pipeline with multiple environments in Choreo, follow these steps:\n\n### Step 1: Create a New Continuous Deployment Pipeline\n1. Confirm that you have the `ENVIRONMENT-MANAGEMENT` permission, which is typically granted to roles such as Admin, Choreo Platform Engineer, and Choreo DevOps.\n2. In the Choreo Console, navigate to the **Organization** section and select your organization.\n3. Go to the **DevOps** section in the left navigation menu, and click on **CD Pipelines**.\n4. Click **+ Create Pipeline** and provide the necessary details:\n   - **Name**: Enter a display name for your new pipeline.\n   - **Mark as Default**: Choose this option if you want this pipeline to be the default for all new projects.\n5. Click **+ Add Environment** to include the required environments for your pipeline. You can specify the sequence in which these environments will be applied.\n6. Once you’ve added all desired environments, click **Create** to finalize the new pipeline.\n\n### Step 2: Edit Existing Continuous Deployment Pipeline (if needed)\nIf you need to modify an existing pipeline:\n1. Go to the **CD Pipelines** section as before.\n2. Click the edit icon next to the pipeline you wish to change.\n3. Update the pipeline name, default status, or the sequence of environments as needed.\n4. Click **Update** to save your changes.\n\n### Step 3: Add a Continuous Deployment Pipeline to a Project\nTo apply the created pipeline to a specific project:\n1. Select the project from the **Organization** section.\n2. Navigate to **DevOps** and then to **CD Pipelines**.\n3. Click **+ Add** and choose the pipelines you want to assign to the project.\n4. Click **Add** to finalize this action.\n\n### Important Notes\n- Choreo allows you to manage components across multiple environments using a **build once, deploy many** strategy. This means you create your services once and can promote them to different environments for testing or production.\n- Each environment can have its own configurations and secrets, ensuring a clean separation between code and environment-specific settings. \n\nFor further details, you can refer to the documentation here:\n- [Create a new continuous deployment pipeline](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-continuous-deployment-pipelines/#create-a-new-continuous-deployment-pipeline)\n- [Add a continuous deployment pipeline to a project](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-continuous-deployment-pipelines/#add-a-continuous-deployment-pipeline-to-a-project)"
How can I quickly deploy a sample REST API with OpenAPI definition in Choreo?,"To quickly deploy a sample REST API with an OpenAPI definition in Choreo, you can follow these steps:\n\n### Steps to Deploy a Sample REST API\n\n1. **Create an API Proxy**:\n   - If you don’t have any components in your project, click on **+ Create** to start.\n   - Select the **API Proxy** card, which opens the **Create an API Proxy** pane.\n   - Click on the **Create from Scratch** option.\n\n2. **Specify Proxy Metadata**:\n   - Fill in the following details:\n     - **Context**: This is a unique identifier for your API. For example, you might use `department-service`.\n     - **Version**: Define the version of your API, such as `v1.0`.\n     - **Target**: Provide the URL of the service you want to connect to. For example, you might use `https://samples.choreoapps.dev/company/hr`.\n\n3. **Component Details**:\n   - Enter the component details:\n     - **Component Display Name**: A user-friendly name for your API, e.g., `Department Service`.\n     - **Component Name**: This must be unique and cannot be changed after creation, e.g., `department-service`.\n     - **Description**: A brief description of what your API does, e.g., `Sample proxy for department service`.\n\n4. **Create the API Proxy**:\n   - Click on **Create**. This action will create the API proxy component and redirect you to the **Deploy** page.\n\n5. **Post-deployment Actions**:\n   - To test the deployed service, navigate to the **Test Console** in the Choreo Console UI.\n\nFollowing these steps will help you set up and deploy a sample REST API quickly. For detailed guidance, you can refer to the official documentation: [Develop an API Proxy from Scratch](https://wso2.com/choreo/docs/develop-components/develop-proxy/develop-an-api-proxy-from-scratch/#step-1-create-an-api-proxy)."
How can I generate access tokens for API testing in the Choreo Developer Portal?,"To generate an access token for API testing in the Choreo Developer Portal, follow these detailed steps:\n\n### Prerequisites\nBefore you begin, ensure you have the following:\n1. An application created in the [Choreo Developer Portal](https://devportal.choreo.dev).\n2. Keys generated for the application.\n3. Subscriptions created for the APIs you want to access.\n\n### Steps to Generate an Access Token\n1. **Access the Applications Section**:\n   - In the header of the Choreo Developer Portal, click on **Applications**.\n\n2. **Select Your Application**:\n   - On the **My Applications** page, click on the application for which you want to generate keys and tokens.\n\n3. **Navigate to Credentials**:\n   - In the left navigation menu, click on the desired environment under **Credentials**. This will open the **Application Keys** pane for that environment.\n\n4. **Generate the Token**:\n   - Click **Generate Token** to create a test access token.\n\nAfter following these steps, you will have an access token that you can use for testing API calls.\n\nFor more information, you can refer to the detailed documentation here: [Generate an Access Token via the Developer Portal UI (for testing)](https://wso2.com/choreo/docs/consuming-services/generate-an-access-token/#generate-an-access-token-via-the-developer-portal-ui-for-testing)."
How do I configure a custom domain for a scheduled task?,"To configure a custom domain for a scheduled task in Choreo, you'll need to follow a two-step process: adding the custom domain at the organizational level and then requesting a custom URL for your scheduled task.\n\n### Step 1: Add a Custom Domain for Your Organization\n\n1. Ensure you have organization administrator privileges.\n2. In the Choreo Console header, click the **Organization** list.\n3. In the left navigation menu, click **Settings** to open the organization-level settings page.\n4. Click the **URL Settings** tab and then the **Active Domains** tab.\n5. Click **+ Add Domains**.\n6. In the **Add a Custom Domain** pane:\n   - Enter your custom domain name.\n   - Select the environment to apply the domain name.\n   - Choose the appropriate entity type (e.g., API, Web App).\n7. Note the generated CNAME target value and create a DNS record with your DNS provider.\n8. Once the DNS record is created, click **Verify** to check the CNAME mapping.\n9. After successful verification, click **Next** and select a TLS certificate provider.\n10. Finally, click **Add** to save the custom domain.\n\nOnce your custom domain is added, it will be available for use.\n\n### Step 2: Request a Custom URL for Your Scheduled Task\n\n1. Make sure your scheduled task is deployed to the specific environment where you want to configure the custom URL.\n2. In the **Component Listing** pane, select your scheduled task.\n3. Click **Settings** in the left navigation menu.\n4. Go to the **URL Settings** tab, where you'll see the active deployments and whether a custom URL is configured.\n5. If a custom domain is available, click the **Edit URL Mapping** icon for the respective environment.\n6. In the **URL Settings** dialog:\n   - Select your custom domain from the dropdown.\n   - Specify the path for the scheduled task if required.\n7. Click **Configure** to create the custom URL mapping, which will be pending until an administrator approves it.\n\n### Approving the Custom URL Request\n\nAs an administrator, you can approve the custom URL request by going to the **Pending URL Requests** tab under **URL Settings** and clicking the **Approve URL Mapping** icon next to the request you wish to approve.\n\nOnce approved, your scheduled task will be accessible via the configured custom URL.\n\nFor detailed instructions on adding a custom domain and requesting a custom URL, you can refer to the [Choreo documentation on configuring a custom domain for your organization](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/)."
How can I switch between different projects within the VS Code extension?,"I'm here to help with questions related to Choreo. If your question is related to switching projects within the Choreo VS Code extension or any other aspect of Choreo, please provide more details or clarify your question. If it's not related to Choreo, I won't be able to assist with it."
How do I link a local directory to an existing Choreo project using the VS Code extension?,"To link a local directory to an existing Choreo project using the VS Code extension, follow these steps:\n\n1. **Open the VS Code Extension**: Ensure you have the Choreo extension installed in your Visual Studio Code environment.\n\n2. **Connect to Your Choreo Project**: Use the extension to connect to your existing Choreo project. This typically involves selecting the project from a list of your existing projects.\n\n3. **Link the Local Directory**: \n   - From the VS Code interface, you should have an option to associate or link a local directory with your Choreo project. This might be a feature in the command palette or a specific button in the Choreo extension sidebar.\n   - Select the local directory that contains your project files. This directory should contain the relevant code and configuration files for your Choreo components.\n\n4. **Initialize the Connection**: Once the local directory is linked, the extension will often prompt you to initialize the connection by setting up necessary configurations or files that allow your local code to sync with the Choreo project.\n\n5. **Confirm the Link**: After linking, ensure that the local changes you make in the directory are reflected in your Choreo project. This may involve committing changes to a Git repository if your project is version-controlled.\n\nFor more detailed instructions or specific commands, you may refer to the [Choreo documentation on developing components with Git](https://wso2.com/choreo/docs/develop-components/develop-components-with-git/#connect-a-git-repository-to-choreo). \n\nThis documentation will provide you with insights on how to effectively manage your Git repositories within Choreo, including linking and syncing your local development environment."
How do I add a new project association to a context.yaml file using the VS Code extension?,"To add a new project association to a `context.yaml` file using the Choreo VS Code extension, follow these steps:\n\n1. **Open your VS Code project**: Ensure you have your project opened in VS Code where the `context.yaml` file is located.\n\n2. **Locate the `context.yaml` file**: Navigate to the directory containing the `context.yaml` file in your project.\n\n3. **Edit the `context.yaml` file**: Open the `context.yaml` file for editing. You will need to add a new project association in the appropriate format. Typically, this involves specifying the project name, identifier, and any other relevant details in YAML format.\n\n4. **Add the new project association**: Insert the new project details under the relevant section in the `context.yaml` file. The structure may look like this:\n\n   ```yaml\n   projects:\n     - name: your_project_name\n       id: your_project_id\n       # Other relevant properties\n   ```\n\n5. **Save your changes**: After adding the new project association, make sure to save the `context.yaml` file.\n\n6. **Deploy your changes**: After saving the file, you may need to deploy your changes using the Choreo VS Code extension functionalities to ensure that the new association is recognized in the Choreo environment.\n\nFor detailed guidance on using the Choreo VS Code extension, please refer to the official documentation. Unfortunately, I do not have specific steps regarding the usage of the Choreo VS Code extension in the provided documents. For more information, you might want to explore the Choreo documentation directly."
How can I add a third-party service as a dependency to my project?,"To add a third-party service as a dependency to your Choreo project, you need to register the service in the Choreo Console. Here’s a step-by-step guide to help you with the process:\n\n### Step 1: Register the Third-Party Service\n\n1. **Select the Level of Registration**:\n   - Decide whether to register the service at the **Organization level** (accessible from any project within the organization) or at the **Project level** (restricted to a specific project).\n\n2. **Access the Dependencies Section**:\n   - In the left navigation menu, click on **Dependencies** and then select **Third-Party Services**.\n\n3. **Register the Service**:\n   - Click on **+ Register**.\n   - Provide the necessary details for the service:\n     - **Name**: Enter a name for your service.\n     - **Version**: Specify the version of the service.\n     - **Service Definition File**: Upload the service definition file (e.g., OpenAPI or GraphQL schema). This will automatically detect the service type.\n     - **Verify the Service Type**: Ensure the correct service type is displayed.\n\n4. **Define Endpoints**:\n   - Click **Define Endpoints** to proceed to define the service endpoints, which include the parameters required to connect to the service (like the service URL, API key, etc.).\n\n### Step 2: Define Service Endpoints\n\n1. **Create the Endpoint**:\n   - Under **Define New Endpoint**, enter:\n     - **Name**: Specify a name for the endpoint.\n     - **Endpoint URL**: Provide the endpoint URL.\n   \n2. **Add Additional Parameters**:\n   - Include any other parameters required for the connection, such as API keys or authorization tokens. You can mark parameters as ""Secret"" for confidentiality.\n\n3. **Select Environments**:\n   - Choose the environments where the endpoint should be accessible. This determines where service consumers can create connections to the endpoint.\n\n4. **Complete the Registration**:\n   - Click **OK** after defining the endpoint. If you have more endpoints to add, click **+ New Endpoint** and repeat the process.\n   - Finally, click **Register** to finalize the registration of the service.\n\nOnce registered, the service will be available in the Internal Marketplace and can be consumed via a Connection.\n\n### Important Notes:\n- Ensure you have all the necessary details from the service provider before you start the registration process, such as the service URL and API specifications.\n- If you want to manage the service later, you can view or update details from the **Third-Party Services** list.\n\nFor more detailed information, you can refer to the documentation on [registering a third-party service in Choreo](https://wso2.com/choreo/docs/integrate-and-manage-external-services/integrate-and-manage-third-party-services/#register-a-third-party-service-in-choreo)."
How do I configure a connection to an external service using mutual TLS?,"To configure a connection to an external service using mutual TLS in Choreo, follow these steps:\n\n### 1. Generate Certificates\nYou need to create the following certificates for mutual TLS:\n\n- **Root Certificate**: This certificate is trusted by both the client and server. It is used to verify the authenticity of other certificates during the mutual TLS handshake and to issue certificates for clients and servers. You can generate this using a tool like OpenSSL.\n\n- **Client Certificate**: This certificate authenticates the client. The Common Name (CN) in the certificate identifies the client and must be signed by the root certificate.\n\n- **Server Certificate**: This certificate is used by clients to verify the server’s trustworthiness. Similar to the client certificate, it must be signed by the root certificate. When generating the server certificate, specify the server's hostname for the Subject Alternative Name (SAN). You can get this hostname from the project endpoint on the Overview page. \n\n### 2. Configure Mutual TLS\nOnce you have your certificates ready, configure mutual TLS for your service connections. Mutual TLS ensures that both the client and server validate each other's certificates before establishing a connection, thereby enhancing security.\n\n### 3. Read Certificates in Components\nEach component can read the mutual TLS certificates from the file system or via environment variables. Ensure that your private key is saved as a secret for security.\n\n### Additional Resources\nFor a more detailed understanding and a sample implementation, you can refer to the following documents:\n- [Configure Mutual TLS Between Components](https://wso2.com/choreo/docs/authentication-and-authorization/configure-mutual-tls-between-components/)\n- [Secure Communication Between the Choreo Gateway and Your Backend with Mutual TLS](https://wso2.com/choreo/docs/authentication-and-authorization/secure-communication-between-the-choreo-gateway-and-your-backend-with-mutual-tls/)\n  \nThese resources will provide you with a comprehensive guide to setting up mutual TLS connections effectively in Choreo."
How do I pass custom claims in the JWT to my backend service?,"To pass custom claims in the JWT to your backend service in Choreo, you need to enable the feature that allows end-user attributes to be sent through API calls. Here's how you can do it:\n\n### Steps to Enable Passing End-User Attributes\n\n1. **Select Your Component**: In the Choreo Console, navigate to the **Components Listing** pane and select the component for which you want to pass end-user attributes to the backend.\n\n2. **Access Endpoint Configurations**:\n   - Click on **Deploy** in the left navigation menu.\n   - Go to the **Set Up** card and click on **Endpoint Configurations**. This will open the **Endpoint Configurations** pane.\n\n3. **Enable Passing Security Context**:\n   - Check the **Pass Security Context To Backend** checkbox.\n   - Optionally, you can specify appropriate audience values in the **End User Token Audiences** field. This restriction allows the backend service to validate and confirm the intended recipients of the JWT.\n\n4. **Apply Changes**: Click **Apply** to save your changes.\n\n5. **Redeploy the Component**: Finally, to apply the settings, go back to the **Set Up** card and click **Deploy**.\n\n### Understanding JWT Structure\n\nWhen a request is made, the backend JWT is carried to the backend service in the format:\n```\n{token header}.{claims list}.{signature}\n```\nThe JWT will be appended as the `X-JWT-Assertion` header in the outgoing message. This JWT can include various claims, such as user metadata or application details, which your backend service can utilize for processing.\n\n### Additional Information\n\n- The claims that get added to the JWT can vary based on the grant type used when generating the access token.\n- If you want to validate the JWT, ensure that your backend service can verify the authenticity of the claims using the appropriate public keys.\n\nFor more detailed information, you can refer to the documentation here: [Pass End-User Attributes to Upstream Services](https://wso2.com/choreo/docs/authentication-and-authorization/pass-end-user-attributes-to-upstream-services/#enable-passing-end-user-attributes-to-the-backend)."
How can I use the test runner to execute integration tests on my API?,"To execute integration tests on an API using the test runner in Choreo, you can follow these structured steps:\n\n### Step 1: Create a Test Runner Component\n1. In the Choreo Console, click **+Create** in the **Component Listing** section.\n2. Select the **Test Runner** card.\n3. Choose to connect to your GitHub account or use a public repository. If connecting to your GitHub account, authorize the Choreo GitHub App by entering your credentials.\n4. Fill out the repository details:\n   - **Organization**: Your GitHub account\n   - **GitHub Repository**: choreo-samples\n   - **Branch**: `main`\n   - **Component Directory**: Depending on the language of your choice (e.g., `/test-runner-go` for Go).\n5. Select a buildpack based on your programming language.\n6. Enter a unique name, display name, and description for your test runner component.\n7. Click **Create** to finalize the creation of the test runner component.\n\n### Step 2: Build and Deploy the Test Runner Component\n1. In the left navigation menu, click **Build**.\n2. Click **Build Latest**.\n3. Navigate to **Deploy** on the left.\n4. Click **Deploy** in the **Set Up** card to deploy the test runner component. Use **Configure and Deploy** if you need to provide additional configurations or secrets.\n\n### Step 3: Execute the Tests\n1. After successfully deploying, click **Execute** in the left navigation menu.\n2. Select the desired environment from the environment list.\n3. Click **Run Now** to start the test execution. If you need to pass dynamic values as command-line arguments, click the drop-down next to **Run Now** and select **Run with Arguments**. Enter your arguments in the **Runtime Arguments** pane and click **Execute**.\n4. Once the tests have completed, you can view the results listed on the execution page. Click on a specific execution to see the detailed test results.\n\n### Additional Notes\n- The test runner can execute tests written in various programming languages or Postman Collections.\n- For Postman Collections, you can specify specific collections to run using the `-f` or `--files` argument.\n\nBy following these steps, you can effectively set up and execute integration tests on your API using the test runner in Choreo. For more detailed instructions, you can refer to the documentation [here](https://wso2.com/choreo/docs/testing/test-components-with-test-runner/#build-and-deploy-the-test-runner-component-to-execute-the-tests)."
How do I configure CI/CD pipelines to automatically deploy changes to different environments?,"To set up CI/CD pipelines in Choreo for automating deployments to multiple environments, you can follow these steps:\n\n### 1. **Prerequisites**\n   - Ensure you have the `ENVIRONMENT-MANAGEMENT` permission, which is typically granted to Admin, Choreo Platform Engineer, and Choreo DevOps roles.\n\n### 2. **Create a Continuous Deployment Pipeline**\n   - In the Choreo Console, navigate to **Organization** in the top menu and select your organization.\n   - Go to **DevOps** and then click on **CD Pipelines**.\n   - Click on **+ Create Pipeline** and fill in the required details:\n     - **Name**: Provide a display name for your new pipeline.\n     - **Mark as Default**: Optionally, set this pipeline as the default for all new projects.\n   - Add the required environments in the preferred sequence by clicking **+ Add Environment**.\n   - Finally, click **Create** to finalize the pipeline setup.\n\n### 3. **Deployment Strategy**\n   - Choreo adopts a *build once, deploy many* strategy. This means the application is built only once (per commit if automatic build on commit is enabled) and then promoted to subsequent environments.\n   - You can manually deploy images or enable **Auto Deploy on Build** for automatic deployment upon completion of a build. Remember, this requires enabling **Auto Build on Commit** first.\n\n### 4. **Environment Management**\n   - Each project in Choreo can have customized environments. While default environments like development and production are provided, you can create additional environments if you are in a private data plane organization.\n\n### 5. **Promoting Components**\n   - After building an image, you can promote it to higher environments via the **Deploy** page of a component. This allows for testing changes in lower environments before moving to production.\n\n### Additional Information\n- Choreo injects configurations and secrets that you maintain at the environment level into components at runtime, ensuring a strict separation from source code.\n- All configurations and secrets are stored securely and can vary across environments without changing the underlying code.\n\nFor more detailed steps and additional information, you can refer to the following documentation:\n- [Create a new continuous deployment pipeline](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-continuous-deployment-pipelines/#create-a-new-continuous-deployment-pipeline)\n- [CI/CD Overview](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#deployment)\n\nThis workflow will help you effectively set up CI/CD pipelines in Choreo for your deployments."
How can I configure Choreo to notify me when a build fails?,"To configure notifications for build failures in Choreo, you need to set up a Build Failure Alert for your component. Here’s a step-by-step guide on how to do this:\n\n1. **Navigate to Your Component**: Go to the specific component for which you want to configure the alert.\n\n2. **Access the Alerts Section**: In the Choreo console, click on **Observability** in the left menu, and then select **Alerts**.\n\n3. **Create an Alert Rule**: Click on **Create Alert Rule** to initiate the creation of a new alert.\n\n4. **Select Alert Type**: Choose **Build Failure Alerts** from the list of available alert types.\n\n5. **Choose Environment and Version**: Specify the Environment you want to create the alert for and select the appropriate Deployment Track or Version of your component.\n\n6. **Configure Alert Parameters**: You may need to configure any additional parameters specific to the Build Failure Alert if applicable.\n\n7. **Specify Notification Emails**: In the **Emails** field, enter the email addresses that should be notified when a build failure occurs. You can add up to 5 email addresses.\n\n8. **Advanced Configurations**: If necessary, configure any additional parameters in the **Advanced Configurations** dropdown.\n\n9. **Review and Create**: The **Explanation window** will provide a summary of your alert configurations. Once you are satisfied, click **Create** to save and activate your alert.\n\n10. **Manage Your Alerts**: Your alert will be listed in the **Configure Alerts** pane, where you can edit, remove, or enable/disable it as needed.\n\nBy following these steps, you can effectively set up notifications for build failures in Choreo, allowing you to maintain a smooth development workflow.\n\nFor more detailed information, you can refer to the [Alert Overview documentation](https://wso2.com/choreo/docs/monitoring-and-insights/alerts-overview/#configure-alert)."
How do I implement canary deployments in Choreo?,"In Choreo, canary deployments can be effectively set up and managed using deployment tracks. Deployment tracks allow you to create dedicated pathways for different versions of your components, enabling independent version control and deployment. Here's how to set up and manage canary deployments:\n\n### Setting Up a Deployment Track for Canary Deployments\n\n1. **Create a Component**: Ensure that you have already created a component in Choreo.\n   \n2. **Access the Component**:\n   - In the Choreo Console, navigate to the **Component Listing** pane and select the component you want to create a deployment track for.\n\n3. **Create a Deployment Track**:\n   - Click on the **Deployment Track** drop-down list at the header of the component overview page.\n   - Select **+ Create New** to open the **Create Deployment Track** dialog.\n   - In this dialog, choose a branch from your GitHub repository that you want to associate with the deployment track. You can also provide a description and specify a unique API version if it's a service component.\n   - Click **Create** to finalize the creation of the deployment track.\n\n### Managing Deployment Tracks\n\n- **Relinking Deployment Tracks**: If you need to switch the branch reference for a deployment track (for example, if you want to test a new feature or version), you can do so by:\n  1. Clicking on the **Deployment Track** drop-down list and selecting **View All** to go to the component settings page.\n  2. Finding the deployment track you want to relink and clicking the **Edit Branch** icon.\n  3. Selecting the new branch from the **Branch Name** list and saving your changes.\n\n### Sample Scenario for Canary Deployments\n\nTo effectively manage version releases using canary deployments:\n1. **Unlink the Main Branch**: Start by unlinking the `main` branch from its associated deployment track.\n2. **Merge Changes**: After testing new features in the `dev` branch, merge those changes into the `main` branch.\n3. **Link New Deployment Track**: Unlink the `dev` branch from its deployment track and link the updated deployment track to the `main` branch for production deployment.\n4. **Create Additional Tracks**: For ongoing development, create another deployment track linked to the `dev` branch to facilitate further testing and development.\n\n### Important Considerations\n- Deployment track creation and management do not apply to API Proxy and BYOI components.\n- Make sure you have a minimum of two branches in your GitHub repository to relink deployment tracks effectively.\n\nFor more detailed instructions, you can refer to the documentation on managing deployment tracks [here](https://wso2.com/choreo/docs/develop-components/manage-deployment-tracks-for-choreo-components/#create-a-deployment-track)."
How do I manage different versions of my APIs in Choreo?,"In Choreo, users can manage different versions of APIs effectively through the subscription process and by utilizing the Developer Portal. Here’s how it works:\n\n1. **Subscription to APIs**: When you subscribe to an API, your subscription automatically covers all minor versions within that API's major version. This means that if a new minor version of an API is published, the invocation URL for the major version will route to the latest minor version. This ensures that existing client applications continue to function without any disruption while still benefiting from updates in the newer minor version.\n\n2. **Viewing API Versions**: In the Choreo Developer Portal, APIs are listed by their major versions. You can view the subscribed versions of an API along with details such as the application name and the creation date. This allows you to keep track of which versions of the API your applications are using.\n\n3. **Lifecycle Management**: APIs in Choreo go through various lifecycle states — CREATED, PRE-RELEASED, PUBLISHED, BLOCKED, DEPRECATED, and RETIRED. When a new version is released, the previous version can be marked as DEPRECATED, allowing existing subscribers to continue using it while new subscriptions are disabled. Eventually, when the old version is no longer in use, it can be RETIRED.\n\n4. **Best Practices**: It is recommended to always use the latest version of an API to ensure compatibility with the most recent updates. You can copy the endpoint from the API overview page in the Developer Portal and integrate it into your client application.\n\nFor more detailed steps on how to manage API subscriptions and view available API versions, you can refer to the following documentation:\n- [Create a Subscription](https://wso2.com/choreo/docs/consuming-services/create-a-subscription/)\n- [Discover APIs](https://wso2.com/choreo/docs/tutorials/consume-an-api-hosted-in-choreo/#discover-apis)\n- [API Lifecycle Management](https://wso2.com/choreo/docs/api-management/lifecycle-management/#api-lifecycle-states)\n\nThis structured approach allows for effective management of API versions and ensures that applications can adapt to changes seamlessly."
How do I add documentation to my API in Choreo?,"To add documentation to your API in Choreo, you can follow these steps:\n\n1. In the **Component Listing** pane, click on the API component for which you want to add documents.\n2. In the left navigation menu, click **Manage** and then select **Documents**.\n3. Specify a title for the document and provide the content using markdown syntax.\n4. Click **Add** to save the document.\n\nYou can add one or more documents as needed to enhance the visibility of your API. Additionally, you have the option to edit or delete existing documents if necessary.\n\nAdding documentation can improve the overall understanding of the API for its consumers by providing details such as invocation instructions, limitations, and version history.\n\nFor more detailed guidance, you can refer to the documentation [here](https://wso2.com/choreo/docs/api-management/documents/#add-documents-to-an-api)."
How do I use the Choreo VS Code extension to view logs?,"To view logs using the Choreo VS Code extension, you will need to utilize the unified log view feature available in Choreo. This allows for both runtime and audit logs to be accessed, providing valuable insights into application performance and user activity while maintaining data privacy.\n\n### Steps to View Logs in Choreo:\n\n1. **Access Runtime Logs**:\n   - The Choreo platform offers insights into both project and component-level logs, which include application and gateway logs. \n   - You can apply filters based on parameters such as:\n     - **Log Level**: (Error, Warn, Info, Debug)\n     - **Log Type**: (Application, Gateway)\n     - **Environment**: (Development, Staging, Production)\n   - This can simplify your debugging process.\n\n2. **Audit Logs**:\n   - Audit logs capture organization-level user-specific operations performed via the Choreo Console.\n   - These logs include actions like project creation, component updates, and more.\n   - To view audit logs, you need the appropriate permissions, typically set by an organization administrator.\n\n### Additional Features:\n- **Real-time Insights**: You can view live logs as well as historical logs, with the ability to define a required time range for relevant entries.\n- **Advanced Filtering**: The log view provides capabilities to efficiently navigate through logs, which is beneficial for troubleshooting in distributed environments.\n\nFor more detailed instructions and visual aids, you can refer to the following documentation:\n- [View Logs](https://wso2.com/choreo/docs/monitoring-and-insights/view-logs/)\n- [Observability Overview: Logs](https://wso2.com/choreo/docs/monitoring-and-insights/observability-overview/#logs)\n- [View Private Data Plane (PDP) Logs](https://wso2.com/choreo/docs/monitoring-and-insights/logs/view-pdp-logs/)\n\nThese resources will help you utilize the Choreo VS Code extension effectively for log management."
How can I add a custom logo to the Choreo Developer Portal?,"To add a custom logo to the Choreo Developer Portal, you will need to customize the Developer Portal theme through the Choreo Console. Here are the steps to do that:\n\n1. **Ensure Admin Privileges**: Make sure you have admin user privileges for your organization, as only admins can customize the Developer Portal theme.\n\n2. **Access Theme Settings**:\n   - In the Choreo Console, navigate to the **Settings** section in the left pane.\n   - Click on the **Organization** list to open the organization level settings page.\n   - Select the **API Management** tab and then click on **Devportal Theme**.\n\n3. **Customize the Theme**:\n   - Once you are in the theme customization area, you can expand the relevant sections to modify various elements, including the logo.\n   - Look for the section related to logos and upload your custom logo image.\n\n4. **Preview Your Changes**: After making your changes, you can click on **Preview** to see how the Developer Portal will look with the new logo and other modifications.\n\n5. **Save and Apply Changes**:\n   - Click **Save** to save your changes as a draft theme.\n   - To make the changes live, toggle the **Go Live** switch and confirm by clicking **Enable**.\n\n6. **View Changes**: Finally, you can view your updated Developer Portal to see the new logo in place.\n\nPlease note that any changes made cannot be undone, so make sure you are satisfied with your modifications before going live.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/customize-the-developer-portal/)."
How do I control which users can view my API in the Choreo Developer Portal?,"To manage user permissions or visibility settings for APIs in the Choreo Developer Portal, follow these steps:\n\n### Change API Visibility\n\n1. **Access the API**:\n   - In the Choreo Console, navigate to the **Component Listing** pane and select the REST API (Service) for which you want to control visibility.\n\n2. **Navigate to API Info**:\n   - In the left navigation menu, click **Manage** and then click on **API Info**.\n\n3. **Adjust Visibility Settings**:\n   - On the **API Info** page, click the **Developer Portal** tab.\n   - Under **General Details**, you will find a **Visibility** list. Here, you can choose from the following options:\n     - **Public**: The API is visible to all users in the Developer Portal.\n     - **Private**: The API is only visible to users who sign in to the Developer Portal.\n     - **Restricted**: The API is visible only to users with specific roles that you will define.\n\n### Enable Fine-Grained Role-Based Access Control\n\nIf you choose the **Restricted** option, you can specify which roles have access to the API:\n\n1. After selecting `Restricted`, you will see a list of available roles in your organization under **Visible Roles**.\n2. Select any combination of roles. Only users with these roles will have access to the APIs through the Developer Portal.\n\n### Creating a New Role (if needed)\n\nIf you want to create a new role to assign to the API:\n\n1. Click **+ Create New Role** in the list.\n2. Provide the role name and description.\n3. Click **Next**.\n4. Assign the relevant permissions to the newly created role.\n5. Click **Create**.\n6. Finally, select the newly created role from the **Visible Roles** list.\n\n7. Click **Save** to apply the changes.\n\nBy configuring these settings, you can effectively manage which users can view and access your APIs in the Choreo Developer Portal.\n\nFor more detailed information, you can refer to the documentation on [Control API Visibility](https://wso2.com/choreo/docs/api-management/control-api-visibility/#change-api-visibility)."
How can I configure an alert for when my API starts returning 500 errors?,"To configure alerts for monitoring API responses, specifically for 500 errors, you can set up a **Status Code Alert** in the Choreo Console. This type of alert can notify you when your component returns specific HTTP error codes, including the 500 Internal Server Error.\n\nHere's how to configure a Status Code Alert for 500 errors:\n\n1. **Navigate to the Component**: Go to the component for which you want to configure the alert.\n2. **Access Alerts**: In the left menu, click on **Observability** and then select **Alerts**.\n3. **Create Alert Rule**: Click on **Create Alert Rule** to start setting up a new alert.\n4. **Select Alert Type**: Choose **Status Code Alert** as the alert type.\n5. **Configure Alert Settings**:\n   - **Status Code**: Enter `500` to monitor for internal server errors.\n   - **Count**: Specify the minimum number of occurrences (e.g., `5`) to trigger the alert.\n   - **Interval**: Define the time window for counting occurrences (e.g., `5 minutes`).\n6. **Environment and Deployment Track**: Select the environment and the deployment track or version as required.\n7. **Email Notifications**: In the **Emails** field, specify the email addresses that should be notified when the alert is triggered.\n8. **Advanced Configurations**: Configure any additional parameters in the **Advanced Configurations** dropdown if needed.\n9. **Create Alert**: Review the summary in the **Explanation window** and click **Create** to save and activate your alert.\n\nBy following these steps, you will have configured an alert that monitors for 500 errors, helping you to quickly identify and respond to issues affecting your API's availability.\n\nFor more detailed information, you can refer to the official documentation on configuring alerts: [Configure Alert](https://wso2.com/choreo/docs/monitoring-and-insights/alerts-overview/#configure-alert)."
How do I define a new endpoint for my service after it has already been deployed?,"To define a new endpoint for a service that has already been deployed in Choreo, follow these steps:\n\n1. **Go to the Deploy Section**: In the left navigation menu, click on **Deploy**.\n   \n2. **Update Image & Deploy**: Click on the **Update Image & Deploy** button within the **Build Area** card.\n\n3. **Define Endpoints**: In the **Endpoint** pane that appears, you can define the new endpoints for your service during the manual deployment process. \n\n4. **Create/Update Endpoints**: Click on **Create/Update Endpoints** to proceed.\n\n5. **Edit endpoints.yaml**: Under the **Edit endpoints.yaml** section, you will have the option to edit the `endpoints.yaml` file in the provided editor. Here, you can specify the details for the new endpoint such as protocol, port, network visibility, and schema.\n\n6. **Alternative - Upload API Specification**: Instead of manually editing the YAML file, you can also upload the associated API specification/schema files (such as OpenAPI or GraphQL schemas). You can reference these files in the `endpoints.yaml` by their filename, similar to how you would in Git-based Choreo components.\n\n7. **Save Changes**: Once you have defined your new endpoints, ensure to save the changes.\n\nBy following these steps, you can successfully define new endpoints for your already deployed service in Choreo.\n\nFor more detailed information, you can refer to the documentation on [exposing service endpoints](https://wso2.com/choreo/docs/develop-components/bring-your-own-image/#step-4-expose-service-endpoints)."
How do I configure a service to use a specific version of Java?,"To configure a service in Choreo to use a specific version of Java, you need to ensure that you specify the desired OpenJDK version in your project's configuration. Choreo supports the following Java versions:\n\n- 8\n- 11\n- 17\n- 18 (OpenJDK Runtime Environment Temurin)\n\nHere are the steps you can follow:\n\n1. **Define the Java Version**: When you set up your service component, make sure to indicate the required Java version in your project configuration. This ensures that your service will run using the specified Java version.\n\n2. **Use a Procfile (Optional)**: While it's optional to include a `Procfile` for Java projects, if you want to customize the entry point of your container, you can create a `Procfile` in your project root directory. Here’s an example of what it might look like:\n   ```\n   web: java -jar target/sample.jar\n   ```\n   This command specifies how to start your Java application.\n\n3. **Manage Dependencies**: If you are using Maven, ensure that your project is correctly set up, and that the `Main` class is defined in the manifest file. \n\n4. **Build and Deploy**: After configuring your project, you can build and deploy your service through the Choreo console. If you need to upgrade your Java version later, you may also need to redeploy your component.\n\nFor more detailed information, you can refer to the relevant documentation on deploying applications with buildpacks in Choreo: [Deploy an Application with Buildpacks](https://wso2.com/choreo/docs/develop-components/deploy-an-application-with-buildpacks/#develop-a-component).\n\nIf you have any other questions or need further assistance, feel free to ask!"
