question,answer
How do I configure a custom error page for managed authentication in Choreo?,"To set up a custom error page for managed authentication in Choreo, you need to define the error path in the configuration of your web application. When an error occurs during a redirection-based process, such as sign-in or sign-out, Choreo will automatically redirect users to your specified custom error page.\n\nHere are the steps to configure the custom error page:\n\n1. **Enable Managed Authentication**: Ensure that managed authentication is enabled for your web application component during the deployment process.\n\n2. **Configure Paths**: In the configuration settings, you will find a field labeled **Error Path**. This is where you can specify the relative path to your custom error page.\n\n3. **Default Behavior**: If you do not configure an error path, Choreo's managed authentication will redirect users to its default error page whenever an error occurs.\n\n4. **Error Page Parameters**: When redirecting to the custom error page, Choreo will include the following query parameters in the URL:\n   - **code**: A short textual error code indicating the error.\n   - **message**: A description of the error.\n\nBy defining a custom error page, you can ensure that users have a better experience when encountering issues during authentication.\n\nFor further details on this setup, you can refer to the documentation [here](https://wso2.com/choreo/docs/authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-1-set-up-managed-authentication-for-your-web-application)."
What are the limitations of the free tier in Choreo concerning API management?,"The free tier of Choreo has specific limitations regarding API management. Here are the key constraints you should be aware of:\n\n| Resource                                                         | Limit                                    |\n|------------------------------------------------------------------|------------------------------------------|\n| Maximum request payload                                           | 50 MB                                    |\n| URL size                                                        | 2 KB                                     |\n| Request header                                                  | <ul><li>Total: 40 KB</li><li>Max Single: 10 KB</li></ul> |\n| Total request duration                                           | <ul><li>Minimum: 10 seconds</li><li>Default: 1 minute</li><li>Maximum: 5 minutes</li></ul> |\n| Maximum connection duration (WebSocket APIs)                    | 15 minutes                               |\n| Connection idle timeout (WebSocket APIs)                         | 5 minutes                                |\n| Size for API definition (OpenAPI document)                       | 10 MB                                    |\n| Number of APIs for PDP (Public Developer Portal)                 | 1000 API deployments                     |\n| Number of APIs per organization (free tier)                     | 5 APIs for free users                   |\n| Number of Developer Portal applications per organization (free tier) | 10 applications for free users          |\n\nThese limitations are important to consider when planning your API management activities on the free tier of Choreo. \n\nFor further details, you can refer to the documentation [here](https://wso2.com/choreo/docs/references/choreo-limitations/#api-management-limits)."
How can I use a personal access token with the Choreo CLI?,"To utilize a personal access token (PAT) with the Choreo CLI for authentication or other operations, follow these steps:\n\n1. **Generate a Personal Access Token**: First, you need to create a personal access token on the platform you are using (for example, GitLab or Bitbucket) where your repositories are hosted. This token will grant Choreo permission to perform actions on your behalf within the repository.\n\n2. **Authorize Choreo with Your PAT**:\n   - For **self-managed GitLab**: When you authorize Choreo using your PAT from GitLab, it grants permissions such as full read/write access to the API, covering all groups and projects, as well as read/write access to the repository.\n   - For **Bitbucket**: Authorizing with a Bitbucket PAT allows Choreo to perform actions such as listing branches, creating branches, creating pull requests, and triggering deployments.\n\n3. **Using the PAT in Choreo CLI**: When executing commands in the Choreo CLI, you can include the PAT in your requests to authenticate and perform operations as needed.\n\nIt's important to note that the specifics of how to include the PAT in CLI commands may vary, and it's essential to refer to the specific documentation or command reference for the CLI for detailed instructions.\n\nFor more detailed information on authorizing GitLab or Bitbucket with Choreo using a personal access token, you can refer to the following links:\n- [Authorize self-managed GitLab with Choreo](https://wso2.com/choreo/docs/develop-components/develop-components-with-git/#authorize-self-managed-gitlab-with-choreo)\n- [Authorize Bitbucket with Choreo](https://wso2.com/choreo/docs/develop-components/develop-components-with-git/#authorize-bitbucket-with-choreo)"
How do I rotate personal access tokens regularly for better security?,"To rotate personal access tokens regularly in Choreo for enhanced security, you can follow these best practices:\n\n1. **Use Short-Lived Tokens**: Set an expiry time for your access tokens to be no longer than 15 minutes (900 seconds). This minimizes the window of opportunity for unauthorized access if a token were to be compromised. By default, Choreo sets the token lifespan to 15 minutes, but you can configure this to be shorter based on your security needs.\n\n2. **Implement Refresh Tokens**: Use refresh tokens to obtain new access tokens once the current ones expire. Refresh tokens can be generated alongside access tokens and allow your application to request new access tokens without requiring user interaction. This is particularly useful in maintaining a secure and seamless user experience. Ensure that refresh tokens are treated with the same level of security as access tokens.\n\n3. **Revoke Tokens When Necessary**: If you suspect that a token has been compromised, you should revoke it immediately to prevent unauthorized access. Choreo provides the capability to revoke access tokens, which is crucial for maintaining security.\n\n4. **Use Secure Storage**: Store your tokens securely to prevent unauthorized access. This includes using secure encryption methods and ensuring that tokens are not exposed in logs or front-end code.\n\n5. **Regularly Monitor and Rotate Keys**: Regularly monitor the usage of your tokens and consider rotating your consumer keys and secrets periodically to enhance security.\n\nBy following these practices, you can rotate personal access tokens effectively and enhance the overall security of your applications in Choreo.\n\nFor more detailed information, you can refer to the documentation on [Revoking Access Tokens](https://wso2.com/choreo/docs/consuming-services/manage-application/#revoke-access-tokens) and [Grant Types](https://wso2.com/choreo/docs/consuming-services/manage-application/#grant-types)."
What are the different authentication types supported for container registries in Choreo?,"Choreo supports several authentication types for container registries, allowing you to connect securely based on your specific needs. Here are the different authentication types available:\n\n1. **Public (anonymous) access**:\n   - This option is for container registries that allow unrestricted public access. Only the registry host information is required.\n   - Example registry hosts:\n     | Vendor                           | Registry host                |\n     |----------------------------------|------------------------------|\n     | Docker Hub (public repositories) | `registry.hub.docker.com`    |\n     | Docker Hub (private repositories) | `registry.docker.com`        |\n\n2. **Basic authentication**:\n   - This method requires a username and password to authenticate to the container registry.\n\n3. **Docker config**:\n   - You can provide a Docker config in JSON format for authentication. Note that this option allows registration of only one container registry and requires the credentials to be included directly in the configuration.\n   - Sample Docker config format:\n     ```json\n     {\n       ""auths"": {\n         ""index.docker.io/v1/"": {\n           ""auth"": ""c3R...zE2""\n         }\n       }\n     }\n     ```\n\n4. **Vendor-specific authentication**:\n   - This is tailored for specific cloud providers and involves methods managed at the Kubernetes level. Choreo needs to know the registry host as the data plane will have implicit access.\n   - Options vary by vendor, including:\n     - **Azure Container Registry**: Service principal-based basic authentication.\n     - **Google Artifact Registry**: Service account-based basic authentication.\n     - **AWS ECR**: Vendor-specific authentication that doesn't require static passwords when integrated with EKS.\n     - **Docker Hub (Private)**: Basic authentication or Docker config.\n     - **GitHub Container Registry**: Basic authentication using a personal access token (PAT).\n\nThese authentication types enable you to connect your container registries securely based on the requirements of your deployment.\n\nFor more details on how to register a container registry with these authentication types, you can refer to the documentation [here](https://wso2.com/choreo/docs/develop-components/bring-your-own-image/#step-1-register-a-container-registry)."
How do I register a container registry with vendor-specific authentication on a private data plane?,"To register a container registry with vendor-specific authentication on a private data plane in Choreo, you need to follow these steps:\n\n1. **Access the Organization Settings**:\n   - In the Choreo Console, navigate to the **Organization** list in the header and select your organization.\n\n2. **Navigate to Container Registries**:\n   - Click on **Settings** in the left navigation menu to open the organization settings page.\n   - Switch to the **Credentials** tab and then click on the **Container Registries** tab.\n\n3. **Add a New Registry**:\n   - Click on **+Add Registry** to start configuring your container registry connection.\n\n4. **Specify Details**:\n   - Enter a **Registry Display Name** for easy identification.\n   - Select **Vendor-specific authentication** as the authentication type.\n\n5. **Provide Required Information**:\n   - Depending on your cloud provider and the specific container registry, you need to provide the registry host information. This is critical because the data plane will already have implicit access to the registry.\n   - Follow the specific guidelines for your cloud provider's registry:\n     - **Azure Container Registry (ACR)**: Contact Choreo support to enable infrastructure-level private access to your registry from the Azure private data plane on AKS.\n     - **Google Artifact Registry (GAR)**: Contact Choreo support to enable infrastructure-level private access to your registry from GCP private data plane on GKE.\n     - **AWS Elastic Container Registry (ECR)**: Contact Choreo support to enable a private connection between your ECR and the underlying EKS clusters on your data plane.\n\n6. **Save the Configuration**:\n   - After entering all necessary information, click **Save** to register your container registry.\n\nBy following these steps, you can successfully register a container registry with vendor-specific authentication for a private data plane in Choreo.\n\nFor more detailed instructions and guidance, you can refer to the following documentation: [Register a Container Registry](https://wso2.com/choreo/docs/develop-components/bring-your-own-image/#step-1-register-a-container-registry)."
Can I use a Dockerfile to deploy my web application?,"Yes, a Dockerfile can be used to deploy a web application in Choreo. Here are the steps and guidelines to follow:\n\n### Steps to Deploy a Web Application Using a Dockerfile in Choreo:\n\n1. **Connect to Your GitHub Repository**:\n   - Ensure that your GitHub repository contains the Dockerfile for your containerized web application.\n   - If you haven't done so, authorize Choreo to access your GitHub account and connect to the repository.\n\n2. **Create a Web Application Component**:\n   - In the Choreo Console, click on **+ Create** and select the **Service** card.\n   - Choose **Docker** as the buildpack.\n\n3. **Specify Your Dockerfile**:\n   - Provide the path to your Dockerfile in the repository. This allows you to have full control over the build process.\n   - Ensure that the Dockerfile includes a valid User ID (UID) defined under the USER instruction. It should be a numeric value between 10000-20000.\n\n4. **Set Component Details**:\n   - Enter a display name, a unique name, and a description for your service component.\n   - Ensure that the component name is unique and cannot be changed after creation.\n\n5. **Create the Component**:\n   - Click **Create** to finalize the creation of the component. This will take you to the Overview page of the component.\n\n6. **Build the Application**:\n   - In the left navigation menu, click on **Build**.\n   - In the **Builds** pane, select the latest commit and click **Build**. This triggers the build process and displays the progress in the **Build Logs** pane.\n   - Choreo performs a Dockerfile scan and a vulnerability scan on the resulting image.\n\n7. **Monitor Build Status**:\n   - Once the build is complete, you will see the build status in the **Builds** pane. If there are any critical vulnerabilities detected, the build will fail.\n\n8. **Deploy the Application**:\n   - After a successful build, you can proceed to deploy your web application as needed.\n\n### Important Notes:\n- Ensure your Dockerfile follows best practices, including specifying a non-root user for security reasons.\n- The build process may take some time, so monitor the logs for any issues during the build.\n\nFor detailed guidance, you can refer to the [Choreo documentation on developing a service with Docker](https://wso2.com/choreo/docs/develop-components/develop-services/develop-a-service-with-docker/) and the [Choreo documentation on building and deploying a single-page web application](https://wso2.com/choreo/docs/develop-components/develop-web-applications/build-and-deploy-a-single-page-web-application/#create-a-web-application)."
How do I configure health checks for a Tailscale proxy in Choreo?,"To configure health checks for a Tailscale proxy in Choreo, you can utilize one of the open ports of the TCP forwarder as a health endpoint. This setup ensures that the Tailscale proxy remains responsive and operational, which is crucial since it acts as a forward proxy.\n\nHere are the best practices for configuring health checks:\n\n1. **Select an Open Port**: Choose one of the open ports that the TCP forwarder is using to serve traffic. This port will be monitored to check the health of the service.\n2. **Set Up Health Probes**: Follow the specific steps to set up health probes in Choreo, which provide details on how to implement and configure these checks.\n\nFor more detailed instructions on setting up health checks in Choreo, you can refer to the documentation on [Set up health checks](https://wso2.com/choreo/docs/devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#best-practices).\n\nAdditionally, it's recommended to disable the scale-to-zero feature for the Tailscale proxy to maintain consistent connections with the Tailscale VPN mesh, as this could lead to service downtime if enabled.\n\nFor further information and best practices regarding Tailscale proxy configuration, please refer to the relevant documentation [here](https://wso2.com/choreo/docs/devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#best-practices)."
What is the difference between a ConfigMap and a Secret in Choreo?,"In Choreo, both ConfigMaps and Secrets are used to manage configurations and sensitive information for your components, but they serve different purposes and have distinct characteristics:\n\n### ConfigMap\n- **Visibility**: Configurations can be read and updated via the Choreo Console after creation, making them easier to manage during development and testing.\n- **Use Case**: ConfigMaps are suitable for storing non-sensitive configuration data that may need to be changed or viewed during the lifecycle of the application.\n\n### Secret\n- **Visibility**: Secrets are write-only. Once created, their content cannot be viewed or retrieved through the Choreo Console. However, you can overwrite the existing content at any time.\n- **Use Case**: Secrets are intended for storing sensitive data such as database passwords, cloud credentials, and service account information. It is recommended to use Secrets for any sensitive information to provide better security.\n\n### Summary\n- Use **Secrets** for sensitive data that should not be exposed or read directly (e.g., passwords, API keys).\n- Use **ConfigMaps** for configuration data that can be safely viewed and modified.\n\nThis distinction helps ensure that sensitive information is handled securely while allowing for flexibility in managing application configurations.\n\nFor more details, you can refer to the Choreo documentation on [Manage Configurations and Secrets](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-configurations-and-secrets/#the-difference-between-configurations-and-secrets)."
How can I automatically deploy images to Choreo with an external CI/build pipeline?,"To integrate an external CI/build pipeline with Choreo for automatic image deployment, follow these steps:\n\n1. **Build and Push the Container Image**: Start by building and pushing the container image associated with your Choreo component to your container registry.\n\n2. **Access the DevOps Section**: In the Choreo console, navigate to the left menu and click on **DevOps**, then select **External CI**.\n\n3. **Generate a Token**: In the **Manage Tokens** section, generate a token for your CI pipeline. This token is specific to the component you are deploying, so ensure it's securely stored (for example, as a GitHub secret if using GitHub Actions).\n\n4. **Trigger Automatic Deployment**: To initiate an automatic deployment to your development environment when a new image is available, you will need to send an HTTP POST request to the Choreo webhook endpoint with the updated image details. You can also use the provided webhook snippets for this purpose.\n\n**Additional Notes**:\n- Choreo does not automatically detect new images or tags in the container registry; hence, you must manually trigger deployments via your CI pipeline.\n- This integration is particularly useful if you have a pre-existing CI setup or if you're looking to create a dedicated pipeline for image creation and deployment.\n\nFor more details, you can refer to the documentation here: [Auto-deploy images in Choreo with an external CI/build pipeline](https://wso2.com/choreo/docs/develop-components/bring-your-own-image/#auto-deploy-images-in-choreo-with-an-external-cibuild-pipeline)."
What is the maximum size allowed for a request payload in Choreo?,"In Choreo, the maximum size allowed for a request payload depends on the context in which you are operating:\n\n1. **For API Management**: The maximum request payload size is **50 MB**. This limit applies when working with APIs in Choreo.\n\n2. **For Web Applications**: The request size limit is **256 KB**, which includes headers, cookies, and payloads.\n\nThese limits are critical to ensure optimal performance and resource management within Choreo.\n\nFor more detailed information, you can refer to the following documentation:\n- [Choreo Limitations - API management limits](https://wso2.com/choreo/docs/references/choreo-limitations/#api-management-limits)\n- [Choreo Limitations - Choreo cloud data plane limits](https://wso2.com/choreo/docs/references/choreo-limitations/#choreo-cloud-data-plane-limits)"
How can I upgrade my Choreo service plan?,"To upgrade your Choreo service plan, you need to contact Choreo support directly via email at [choreo-support@wso2.com](mailto:choreo-support@wso2.com). The specific options available for service plan upgrades are not detailed in the documentation, but the support team will be able to provide you with the necessary information regarding your options.\n\n### Steps to Upgrade Your Service Plan:\n1. **Contact Choreo Support**: Send an email to Choreo support at the mentioned email address.\n2. **Provide Necessary Information**: Include details about your current service plan and any specific requirements or questions you have regarding the upgrade.\n\n### Additional Information:\n- Choreo bills platform services based on your existing subscription, and costs depend on the chosen service plan and usage of resources. \n- There may be different service plans available, but you'll need to consult with support for specifics.\n\nFor more details about billing and service plans, you can refer to the documentation [here](https://wso2.com/choreo/docs/references/choreo-platform-services-billing-and-upgrades/#upgrade-a-service-plan)."
What is the difference between internal and external APIs in Choreo?,"In Choreo, the differences between internal and external APIs primarily concern their usage, functionality, and access:\n\n### Internal APIs\n- **Usage**: Internal APIs are designed for use within an organization. They facilitate communication between different services and applications that are part of the same organizational structure.\n- **Functionality**: These APIs allow internal services to interact securely without exposing sensitive data or functionalities to the outside world.\n- **Access**: Access is restricted to users and applications within the organization. You can set the network visibility of an API endpoint to ""Organization,"" ensuring that only components within the same organization can access it.\n\n### External APIs\n- **Usage**: External APIs are intended for public use, allowing external consumers to interact with a service. They are exposed to the outside world and can be used by applications or users outside the organization.\n- **Functionality**: These APIs provide functionalities that can be consumed by third-party applications. They often include additional features such as API management, throttling, and analytics.\n- **Access**: Access is open to any client, regardless of their organization. When exposing an endpoint as an external API, you set the network visibility to ""Public."" This allows broader access while ensuring proper security measures, such as authentication and authorization, are in place.\n\n### API Management Features\nBoth internal and external APIs can leverage Choreo's API management features, which include:\n- Full lifecycle management of APIs\n- API throttling\n- Secure APIs with industry-standard authorization flows\n- API analytics and monitoring\n\nTo expose endpoints as managed APIs in Choreo, you must configure their network visibility appropriately, allowing them to be accessed either internally or externally.\n\nFor more detailed information, you can refer to the relevant documentation: \n- [Expose endpoints as managed APIs](https://wso2.com/choreo/docs/develop-components/configure-endpoints-body/#expose-endpoints-as-managed-apis)\n- [Configure endpoints in Choreo](https://wso2.com/choreo/docs/develop-components/configure-endpoints-body/)"
How can I add a description to my APIs?,"To add or update descriptions for APIs in Choreo, you can utilize the documentation feature provided in the Choreo Console. Here’s how you can do it:\n\n### Adding Documentation for an API\n1. In the **Component Listing** pane of the Choreo Console, click on the component (API) for which you want to add or update the description.\n2. In the left navigation menu, click **Manage** and then select **Documents**.\n3. You can add a new document by specifying a title and providing the content in markdown syntax. Make sure to include the necessary details such as a brief description of the API, how to invoke it, and any limitations or restrictions.\n4. Click **Add** to save the new document.\n\n### Updating Existing Documentation\n- If you want to update an existing document, you can simply edit the content of that document in the same **Documents** section and save your changes.\n\n### Purpose of Documentation\nAdding proper documentation helps API consumers understand your API better, including how to use it effectively and any specific constraints they should be aware of.\n\nFor further details, you can refer to the documentation on adding documents to an API: [Add documents to an API](https://wso2.com/choreo/docs/api-management/documents/#add-documents-to-an-api)."
What are the supported source control software in Choreo?,"Choreo supports the following source control software for version control and integrations:\n\n1. **GitHub**\n2. **Bitbucket** (both Bitbucket Server and Bitbucket Cloud)\n3. **GitLab**\n\nYou can connect an existing repository from any of these platforms or start with an empty repository and commit your source code later. This integration allows you to automate tasks and optimize workflows within the Choreo platform.\n\nFor more detailed information on connecting a Git repository to Choreo, you can refer to the documentation [here](https://wso2.com/choreo/docs/develop-components/develop-components-with-git/)."
How do I manage Ballerina configurables in Choreo?,"To manage Ballerina configurables in Choreo, you can follow these steps during the deployment or promotion of your Ballerina application:\n\n1. **Access the Deploy Page**: Navigate to the **Deploy** page in the Choreo console.\n\n2. **Configure & Deploy**: In the **Set Up** card, click on **Configure & Deploy**.\n\n3. **Specify Configurable Variables**: In the **Configurations** pane, you will see fields for configurable variables. Here, you can input values for these variables, which are defined in your Ballerina project.\n\n   | **Field**     | **Description**                                           |\n   | ------------- | --------------------------------------------------------- |\n   | **apiKey**    | The API key needed for your service                      |\n   | **latitude**  | Latitude for location-based services                      |\n   | **longitude** | Longitude for location-based services                     |\n   | **email**     | Email address for notifications                           |\n\n4. **Mark as Secret**: If you want to protect any of these variables (for example, the **apiKey**), you can mark it as a secret by clicking the lock icon next to the variable. This conceals the input value. If you need to update this secret later, you can click **Update Secret Content** to provide a new value.\n\n5. **Deploy**: After configuring the necessary values, click on **Deploy** to finalize the deployment of your application with the specified configurables.\n\nThese steps allow you to effectively manage Ballerina configurables within the Choreo console. For additional details, you can refer to the following documentation link: [Manage Ballerina Configurables](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-configurations-and-secrets/#manage-ballerina-configurables)."
Can I customize the look and feel of the Choreo Developer Portal?,"Yes, users can customize the look and feel of the Choreo Developer Portal by changing the theme to match their brand. This customization enhances the developer experience for users consuming APIs. Here's how you can do it:\n\n### Steps to Customize the Developer Portal Theme\n\n1. **Admin Access**: Ensure that you are an admin user of your organization as only admin users can customize the Developer Portal theme.\n\n2. **Navigate to Settings**:\n   - In the Choreo Console, click on **Settings** in the left pane.\n\n3. **Access Organization Settings**:\n   - Click on the **Organization** list in the header to open the organization level settings page.\n\n4. **Select Devportal Theme**:\n   - Go to the **API Management** tab and click on **Devportal Theme**.\n\n5. **Customize Theme Elements**:\n   - You can customize various elements such as:\n     - **Home Page Title**: Expand the **Home Page** section and change the title in the **Title** field.\n     - **Color Theme**: Expand the **Color Palette** section and modify colors as required (e.g., background color, button colors).\n\n6. **Preview Changes**:\n   - Click **Preview** to see how the Developer Portal will look with the changes you made.\n\n7. **Save and Go Live**:\n   - After previewing, click **Save** to save your changes as a draft theme.\n   - To apply the changes, toggle the **Go Live** switch, and confirm by clicking **Enable**.\n\n8. **View in Developer Portal**:\n   - Finally, sign in to the Choreo Developer Portal at [https://devportal.choreo.dev](https://devportal.choreo.dev) to see the updated appearance.\n\n### Resetting the Theme\nIf you wish to reset the Developer Portal theme to the default, you can follow these steps:\n1. Go to the **Devportal Theme** settings.\n2. Click on **Reset to Default**.\n\n### Important Notes\n- Changes made to the theme cannot be undone, but you can always reset it to the default theme.\n- Customizing the theme provides a way to align the Developer Portal with your organization's branding.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/customize-the-developer-portal/)."
How do I add a custom domain to my Developer Portal?,"To add a custom domain to the Developer Portal in Choreo, you need to follow these steps:\n\n### Prerequisites\n- Ensure you have organization administrator privileges.\n- Create an organization in Choreo, if not already done.\n\n### Steps to Add a Custom Domain\n1. **Access the Organization Settings**:\n   - In the Choreo Console, go to the **Organization** list in the header.\n   - Click on **Settings** in the left navigation menu to open the organization-level settings page.\n\n2. **Navigate to URL Settings**:\n   - Click on the **URL Settings** tab.\n   - Then select the **Active Domains** tab.\n\n3. **Add a Custom Domain**:\n   - Click on **+ Add Domains**.\n   - In the **Add a Custom Domain** pane, you will need to enter your domain name and select the entity type. For the Developer Portal, the entity type will be **Developer Portal**. Note that the environment is not applicable in this case.\n\n4. **Create a DNS Record**:\n   - After entering your domain name, a CNAME target value will be generated. You need to create a DNS record with your DNS provider that associates your domain name to this CNAME target value.\n\n5. **Verify the CNAME Mapping**:\n   - Once the DNS record is created, return to the Choreo Console and click **Verify**. If the CNAME mapping is correct, the verification will complete successfully.\n\n6. **TLS Certificate Configuration**:\n   - After verification, click **Next**.\n   - Choose a TLS certificate provider. You can either import your own TLS certificates or click **Let's Encrypt** to allow Choreo to generate and manage the certificates for you.\n\n7. **Finalizing the Custom Domain**:\n   - Once you have selected or imported your TLS certificates, click **Add** to save the custom domain.\n\nAfter completing these steps, your custom domain will be available for the Developer Portal. You can access your organization's Developer Portal via the added domain immediately.\n\nFor detailed instructions, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-an-organization)."
How can I configure a private data plane in Choreo?,"To configure a private data plane (PDP) in Choreo, you'll need to follow several steps that involve setting up the necessary infrastructure and components. Below is a comprehensive guide on how to achieve this:\n\n### Prerequisites\n1. **Infrastructure Setup**:\n   - Ensure you have an upstream-compatible Kubernetes cluster.\n   - Set up a container registry and a key vault (secret store).\n   - Implement a logging service or log storage.\n\n2. **Cloud Providers**: \n   - Choreo private data planes can be deployed on major cloud providers such as Azure, AWS, and GCP, as well as on-premises infrastructure.\n\n### Steps for Configuration\n\n1. **Helm Installation**:\n   - You will need to execute a Helm installation on your Kubernetes infrastructure. During this installation, the following software components will be installed:\n     - Cilium CNI and service mesh.\n     - Choreo API Gateways and related components.\n     - Choreo PDP agent.\n     - Observability and logging APIs, along with observability agents.\n     - Flux controller for automatic updates.\n\n2. **Connectivity with the Control Plane**:\n   - The private data plane must communicate with the Choreo control plane. This communication is outbound from the private data plane. Ensure that your network allows outbound traffic to the public IP range of the Choreo control plane if outbound traffic is restricted.\n\n3. **Security Configuration**:\n   - Implement a firewall to protect incoming traffic and ensure all traffic undergoes authentication and authorization via the API Gateway.\n   - Use end-to-end encryption for network traffic through Cilium transparent encryption.\n\n### Management Models\nChoreo supports various management models for private data planes:\n- **WSO2 Fully Managed**: Infrastructure and PDP managed by WSO2 (available on Azure, AWS, and GCP).\n- **Customer Self-Managed**: WSO2 provides an installation script and updates, while the customer manages the infrastructure.\n\nEach model has specific responsibilities in terms of setup and management, which can be explored further based on your needs.\n\n### Observability and Compliance\n- Ensure that logs and observability data are stored within the data plane for enhanced security and compliance with regulatory standards.\n\n### Additional Notes\n- For security levels and management model details, refer to the [Private Data Plane Management Models](https://wso2.com/choreo/docs/references/private-data-plane-management-models/) documentation.\n\n### Visual Overview\nAdditionally, you can refer to the architecture diagrams for a clearer understanding of the private data plane's structure and observability features:\n- ![Private Data Plane Architecture](https://wso2.com/choreo/docs/assets/img/choreo-concepts/private-data-plane-architecture.png)\n- ![Observability Architecture](https://wso2.com/choreo/docs/assets/img/choreo-concepts/observability-architecture.png)\n\nFor further information, you can read more about private data planes in the [Choreo documentation](https://wso2.com/choreo/docs/choreo-concepts/data-planes/#private-data-planes)."
What are the requirements for an Azure AKS cluster used for a private data plane in Choreo?,"To use an Azure AKS cluster as a private data plane in Choreo, there are several key requirements you must meet:\n\n1. **Minimum Workload Nodes**: It is recommended to have a minimum of two (2) workload nodes in your AKS cluster to ensure high availability. Utilizing at least three workload nodes is advisable for 99.99% high availability and reliable failover during node failures or upgrades.\n\n2. **Kubernetes Cluster**: The AKS cluster must be upstream-compatible with Kubernetes, as it serves as the foundation for the private data plane.\n\n3. **Container Registry**: You need a container registry for storing and managing your container images.\n\n4. **Key Vault**: A key vault or secret store is required to manage sensitive information securely.\n\n5. **Logging Service**: An observability and logging service should be in place for monitoring and logging activities within the private data plane.\n\n6. **Helm Installation**: The setup of the Choreo private data plane involves using a Helm installation on the Kubernetes infrastructure. During this installation, several software components will be deployed, including Cilium CNI, Choreo API Gateways, and observability APIs.\n\n7. **Outbound Connectivity**: The private data plane requires outbound communication with the Choreo control plane for managing various activities. Ensure that your network allows outbound traffic to the public IP range of the Choreo control plane.\n\nFor a more detailed understanding of these requirements, you can refer to the relevant documentation [here](https://wso2.com/choreo/docs/choreo-concepts/data-planes/#private-data-planes)."
How do I set up role-based access control for enterprise login in Choreo?,"To set up role-based access control (RBAC) for enterprise login in Choreo, you'll need to follow a series of steps to ensure proper configuration. Here’s a comprehensive guide:\n\n### Prerequisites\nBefore you begin, make sure you have:\n1. Configured enterprise login for your organization.\n2. Ensured that your enterprise identity provider (IdP) includes group/role attributes in the tokens sent to Asgardeo.\n3. Administrator privileges in Choreo.\n\n### Step 1: Configure Asgardeo\n1. Sign in to [Asgardeo](https://asgardeo.io/).\n2. Configure your IdP as an external IdP in Asgardeo, selecting either OpenID Connect or SAML as the protocol.\n   - For OpenID Connect, configure the requested scopes to retrieve relevant group/role details.\n3. Follow these steps in the Asgardeo Console:\n   - Click on **Applications** and select the application named **WSO2_LOGIN_FOR_CHOREO_CONSOLE**.\n   - Go to the **Sign-in Method** tab and configure the IdP based on the selected protocol:\n     - For OpenID Connect, follow [Enable the OIDC IdP for login](https://wso2.com/asgardeo/docs/guides/authentication/enterprise-login/add-oidc-idp-login/#enable-the-oidc-idp-for-login).\n     - For SAML, follow [Enable the SAML IdP for login](https://wso2.com/asgardeo/docs/guides/authentication/enterprise-login/add-saml-idp-login/#enable-the-saml-idp-for-login).\n   - Go to the **User Attributes** tab, select the **Groups** attribute, check **Requested**, and click **Update**.\n4. Add user attributes as OpenID Connect scopes:\n   - Click on **Scopes**, edit **OpenID**, add the **Groups** attribute, and save changes.\n\n### Step 2: Map Choreo Groups to Enterprise IdP Groups via the Choreo Console\n1. In the Choreo Console, go to the top navigation menu and click **Organization**.\n2. Click on **Settings** in the left navigation menu, then go to the **Access Control** tab.\n3. Click **Groups** and select **Manage IdP Group Mapping**.\n   - Click the edit icon next to the Choreo group you want to map.\n   - Enter the exact IdP group name and click **Save**.\n\n### Important Note\nAny changes made to the IdP group mapping will take effect from the next login session.\n\nBy following these steps, you will successfully configure role-based access control for enterprise login in Choreo. This setup allows users from the external IdP to have the appropriate permissions based on their roles.\n\nFor more detailed information, you can refer to the official documentation [here](https://wso2.com/choreo/docs/administer/configure-enterprise-login/#configure-role-based-access-control-for-enterprise-login)."
What are the prerequisites for configuring self-sign-up in the Developer Portal?,"To configure self-sign-up in the Developer Portal of Choreo, there are a couple of prerequisites that you need to fulfill:\n\n1. **Sign in to the Choreo Console**: You must have access to the Choreo Console using your Google, GitHub, or Microsoft account.\n\n2. **Create an Organization**: If you are a new user, you need to create an organization with a unique name. For example, you can use a name like ""Stark Industries"".\n\nThese prerequisites ensure that you have the necessary access and organizational structure in place before you can proceed with the configuration of self-sign-up.\n\nFor further details on configuring self-sign-up, you can refer to the documentation here: [Configure Self-Sign-Up](https://wso2.com/choreo/docs/administer/configure-self-sign-up/#prerequisites)."
How can I control egress traffic for my organization?,"In Choreo, you can control egress traffic for your organization by configuring egress policies at both the organization and project levels. Here’s how to do it:\n\n### Organization-Level Egress Control\n\nTo set up an egress policy at the organizational level:\n\n1. **Select Your Organization**: In the Choreo Console header, go to the **Organization** list and select your organization.\n2. **Access Settings**: Click on **Settings** in the left navigation menu to open the organization-level settings page.\n3. **Egress Control Tab**: Click on the **Egress Control** tab.\n4. **Create Egress Policy**: Click **+ Create** to add a new egress policy.\n5. **Choose Egress Control Type**: Select the type of egress control:\n   - **Allow All**: This setting allows all egress traffic by default, but you can block traffic to specified IP ranges.\n   - **Deny All**: This blocks all egress traffic by default, with the option to allow traffic to specific IP ranges or domains.\n\n   **Important Notes**:\n   - After creating a rule, you cannot change the egress control type without deleting existing rules.\n   - Ensure that your rules do not inadvertently block necessary traffic for your applications.\n   - Policies apply across all environments in your organization and do not affect API proxies.\n\n![Configure an organization-level egress policy](https://wso2.com/choreo/docs/assets/img/administer/configure-an-organization-level-egress-policy.png)\n\n### Project-Level Egress Control\n\nTo override the organization-level egress policy at the project level:\n\n1. **Select Your Project**: In the Choreo Console header, go to the **Project** list and select your project.\n2. **Access Settings**: Click on **Settings** in the left navigation menu to open the project-level settings page.\n3. **Egress Control Tab**: Click on the **Egress Control** tab, where you will see that the organization-level policy is enforced by default.\n4. **Add Project-Level Rules**: You can add specific rules to restrict egress traffic further:\n   - If the organization level is set to **Allow All**, you can add project-level deny rules.\n   - If it is set to **Deny All**, you can remove inherited allow rules.\n\n![Add project-level rules](https://wso2.com/choreo/docs/assets/img/administer/add-project-level-rules.png)\n\nBy following these steps, you can effectively manage egress traffic for your organization in Choreo.\n\nFor more detailed information, you can refer to the official documentation here: [Control Egress Traffic for Your Organization](https://wso2.com/choreo/docs/administer/control-egress-traffic-for-your-organization/)."
How do I create an organization-level subscription plan?,"To create an organization-level subscription plan in Choreo, follow these steps:\n\n1. In the Choreo Console header, go to the **Organization** list and select your organization.\n2. In the left navigation menu, click **Settings**. This opens the organization-level settings page.\n3. Click the **API Management** tab and then click **Subscription Plans**.\n4. Click **+ Add Subscription Plan**.\n5. In the **Create Subscription Plan** pane, enter the appropriate values for each field:\n   - **Name**: Specify a unique name for the subscription plan. Note that this name is editable only during the creation process.\n   - **Stop on Quota Reach**: This checkbox is selected by default. When selected, requests will return an HTTP 429 response if the request count exceeds the limit.\n   - **Burst Control**: This option helps manage sudden request spikes. Select this checkbox if the **Request Count Time Unit** is set to **Hour** or **Day**.\n   - **Approval Required**: If selected, subscription requests for this plan will require administrator or API publisher approval to activate.\n   \n   ![Create subscription plan](https://wso2.com/choreo/docs/assets/img/administer/create-subscription-plan.png)\n\n6. Click **Create**. This will create the subscription plan and list it under **Subscription Plans**.\n\nAfter creating subscription plans, users with the API publisher role can assign these plans to APIs, allowing API consumers to select the appropriate plan during the subscription process.\n\nFor more detailed information, you can refer to the documentation: [Create API Subscription Plans](https://wso2.com/choreo/docs/administer/create-api-subscription-plans/)."
How can I customize the Developer Portal theme?,"To customize the theme of the Developer Portal in Choreo, follow these steps:\n\n1. **Admin Privileges**: Ensure you are an admin user of your organization, as theme customization requires these privileges.\n\n2. **Access Settings**:\n   - In the Choreo Console, click on **Settings** from the left pane.\n   - Click on the **Organization** list in the header to open the organization-level settings page.\n\n3. **Navigate to Devportal Theme**:\n   - In the **API Management** tab, select **Devportal Theme**.\n\n4. **Customize the Theme**:\n   - You can customize various aspects of the Developer Portal, such as:\n     - **Home Page**: Change the title by expanding the **Home Page** section and editing the **Title** field.\n     - **Color Theme**: Expand the **Color Palette** section to modify the colors. For example, you may want to change the background color and the primary color for buttons.\n\n5. **Preview Changes**: Click **Preview** to see how the Developer Portal will look with your changes.\n\n6. **Save Changes**:\n   - After making the desired changes, click **Save** to save them as a draft theme.\n   - To apply the changes, toggle the **Go Live** switch. Confirm by clicking **Enable** in the prompt that appears.\n\n7. **View Changes**: Sign in to the Choreo Developer Portal to see your changes reflected on the Home page.\n\n### Important Notes:\n- Any changes made cannot be undone. However, you can reset to the default theme if necessary.\n- For further details, you can refer to the documentation on [Customizing the Developer Portal](https://wso2.com/choreo/docs/administer/customize-the-developer-portal/)."
How do I manage members of an organization?,"To manage members of an organization in Choreo, including adding, removing, or modifying member roles, you can follow these guidelines:\n\n### Adding Members\n1. **Navigate to Organization Settings**: In the Choreo Console, go to the **Organization** section.\n2. **Invite Members**: Use the invite feature to add new members to your organization. You will need to enter the email addresses of the users you wish to invite.\n3. **Assign Roles**: When inviting members, be sure to assign them roles that define their permissions within the organization. You can choose from predefined roles such as Admin, API Publisher, API Subscriber, etc.\n\n### Removing Members\n1. **Access the Members List**: Navigate to the list of members in your organization.\n2. **Select Member to Remove**: Identify the member you wish to remove from the organization.\n3. **Remove Member**: Use the appropriate option to remove the member from the organization.\n\n### Modifying Member Roles\n1. **Access Member Details**: In the members list, find the member whose role you wish to modify.\n2. **Edit Role**: Click on the option to edit the member's role.\n3. **Assign New Role**: Choose a new role for the member from the available options and save your changes.\n\n### Managing User Permissions\nChoreo manages user permissions through groups and roles. Users can be organized into groups that inherit permissions based on their assigned roles. When creating or managing groups, ensure that you assign the corresponding roles to facilitate proper access control.\n\nFor a detailed explanation on managing members and roles in your organization, you can refer to the following documentation: [Manage Members of an Organization](https://wso2.com/choreo/docs/administer/manage-members-of-an-organization/)."
How do I configure Azure Active Directory as an external Identity Provider?,"To configure Azure Active Directory (Azure AD) as an external Identity Provider (IdP) in Choreo, follow these steps:\n\n### Prerequisites\nBefore you begin, ensure you have the following:\n- An Azure Active Directory account. If you don't have one, you can set it up [here](https://azure.microsoft.com/en-gb/).\n- Administrator rights to your Choreo organization, which are necessary for configuring the Azure AD account.\n\n### Steps to Configure Azure AD as an External IdP\n1. **Access Settings**: In the Choreo Console, click on **Settings** in the left navigation menu.\n2. **Navigate to Organization Settings**: Click on the **Organization** list in the header to open the organization level settings page.\n3. **Identity Providers Section**: Go to the **Application Security** tab, click on **Identity Providers**, and then click **+ Identity Provider**.\n4. **Select Azure AD**: Choose **Microsoft Entra ID (Azure AD)** as the Identity Provider.\n5. **Enter IdP Details**: Provide a name and description for the IdP.\n6. **Obtain Well-Known URL**: To get the `Well-Known URL` of your Azure AD instance, go to your Azure account, under **Azure Active Directory**, navigate to **App registrations**, and then **Endpoints**. Copy the URI under `OpenID Connect metadata document`. \n   - Note: If you are using the v1 access token, omit the v2.0 path segment from the URL. For example, convert `https://login.microsoftonline.com/<tenant-id>/v2.0/.well-known/openid-configuration` to `https://login.microsoftonline.com/<tenant-id>/.well-known/openid-configuration`.\n7. **Environment Settings**: Leave the **Apply to all environments** checkbox selected, or select specific environments if you want to restrict the IdP usage.\n8. **Review and Proceed**: Review the endpoints and click **Next** to complete the configuration.\n\nThese steps will help you successfully configure Azure AD as an external identity provider in your Choreo environment.\n\nFor more detailed instructions, you can refer to the full documentation [here](https://wso2.com/choreo/docs/administer/configure-an-external-idp/configure-azure-ad-as-an-external-idp/)."
How can I enable rate limiting for an API?,"To enable rate limiting for an API in Choreo, follow these steps:\n\n1. In the **Component Listing** pane, click on the component for which you want to apply rate limiting.\n2. In the left navigation menu, click **Deploy**.\n3. Go to the required environment card and click the view icon corresponding to the endpoint for which you want to apply rate limiting.\n   - **Note**: If you are applying rate limiting for an API Proxy component, click the setting icon corresponding to **API Configuration** instead.\n4. In the **Endpoint Details** pane that opens, click the settings icon.\n5. In the **Manage** section, click **Rate Limiting** to expand it.\n6. Select a **Rate Limiting Level** based on your requirements and click **Apply**.\n\nYou can apply rate-limiting settings separately for each environment, allowing for flexibility based on different deployment scenarios.\n\nFor more detailed information on API rate limiting, you can refer to the official documentation [here](https://wso2.com/choreo/docs/api-management/api-rate-limiting/#enable-rate-limiting-for-an-api)."
How do I change API visibility?,"To change the visibility settings of an API in Choreo, follow these steps:\n\n1. In the **Component Listing** pane of the Choreo Console, click on the REST API (Service) for which you want to control the visibility.\n2. In the left navigation menu, click **Manage** and then select **API Info**.\n3. On the **API Info** page, navigate to the **Developer Portal** tab.\n4. Under **General Details**, find the **Visibility** list and select the desired visibility option. The available options are:\n   - **Public**: The API is visible to everyone in the Developer Portal.\n   - **Private**: The API is visible only to users who are signed in to the Developer Portal.\n   - **Restricted**: The API is visible only to users with specific roles that you can define.\n\n5. If you select **Restricted**, you will be able to specify which roles can access the API. You can choose from existing roles or create a new one by clicking **+ Create New Role**, providing the role name and description, assigning permissions, and then saving it.\n\n6. After making your selection, click **Save** to apply the changes.\n\nBy managing the API's visibility settings, you can control access to your API based on your requirements, ensuring that only the intended users or roles can view or interact with it.\n\nFor more details, you can refer to the documentation [here](https://wso2.com/choreo/docs/api-management/control-api-visibility/#change-api-visibility)."
How can I add documents to an API?,"To add documentation to an API in Choreo, you can follow these steps:\n\n1. In the **Component Listing** pane, click on the API component for which you want to add documents.\n2. In the left navigation menu, click on **Manage**, and then select **Documents**.\n3. Specify a title for the document and provide the content using markdown syntax.\n4. Click **Add** to save the document.\n\nYou can add one or more documents depending on the information you need to provide. Additionally, you have the option to edit existing documents and delete them if necessary.\n\nThis documentation helps API consumers understand details like how to invoke the API, any limitations or restrictions, and more, which improves the overall visibility and usability of your API.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/api-management/documents/#add-documents-to-an-api)."
What are the different API lifecycle states in Choreo?,"In Choreo, the API lifecycle consists of six distinct states that an API progresses through, which are crucial for managing the API's availability and usability. Here are the different API lifecycle states:\n\n1. **CREATED**: \n   - The API is created but is not ready for consumption.\n   - The API is not visible to subscribers in the Developer Portal.\n\n2. **PRE-RELEASED**: \n   - A prototype is created for early promotion and consumer testing.\n   - The API is published to the Developer Portal as a pre-release.\n\n3. **PUBLISHED**: \n   - The API is ready for subscribers to view and subscribe to via the Developer Portal.\n   - The API is visible in the Developer Portal and is available for subscription.\n\n4. **BLOCKED**: \n   - Access to the API is temporarily blocked.\n   - Runtime calls are blocked, and the API is not visible in the Developer Portal.\n\n5. **DEPRECATED**: \n   - The old version of an API is moved to this state when a newer version of the API is published.\n   - The API is available to existing subscribers, while new subscriptions are disabled.\n\n6. **RETIRED**: \n   - The API is no longer in use when it is in this state.\n   - The API is unpublished and deleted from the Developer Portal.\n\nBy understanding these states, API managers can optimize the development process and ensure that subscribers have access to the latest and most reliable APIs.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/api-management/lifecycle-management/#api-lifecycle-states)."
How do I rename the API display name?,"To update or change the display name of an API in the Choreo Console, follow these steps:\n\n1. In the **Component Listing** pane, click on the component for which you want to rename the API display name. This will open the **Overview** page of the component.\n2. In the left navigation menu, click on **Manage** and then select **API Info**.\n3. On the **API Info** page that opens, click the **Developer Portal** tab.\n4. Under **General Details**, find the **Name** field and specify the new display name for your API.\n5. Click **Save** to apply the changes.\n\nOnce you save the new display name, it will be immediately updated and displayed in the Choreo Developer Portal.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/api-management/rename-api-display-name/)."
How can I apply advanced settings on mediation policies?,"To apply advanced settings on mediation policies for a proxy component in Choreo, follow these steps based on the deployment status of the component:\n\n### Steps to Configure Advanced Settings\n\n1. **Access the Proxy Component**:\n   - In the **Component Listing** pane, click on the REST API Proxy component for which you want to configure advanced settings.\n\n2. **Navigate to Deployment Options**:\n   - In the left navigation menu, click on **Deploy**.\n\n3. **Determine Deployment Status**:\n   - **If the proxy component is not deployed**: \n     - Go to the **Set Up** card and click **Configure & Deploy**.\n   - **If the proxy component is already deployed**: \n     - Go to the corresponding environment card based on where you want to apply the advanced settings, and then click the **Environment Variables** icon.\n\n4. **Configure Advanced Settings**:\n   - In the **Configurations** pane that opens, expand the **Defaultable Configurables** section.\n   - In the **Advanced Settings** field, configure the necessary settings. Here are some of the advanced settings you can apply:\n\n   | **Setting**                     | **Purpose**    | **How to apply**  | **Impact**   |\n   |---------------------------------|----------------|-------------------|--------------|\n   | **HTTP version**                | Change the HTTP version (default is 1.1) | Specify the required HTTP version in the **Advanced Settings** field. | The application will use the specified HTTP version for backend interactions.  |\n   | **Hostname verification**       | Control hostname verification during mTLS | Set the `verifyHostname` parameter to `false`. | Skips hostname verification. |\n   | **Minimum evictable idle time** | Sets idle time for outgoing connections | Specify the idle time in seconds in the **Advanced Settings** field. | Closes idle connections after the defined period. |\n   | **Detailed access log**         | Enable or disable detailed logs for the mediation application | Set the `detailedAccessLog` parameter in the **Advanced Settings** field. | Logs related to the mediation application will not be generated if disabled. |\n\n5. **Save Changes**:\n   - Click **Save & Deploy** to apply the configurations.\n\n### Additional Information\nFor more details on attaching mediation policies to a proxy component, you can refer to the [Attach and Manage Policies](https://wso2.com/choreo/docs/api-policies/attach-and-manage-policies) documentation. For a comprehensive understanding of advanced settings, you may check the [Apply Advanced Settings on Mediation Policies](https://wso2.com/choreo/docs/api-management/api-policies/apply-advanced-settings-on-mediation-policies/) documentation.\n\nThis process allows you to customize how your service interacts with backend systems, ensuring optimal performance and security."
How do I attach and manage API policies?,"To attach and manage API policies in Choreo, follow these steps:\n\n### Attaching a Policy\n\n1. **Select Your Component**: In the **Component Listing** pane, click on the REST API Proxy component for which you want to attach a policy.\n2. **Navigate to Policies**: In the left navigation menu, click on **Develop**, then click on **Policies**.\n3. **Expand Resource**: From the list of resources, expand the resource to which you want to attach the policy.\n4. **Attach Policy**: Click **Attach Mediation Policy** in the respective flow (Request, Response, or Error) where you want to attach a policy.\n5. **Choose Policy**: In the **Policy List** pane that opens, click on a required policy to view its details.\n6. **Configure Parameters**: If the attached policy requires parameter configuration, enter the appropriate values in the policy pane. You can make a parameter configurable by using the `${<variableName>}` format.\n   ![Configure parameters](https://wso2.com/choreo/docs/assets/img/api-management/api-policies/configure-parameters.png)\n7. **Add Policy**: To attach the policy, click **Add**.\n\n### Deploying the API\n\nAfter attaching an API Policy, you need to deploy the API for the policy to take effect:\n\n1. **Deploy Configuration**: In the left navigation menu, click **Deploy**, then click **Configure & Deploy**. This opens the **Configure & Deploy** pane.\n2. **Specify Configurable Values**: If you have any configurable variables that require values, specify the appropriate values.\n   ![Save and deploy values](https://wso2.com/choreo/docs/assets/img/api-management/api-policies/save-and-deploy.png)\n3. **Final Deployment**: Click **Save & Deploy**.\n\n### Managing Policies\n\n- You can attach multiple policies to a single API proxy component.\n- If necessary, you can rearrange or swap the policies you attach.\n- The deployment process involves creating a mediation application that is then built and deployed.\n\n### Behavior Modifications\n\nWhen a mediation policy is attached, it modifies the behavior of API invocations:\n- **Request Flow**: Policies execute on the request before it reaches the backend.\n- **Response Flow**: Policies execute on the response from the backend before it reaches the client.\n- **Error Flow**: Policies execute in case of errors, modifying the error response sent to the client.\n\nFor a detailed guide on attaching and managing API policies, refer to the documentation here: [Attach and manage mediation policies](https://wso2.com/choreo/docs/api-management/api-policies/#attach-and-manage-mediation-policies)."
How do I assign subscription plans to APIs?,"To assign subscription plans to APIs in Choreo, follow these steps:\n\n1. In the **Component Listing** pane, click on the API component for which you want to assign subscription plans.\n2. In the left navigation menu, click **Manage** and then select **Subscription Plans**. This will display the subscription plans available for that API component.\n3. Enable the **Subscription Plan Status** toggle for the subscription plans you wish to assign to the API. \n\n   ![Enable toggle](https://wso2.com/choreo/docs/assets/img/api-management/manage-api-traffic/enable-toggle.png)\n\n4. Click **Save**.\n\nOnce the subscription plans are assigned to the API, consumers will be able to select the appropriate plan that suits their needs during the subscription process.\n\nFor additional information on how to create subscription plans, you can refer to the [Create API Subscription Plans](https://wso2.com/choreo/docs/administer/create-api-subscription-plans) documentation. \n\nFor details on how consumers can subscribe to an API with a subscription plan, visit [Subscribe to an API with a Subscription Plan](https://wso2.com/choreo/docs/api-management/manage-api-traffic/subscribe-to-an-api-with-a-subscription-plan/)."
How can I subscribe to an API with a specific subscription plan?,\nI currently do not have information about subscription plans for APIs in Choreo. Would you like me to help you with something else?
How do I configure mutual TLS between components in Choreo?,"To configure mutual TLS (mTLS) between components in Choreo, you need to follow a series of steps to generate the necessary certificates and set up the communication. Here's a structured overview of the process:\n\n### 1. Understanding Mutual TLS\nMutual TLS is a security protocol that enables both the client and server to authenticate each other using digital certificates. This ensures privacy, integrity, and authentication of the data exchanged between them.\n\n### 2. Generate Certificates\nYou will need to create the following certificates:\n\n- **Root Certificate**: This is a trusted certificate used to verify other certificates during the mTLS handshake. You can generate a root certificate using tools like OpenSSL.\n  \n- **Client Certificate**: This certificate identifies the client. Ensure that the common name (CN) in the certificate correctly represents the client's identity, and it must be signed by the root certificate.\n  \n- **Server Certificate**: This certificate is used by clients to verify the server's identity. Similar to the client certificate, it must also be signed by the root certificate. When generating the server certificate, specify the server's hostname in the Subject Alternative Name (SAN). You can find this hostname on the Overview page of your project.\n\n### 3. Read Mutual TLS Certificates from Your Component\nComponents can read the mutual TLS certificates either from the file system or through environment variables. Ensure that you save the private key as a secret for security purposes. For detailed instructions on handling configurations and secrets, refer to the Choreo documentation on [Manage Configurations and Secrets](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-configurations-and-secrets).\n\n### 4. Sample Implementation\nFor a practical example, you can refer to the sample project demonstrating mutual TLS communication between services. Check the repository at [service-to-service-mtls](https://github.com/wso2/choreo-samples/tree/main/docker-service-to-service-mtls).\n\n### Diagram of Mutual TLS Authentication\nTo visualize how mutual TLS works, the following diagram illustrates the authentication process:\n\n![Mutual TLS authentication](https://wso2.com/choreo/docs/assets/img/authentication-and-authorization/mutual-ssl-authentication.png)\n\n### Conclusion\nBy following these steps, you can establish secure communication between your components using mutual TLS in Choreo. For more detailed information, you can refer to the full documentation [here](https://wso2.com/choreo/docs/authentication-and-authorization/configure-mutual-tls-between-components/)."
How can I pass end-user attributes to upstream services?,"To pass end-user attributes to upstream services in Choreo, you can use a JSON Web Token (JWT) in the HTTP header of your API request. This JWT will carry user information, allowing your backend service to apply specific logic based on the user consuming the API.\n\n### Steps to Enable Passing End-User Attributes:\n\n1. **Select Your Component**: In the Choreo Console, go to the **Components Listing** pane and select the component for which you want to pass end-user attributes.\n\n2. **Access Deploy Settings**: Click on **Deploy** in the left navigation menu.\n\n3. **Configure Endpoint Settings**:\n   - Locate the **Set Up** card and click on **Endpoint Configurations**. This will open the **Endpoint Configurations** pane.\n   - If your component is an API Proxy, instead, go to the **Build Area** card and click **Security Settings**.\n\n4. **Enable Security Context**: \n   - Select the **Pass Security Context To Backend** checkbox.\n   - Optionally, you can specify audience values in the **End User Token Audiences** field, which restricts the JWT to intended recipients.\n\n5. **Apply Changes**: Click **Apply** to save your settings.\n\n6. **Redeploy the Component**: To apply the new settings, go back to the **Set Up** card and click **Deploy**.\n\n### How It Works:\nThe JWT created during this process will include claims, which are pieces of information about the user, application, or request. The JWT will be included in the outgoing API request as an `X-JWT-Assertion` header. Your backend service can then extract this JWT to retrieve the necessary information about the user.\n\n### Example of JWT Claims:\nClaims in the JWT may include attributes like:\n- `sub`: Subject identifier\n- `exp`: Token expiry time\n- `email`: User's email address\n- `http://wso2.org/claims/applicationname`: Application name used for the API invocation\n\nThese claims help the backend service to identify the user and perform necessary actions based on the attributes.\n\nFor additional details and examples, you can refer to the documentation [here](https://wso2.com/choreo/docs/authentication-and-authorization/pass-end-user-attributes-to-upstream-services/)."
How do I secure API access with Asgardeo?,"To secure API access using Asgardeo in Choreo, you need to follow a series of steps that involve both Choreo and Asgardeo. Here’s a structured approach to achieve this:\n\n### Steps to Secure API Access with Asgardeo\n\n1. **Assign Scopes to Your API in Choreo**:\n   - In the **Component Listing** pane, select the API you wish to secure.\n   - Navigate to **Manage** > **Permissions**.\n   - Click on **+ Add Permission (Scope)**.\n   - Enter the permission value in the **Permission List** and click **+ Add New**.\n   - Copy the fully qualified name of the added scope for future reference.\n   - Attach the scope to specific resources by selecting it from the **Select Permissions** list.\n   - Save and deploy your API.\n   - Finally, publish your API to the Choreo Developer Portal via **Manage** > **Lifecycle** > **Publish**.\n\n   For more details, refer to the [Assign Scopes to an API in Choreo documentation](https://wso2.com/choreo/docs/authentication-and-authorization/secure-api-access-with-asgardeo/#step-1-assign-scopes-to-an-api-in-choreo).\n\n2. **Create an API and an Application in Asgardeo**:\n   - Follow the [Asgardeo API Authorization guide](https://wso2.com/asgardeo/docs/guides/api-authorization/) to create an application and an API in Asgardeo.\n   - Important settings to configure:\n     - Set the **Access Token** type to `JWT`.\n     - Choose the appropriate grant types.\n     - Keep the client ID and client secret handy for later use.\n\n   For more information, you can consult the documentation on creating an API and application in Asgardeo [here](https://wso2.com/choreo/docs/authentication-and-authorization/secure-api-access-with-asgardeo/#step-2-create-an-api-and-an-application-in-asgardeo).\n\n3. **Create an Application in Choreo and Enable External IdP Authentication**:\n   - In the Choreo Developer Portal, navigate to **Applications** and click **+Create**.\n   - Provide a name and description for your application, then click **Create**.\n   - Under **Credentials**, choose **Production** and select **Asgardeo** as the Identity Provider.\n   - Enter the Client ID you copied from the previous step and click **+Add**.\n   - In the **Subscriptions** section, add the API that you assigned scopes to.\n\n   Detailed instructions can be found in the [Create an Application in Choreo documentation](https://wso2.com/choreo/docs/authentication-and-authorization/secure-api-access-with-asgardeo/#step-3-create-an-application-in-choreo-and-enable-external-idp-authentication).\n\n4. **Invoke the API with Scopes**:\n   - In the Developer Portal, go to your application and under **Credentials**, navigate to **Production**.\n   - Copy the **Token Endpoint** URL.\n   - Obtain an access token by making a POST request to the token endpoint with the necessary parameters.\n   - Use the access token to invoke your API through the OpenAPI console by specifying the required scopes.\n\n   For more details, refer to the [Invoke the Choreo API with scopes documentation](https://wso2.com/choreo/docs/authentication-and-authorization/secure-api-access-with-asgardeo/#step-4-invoke-the-choreo-api-with-scopes).\n\n### Summary\nThese steps outline how to secure your API access by integrating Asgardeo into Choreo. By setting up scopes, creating the necessary applications, and configuring external identity providers, you ensure that only authorized users can access your API resources."
How do I configure mutual TLS between the Choreo Gateway and my backend?,"To configure mutual TLS between the Choreo Gateway and your backend service, follow these steps to ensure secure connectivity:\n\n### Step 1: Configure the Backend Certificate\n1. Ensure that the backend endpoint is protected with TLS.\n2. Extract the public certificate of the backend server in PEM format and save it with a `.pem` extension.\n3. In the Choreo Console, navigate to the **Component Listing** pane and select the API proxy you want to configure.\n4. Go to **Develop** > **Endpoints**.\n5. Click **Configure** next to the relevant endpoint.\n6. Click **Upload Endpoint Certificate** and select the certificate file you saved earlier. This certificate will be set as the default certificate for all environments.\n\n### Step 2: Configure Mutual TLS with the Backend Service\nYou have two options for this step:\n\n#### Option A: Generate a Key Pair through Choreo\n1. Ensure mutual SSL is enabled by toggling the **Mutual SSL** switch.\n2. Click **Add Client Certificate**.\n3. In the dialog, select **Generate new key pair** and specify a common name for identification.\n4. Optionally, configure advanced options and click **Generate**.\n5. After generating, view and download the certificate in PEM format, which you will need to add as a trusted certificate in your backend.\n\n#### Option B: Use Your Own Certificate Pair\n1. Ensure mutual SSL is enabled by toggling the **Mutual SSL** switch.\n2. Click **Add Client Certificate**.\n3. In the dialog, select **Use my own key pair**.\n4. Upload the private key and public certificate in PEM format, or paste their contents.\n5. Click **Add** to generate and list the certificate under **Existing Certificates**.\n6. Similar to the previous option, download the certificate in PEM format for your backend.\n\n### Step 3: Associate the Certificate with the API\n1. On the **Endpoints** page, go to the **Existing Certificates** section.\n2. Select the appropriate certificate and click **Save**.\n\n### Step 4: Deploy the API\n1. Click on **Deploy** in the left menu.\n2. In the **Build Area** card, click **Configure & Deploy**.\n3. Verify the endpoint URL and click **Save & Deploy**.\n\n### Additional Notes\n- If your API backend changes based on the environment, ensure to update the respective certificate for each environment accordingly.\n- You can refer to the sample for mutual TLS communication for further guidance: [service-to-service-mtls](https://github.com/wso2/choreo-samples/tree/main/docker-service-to-service-mtls).\n\nFor more details, you can check the documentation [here](https://wso2.com/choreo/docs/authentication-and-authorization/secure-communication-between-the-choreo-gateway-and-your-backend-with-mutual-tls/#configure-mutual-tls-to-establish-secure-connectivity)."
How do I secure web applications with managed authentication?,"To secure your web applications with managed authentication using Choreo, you can follow these key steps:\n\n### 1. Set Up Managed Authentication\nChoreo's managed authentication simplifies the integration of authentication and authorization into your single-page web applications. It follows the backend for frontend (BFF) architecture, ensuring that OAuth tokens remain secure.\n\n#### Step 1.1: Implement the Sign-In Functionality\nYou need to implement a sign-in button that redirects users to the `/auth/login` path when clicked. Here is an example code snippet:\n\n```javascript\n<button onClick={() => { window.location.href = ""/auth/login""; }}>Login</button>\n```\n\nThis code will redirect users for authentication through the configured identity provider. Upon successful sign-in, Choreo will set session cookies and redirect the user to the specified post-sign-in path.\n\n#### Step 1.2: Obtain User Information Claims\nAfter sign-in, you can retrieve user information from the `userinfo` cookie or the `/auth/userinfo` endpoint. \n\nExample to get user info from the cookie:\n```javascript\nimport Cookies from 'js-cookie';\n\nconst encodedUserInfo = Cookies.get('userinfo');\nconst userInfo = JSON.parse(atob(encodedUserInfo));\nCookies.remove('userinfo', { path: <post-login-path> });\n```\n\n#### Step 1.3: Implement Sign-Out Functionality\nFor sign-out, implement a sign-out button that redirects to the `/auth/logout` path:\n\n```javascript\n<button onClick={() => { window.location.href = `/auth/logout?session_hint=${Cookies.get('session_hint')}`; }}>Logout</button>\n```\n\n### 2. Enable Managed Authentication\nTo ensure your web application utilizes managed authentication, enable it during the deployment process:\n\n1. In the **Component Listing** pane of the Choreo Console, select your web application.\n2. Click on **Deploy** in the left navigation menu.\n3. In the **Set Up** card, ensure the **Managed Authentication with Choreo** toggle is enabled and set the necessary paths for login, logout, and error handling.\n\n### 3. Configure the Identity Provider\nYou can use Choreo's built-in identity provider or an external one that supports OIDC/OAuth2.0.\n\n- **For Choreo Built-in Identity Provider**:\n  - In the Choreo Console, go to your component.\n  - Click on **Settings** > **Authentication Keys** and select **Choreo Built-In Identity Provider**.\n  - Generate the secret key.\n\n- **For External Identity Provider (like Asgardeo)**:\n  - Create an OIDC/OAuth2.0 application in your identity provider.\n  - Link this application to your Choreo component by pasting the Client ID and Client Secret in the Authentication Keys settings.\n\n### 4. Invoke APIs\nYou can invoke APIs using the relative path `/choreo-apis/<api-suffix>`, and Choreo will automatically handle the access tokens if managed authentication is enabled.\n\n### 5. Handle Session Expiry\nTo manage session expiry, monitor the `401 Unauthorized` response to trigger a re-login:\n\n```javascript\nexport const performGet = async (url) => {\n  try {\n    return await fetch('/choreo-apis/<api-suffix>');\n  } catch (error) {\n    if (error instanceof HttpError && error.status === 401) {\n      window.location.href = ""/auth/login"";\n    } else {\n      throw error;\n    }\n  }\n};\n```\n\n### Additional Notes\n- Managed authentication is available for web applications created with **React**, **Angular**, or **Vue.js** buildpacks.\n- Ensure to use modern browsers that support the 'SAMESITE' cookie attribute to prevent CSRF attacks.\n\nFor more detailed information, you can refer to the documentation: [Secure Web Applications with Managed Authentication](https://wso2.com/choreo/docs/authentication-and-authorization/secure-web-applications-with-managed-authentication/)."
How do I test secure API access with Choreo's built-in security token service?,"To test secure API access using Choreo's built-in security token service, you need to follow a series of steps that involve configuring permissions, roles, and user groups. Here’s a structured approach to achieve this:\n\n### Prerequisites\nBefore you start testing, ensure you have the following set up:\n1. **Choreo Built-in Identity Provider**: Configure with users. For guidance, see [Configure a User Store with the Built-In Identity Provider](https://wso2.com/choreo/docs/administer/configure-a-user-store-with-built-in-idp).\n2. **API Deployment**: You should have an API deployed and published in Choreo. If you don’t have one, you can [develop a service](https://wso2.com/choreo/docs/develop-components/develop-services/develop-a-service) or an [API Proxy](https://wso2.com/choreo/docs/develop-components/develop-an-api-proxy).\n3. **Web Application for API Subscription**: If you don’t have an application, you need to [create a web application](https://wso2.com/choreo/docs/develop-components/develop-web-applications/build-and-deploy-a-single-page-web-application).\n4. **Administrator Rights**: Ensure you have administrator rights in your Choreo organization to manage roles and permissions.\n\n### Steps to Test Secure API Access\n\n#### Step 1: Assign Permissions to the API\n1. In the Choreo Console, select the project containing your API.\n2. Click on the API component from the **Component Listing** pane.\n3. Navigate to the **Deploy** tab.\n4. Go to the **Set Up** card and select **Endpoint Configurations**.\n5. In the **Permissions List** section, click **+ Add Permission(Scope)**.\n6. Enter a permission value and click **+ Add New**.\n7. Copy the fully qualified name of the added permission for future reference.\n8. Attach the permissions to the API resources by selecting them under **Select Permissions**.\n9. Click **Apply** and redeploy the component by navigating to **Configure & Deploy** and clicking **Deploy**.\n10. Publish your API via the **Manage** > **Lifecycle** > **Publish**.\n\nFor more details, refer to the [Assign Permissions to an API](https://wso2.com/choreo/docs/authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#step-1-assign-permissions-to-an-api-in-choreo).\n\n#### Step 2: Create Roles and Assign Permissions\n1. Go to the **Settings** in the Choreo Console.\n2. Click on the **Application Security** tab.\n3. Click **+ Role** to create a new role.\n4. Provide a **Role Name** and **Role Description**.\n5. Select the permissions you want to associate with this role and click **Create**.\n\nFor additional information, refer to the [Create Roles and Assign Permissions](https://wso2.com/choreo/docs/authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#step-2-create-roles-and-assign-permissions).\n\n#### Step 3: Assign Roles to User Groups\n1. Navigate to the **Organization** menu and select your organization.\n2. Click on the **Application Security** tab and then **Role Management**.\n3. Click **Map Groups** next to the role you want to assign.\n4. Specify the group name(s) and click **Save**.\n\nFor more specifics, check the [Assign Roles to User Groups](https://wso2.com/choreo/docs/authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#step-3-assign-roles-to-user-groups).\n\n### Conclusion\nAfter completing these steps, you will have configured your API with secure access settings. You can now proceed to test the API invocation, ensuring the appropriate permissions and roles are applied.\n\nFor a comprehensive guide, you can access the full documentation on [Testing Secure API Access with Choreo's Built-In Security Token Service](https://wso2.com/choreo/docs/authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/)."
What are the key features of the Choreo CLI?,"The Choreo CLI (Command Line Interface) offers several key features that facilitate the development and management of cloud-native applications. Here are the main features of the Choreo CLI:\n\n1. **Component Creation**: The CLI supports the creation of various component types, including:\n   - Service\n   - Web Application\n   - Webhook\n   - Scheduled Task\n   - Manual Task\n\n2. **Build Configuration**: When creating components, users can define build configurations tailored to each component type. The configurations can include parameters such as `buildPackLangVersion` for programming languages and `dockerFilePath` for Docker components.\n\n3. **Help Command**: Users can easily access help for specific commands by using the `--help` flag, allowing for efficient command usage and troubleshooting.\n\n4. **Updates and Uninstallation**: The CLI can be updated using a simple command, and if necessary, it can be uninstalled by deleting the `.choreo` directory in the user's home directory.\n\n5. **Integration with Git**: Although not explicitly mentioned in the CLI context, Choreo's overall capabilities include seamless integration with Git-based platforms, enhancing the development workflow.\n\nThese features make the Choreo CLI a powerful tool for developers looking to manage and deploy components in a streamlined manner.\n\nFor more detailed information, you can refer to the following document: [Choreo CLI FAQ](https://wso2.com/choreo/docs/references/faq/#choreo-cli)."
How do I create a multi-repository project using the Choreo CLI?,"To create a multi-repository project using the Choreo CLI, you'll need to follow a series of steps to connect your Git repositories and manage your components effectively. Here’s how you can do that:\n\n1. **Understand Project Structure**: In Choreo, a project is a logical group of related components that represent a single cloud-native application. Each project can consist of one or more components, which can be located in different Git repositories. This architecture allows you to manage your components flexibly.\n\n2. **Connect Multiple Git Repositories**: You can connect your Git repositories (GitHub, Bitbucket, or GitLab) to Choreo. This enables you to automate tasks and optimize workflows across multiple systems. You can connect existing repositories or start with an empty repository and commit your source code later. \n\n3. **Add Credentials for Git Providers**:\n   - Go to the **Settings** in the Choreo Console.\n   - Click on the **Credentials** tab and then on **+Add Credentials**.\n   - Enter a **Credential Name**, select your Git provider, and input your **Personal Access Token**.\n   - Click **Save** to establish the connection.\n\n4. **Develop Components**: Once your repositories are connected, you can develop components from these repositories. You will be able to deploy and manage these components within a single project, even if they are sourced from multiple repositories.\n\n5. **Deploy Your Project**: When deploying, all components within your project will be deployed into a single namespace in the Kubernetes cluster. You can control the visibility of these components, whether they are exposed to the public internet, internally, or kept private.\n\nFor further details and visual representations, you can refer to the relevant documentation: [Develop Components With Git](https://wso2.com/choreo/docs/develop-components/develop-components-with-git/) and [Project in Choreo](https://wso2.com/choreo/docs/choreo-concepts/project/)."
How do I view build logs using the Choreo CLI?,"To view build logs using the Choreo CLI, you would typically follow these steps:\n\n1. **Access the Build Page**: In the Choreo Console, navigate to the Build page where your builds are listed.\n\n2. **Select the Build**: Identify and select the specific build for which you want to see the logs.\n\n3. **View Build Details**: Click on ""View Details"" corresponding to the selected build. This action will display the logs related to that particular build.\n\nChoreo auto-generates build pipelines that include steps such as building a container image from source code, running security scans, and pushing the image to a container registry. Each build logs these processes, allowing you to troubleshoot issues effectively.\n\nFor more information on accessing build logs and understanding the build process, you can refer to the documentation [here](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#build)."
How do I manage authentication with personal access tokens in Choreo CLI?,"To manage authentication using personal access tokens in Choreo CLI, follow these general steps:\n\n1. **Obtain a Personal Access Token (PAT)**: First, you need to obtain a personal access token from your GitLab self-managed server. This token will grant Choreo the necessary permissions to perform actions on your behalf within the repository. The required permissions include full read/write access to the API and the repository.\n\n2. **Use the PAT in Choreo CLI**: Once you have your PAT, you can use it to authenticate your requests in the Choreo CLI. When making API calls, include the PAT in the `Authorization` header as follows:\n   ```bash\n   curl -H ""Authorization: Bearer <YOUR_PERSONAL_ACCESS_TOKEN>"" -X GET ""https://your-api-endpoint""\n   ```\n\n3. **Manage Access Tokens**: You can manage access tokens by generating, refreshing, or revoking them as necessary. For example, if you need to revoke a token, keep in mind that JWT access tokens are self-validating, which makes revocation challenging. It is recommended to use short-lived tokens and refresh them regularly to enhance security.\n\nFor detailed steps on how to authorize a self-managed GitLab with Choreo, you can refer to the documentation here: [Authorize self-managed GitLab with Choreo](https://wso2.com/choreo/docs/develop-components/develop-components-with-git/#authorize-self-managed-gitlab-with-choreo).\n\nIf you need more information about managing access tokens, you can check the following link: [Manage Applications - Revoke access tokens](https://wso2.com/choreo/docs/consuming-services/manage-application/#revoke-access-tokens). \n\nThis approach will help you effectively manage authentication using personal access tokens in Choreo CLI."
How do I configure the Pull Latest Submodules toggle in Choreo?,"To configure the 'Pull Latest Submodules' toggle in Choreo, follow these steps:\n\n1. **Access the Component**: In the Choreo Console, locate the component for which you want to enable the submodule updates. Click on the component in the **Component Listing** pane.\n2. **Navigate to Build Configurations**: In the left navigation menu, select **Build**.\n3. **Edit Build Configurations**: On the **Build** page, click to edit **Build Configurations**.\n4. **Enable the Toggle**: Find the **Pull Latest Submodules** toggle and turn it on.\n\n### Important Note:\n- This feature is currently supported only for components where the buildpack is **WSO2 MI**.\n\nIf you run into issues with previously built commits not reflecting the latest changes, ensure to set the container image pull policy to **Always** in the DevOps settings.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/develop-components/develop-components-with-git/#authorize-github-with-choreo)."
What are the key features of the Choreo Marketplace?,"The Choreo Marketplace is designed to promote the reuse and sharing of services deployed within Choreo. Here are the key features of the Choreo Marketplace:\n\n1. **Service Sharing**: The Marketplace allows you to share all services deployed in Choreo, facilitating collaboration and reuse across teams.\n\n2. **Browse and Search**: Users can easily browse available services and utilize a search function to find services based on various attributes including name, label, and content.\n\n3. **Discoverability**: The Marketplace includes a filtering capability, where services can be categorized based on type (Internal or Third-party) and network visibility (Public, Organization, or Project).\n\n4. **Detailed Service Information**: Each service in the Marketplace has a detailed view that provides:\n   - **Overview**: A summary provided by the service developer.\n   - **API Definition**: Information extracted from the `component.yaml` file.\n   - **How to Use**: Instructions for using the service, including connection creation.\n   - **Related Documents**: Additional documents uploaded by the service developer.\n\n5. **User-Friendly Interface**: The Marketplace provides an intuitive interface for exploring services, ensuring that users can easily find and utilize the services they need.\n\nFor more detailed information, you can refer to the [Choreo Marketplace documentation](https://wso2.com/choreo/docs/choreo-concepts/choreo-marketplace/)."
What kind of Service Types does Choreo support for registration of 3rd Party Services?,"Choreo supports the registration of several types of third-party services, which can be integrated into your projects. Here are the types of services that you can register in Choreo:\n\n1. **REST APIs**: These are web services that adhere to the REST architectural style, allowing you to interact with resources using standard HTTP methods.\n\n2. **GraphQL APIs**: This type allows clients to request only the data they need and provides a more flexible alternative to REST APIs.\n\n3. **Asynchronous APIs**: These services enable communication that does not require the client to wait for the server to respond, allowing for more efficient processing and resource use.\n\n4. **SOAP**: Simple Object Access Protocol (SOAP) is a messaging protocol that allows programs running on different operating systems to communicate with each other.\n\n5. **gRPC**: This is a modern open-source high-performance RPC (Remote Procedure Call) framework that can run in any environment and is designed for connecting services in a distributed system.\n\nWhen registering a third-party service, you can do so at either the organization level, making it accessible from any project within the organization, or at the project level, which restricts access to a specific project.\n\nFor more detailed information on registering third-party services in Choreo, you can refer to the documentation [here](https://wso2.com/choreo/docs/integrate-and-manage-external-services/integrate-and-manage-third-party-services/#register-a-third-party-service-in-choreo)."
How to integrate with a GenAI service?,"To integrate a Generative AI (GenAI) service using Choreo, you need to follow a series of steps to register the service, which will then be available for consumption in your projects. Here’s a comprehensive guide on how to do this:\n\n### Steps to Integrate a GenAI Service in Choreo\n\n#### 1. **Prerequisites**\n   Before starting the registration process, ensure you have the following details from your GenAI service provider:\n   - **API key**\n   - **Service URL**\n   - Any other necessary parameters, such as client credentials.\n\n#### 2. **Select a Service Provider**\n   - In the Choreo Console, choose whether to register the GenAI service at the **Organization level** (accessible to all projects) or the **Project level** (restricted to a specific project).\n   - Navigate to the left menu and click on **Dependencies**, then select **GenAI Services**.\n   - Click on **+ Register** to initiate the process.\n   - Select the appropriate service provider from the list.\n\n#### 3. **Provide Service Details**\n   - Enter the required details for the service:\n     - **Name**: Give your service a recognizable name.\n     - **Version**: Specify the version of the service.\n     - **Service URL**: Provide the URL for the GenAI service.\n   - Click **Next** to proceed.\n\n#### 4. **Add Configurations**\n   - Input the configuration details required for your selected service provider. Note that the configurations may vary based on the provider.\n   - Ensure that you include all mandatory configurations to successfully register the service.\n   - After filling in the details, click **Register**.\n\nOnce registered, your GenAI service will be listed in the **Internal Marketplace**, making it available for consumption through a Connection.\n\n### Additional Information\n- If you need to manage your registered GenAI services, you can view or update their details by again navigating to **Dependencies** > **GenAI Services** in the Choreo Console.\n- For more details on consuming a GenAI service via a connection, refer to the documentation on [Creating a Connection](https://wso2.com/choreo/docs/develop-components/sharing-and-reusing/create-a-connection).\n\nFor further information, you can refer to the comprehensive documentation on integrating and managing GenAI services [here](https://wso2.com/choreo/docs/integrate-and-manage-external-services/integrate-and-manage-gen-ai-services/#register-a-genai-service)."
What is the difference between Choreo data plane and private data plane?,"Choreo's architecture includes two types of data planes: the **Choreo data plane** (often referred to as the cloud data plane) and the **private data plane** (PDP). Here are the main differences between them:\n\n### Choreo Data Plane (Cloud Data Plane)\n- **Infrastructure**: Utilizes a multi-tenanted infrastructure model, meaning multiple customers share the same environment while ensuring security and isolation of user data.\n- **Deployment**: Applications are deployed on public cloud infrastructure managed by WSO2.\n- **Suitability**: Ideal for users who prefer a managed service without the need for dedicated infrastructure. It is suitable for organizations that do not have stringent data privacy requirements.\n\n### Private Data Plane (PDP)\n- **Infrastructure**: Offers dedicated infrastructure for a single organization, providing greater privacy and control over applications and data.\n- **Deployment**: Can be deployed across major cloud providers (like Azure, AWS, GCP) or on-premises. This allows organizations to meet specific compliance and security requirements.\n- **Requirements**: Requires an upstream-compatible Kubernetes cluster, a container registry, key vaults, and logging services.\n- **Management Models**: Supports various management models, including fully managed by WSO2 or self-managed by the customer, allowing flexibility based on organizational needs.\n\n### Summary\nIn essence, the Choreo data plane is a shared environment managed by WSO2, aimed at users looking for ease of deployment without dedicated resources. In contrast, the private data plane provides dedicated resources and greater control for organizations with specific security and compliance needs.\n\nFor more detailed information, you can refer to the following links:\n- [Choreo Data Planes](https://wso2.com/choreo/docs/choreo-concepts/data-planes/)\n- [Private Data Plane Overview](https://wso2.com/choreo/docs/choreo-concepts/data-planes/#private-data-planes)"
