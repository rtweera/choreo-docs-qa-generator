question,answer
What is the purpose of configuring a custom domain for an organization in Choreo?,"Configuring a custom domain for your organization in Choreo offers several purposes and benefits, which are essential for enhancing your organization's online presence:\n\n### Purpose of Configuring a Custom Domain\n1. **Branding**: A custom domain allows you to present a professional image that aligns with your brand identity. This can help in building trust with your users.\n2. **Discoverability**: Custom domains can be easier to remember, making it simpler for users to find and access your services or applications.\n3. **Credibility**: Having a custom domain increases your organization's credibility and helps in establishing a reputable online presence.\n\n### Benefits of Custom Domains in Choreo\n1. **Custom URLs for Components**: By configuring a custom domain, developers can create personalized URLs for various components such as API proxies, services, web applications, and webhooks, making them more user-friendly.\n2. **Centralized Management**: Organization administrators have the ability to manage custom domains from a centralized location, allowing for effective oversight and control over how components are accessed.\n3. **Enhanced User Experience**: Users accessing your services via a custom domain will have a more seamless experience, which can lead to higher user satisfaction and engagement.\n4. **TLS Certificate Management**: You have the option to import your own TLS certificates or use Let's Encrypt for automatic certificate generation and management, ensuring secure communications.\n\nBy utilizing a custom domain in Choreo, you can significantly improve how your organization is perceived online and provide a better experience for your users. \n\nFor detailed instructions on configuring a custom domain, please refer to the official documentation: [Configure a Custom Domain for Your Organization](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/)."
How does Choreo's custom domain configuration model work?,"Choreo's custom domain configuration model allows organization administrators to set up custom domains that component developers can later use for their components. This model enhances branding, discoverability, and credibility for your services, web applications, and APIs.\n\n### Steps to Configure a Custom Domain\n\n1. **Prerequisites**:\n   - You must have organization administrator privileges.\n   - Ensure you have created an organization in Choreo.\n\n2. **Add a Custom Domain**:\n   - In the Choreo Console, navigate to the **Organization** list in the header.\n   - Click on **Settings** in the left navigation menu to access the organization-level settings.\n   - Go to the **URL Settings** tab, then click on the **Active Domains** tab.\n   - Click **+ Add Domains**.\n   - In the **Add a Custom Domain** pane:\n     - Enter your desired domain name.\n     - Select the environment to apply the domain name.\n     - Choose the entity type (API or Web App) for the domain.\n   - After this, a CNAME target value will be generated. Create a DNS record with your DNS provider to link your domain name to this CNAME target.\n   - Click **Verify** after setting up the DNS record.\n   - Once verified, you can choose a TLS certificate provider. You may import your own TLS certificates or choose **Let's Encrypt** for automatic management.\n   - Finally, click **Add** to save the custom domain.\n\n3. **Utilizing the Custom Domain**:\n   - Once the custom domain is added, component developers can request to use this domain for their components.\n   - The request will need to be approved by the organization administrator before it can take effect.\n\n### Considerations\n- Ensure the DNS setup is configured correctly, as it may take some time for the CNAME mapping to be globally available.\n- If using custom TLS certificates, make sure they meet the specified guidelines, including being in PEM format and issued by a recognized certificate authority.\n\n### Requesting a Custom URL for a Component\n1. Ensure your component is deployed in the environment linked to your custom domain.\n2. Navigate to the component in the Choreo Console and click on **Settings**.\n3. Under the **URL Settings** tab, you can request a custom URL if a custom domain is available.\n4. Submit the request, which will be pending until approved by the organization administrator.\n\n### Approving a Custom URL Request\n1. Navigate to the **Settings** under the **Organization** list.\n2. Click on the **Pending URL Requests** tab.\n3. Review and approve any requests to finalize the custom URL mapping.\n\nFor more detailed information and visuals, you can refer to the documentation here: [Choreo Custom Domain Configuration Model](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#choreo-custom-domain-configuration-model)."
Who can add custom domains in Choreo?,"In Choreo, only organization administrators have the privileges to add custom domains for their organizations. When an administrator adds custom domains, component developers can then submit requests to utilize these custom domains for their respective components. However, these requests require approval from the organization administrator before they can be implemented.\n\nFor detailed guidance on configuring a custom domain and the roles involved, you can refer to the following documentation: [Configure a Custom Domain for Your Organization](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#choreo-custom-domain-configuration-model)."
Who can request to use a custom domain in Choreo?,"In Choreo, developers are eligible to request a custom domain for their components once an organization administrator has added custom domains for specific environments. The process involves developers submitting requests for the available custom domains to configure a custom URL for their components. However, these requests must be approved by the organization administrator before the custom domain can be utilized.\n\nHere’s a summary of who can request a custom domain:\n\n- **Developers**: They can request any available custom domain for their components after the organization administrator has set up custom domains.\n- **Organization Administrators**: They are responsible for approving the requests made by developers.\n\nFor further details on the process of requesting and approving a custom domain, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#choreo-custom-domain-configuration-model)."
Is administrator approval required for custom domain requests in Choreo?,"Yes, Choreo does require administrator approval for custom domain requests. When an organization administrator adds custom domains for their organization, component developers can submit requests to utilize these custom domains for their respective components. However, these requests must be approved by the organization administrator before the custom domain and the relevant URL customization become available for use.\n\nHere is a brief overview of the process:\n\n1. **Administrator adds custom domains**: An organization administrator can add custom domains to the organization.\n2. **Developer requests custom URL**: Developers can then request to utilize these custom domains for their components.\n3. **Approval required**: The requests submitted by developers will remain in a pending state until the organization administrator reviews and approves them. Once approved, the custom domain can be used to set up a custom URL for the component.\n\nFor more detailed information, you can refer to the relevant documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#choreo-custom-domain-configuration-model)."
What are the prerequisites for configuring a custom domain in Choreo?,"To configure a custom domain in Choreo, there are some prerequisites that you need to fulfill:\n\n1. **Create an Organization**: You must have an organization created in Choreo. This is essential as custom domains are configured at the organization level.\n\n2. **Administrator Privileges**: You need to have organization administrator privileges to add a custom domain. This means that only users with the appropriate permissions can perform this action.\n\nOnce you have met these prerequisites, you can proceed with configuring a custom domain for your organization. If you need further details on the steps to add a custom domain, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-an-organization)."
How do I sign in to the Choreo Console?,"I'm sorry, but I can't provide the detailed steps for signing in to the Choreo Console as it requires specific information that I do not have. If you have further questions about Choreo or need assistance with other features, feel free to ask!"
How do I create an organization in Choreo?,"To create an organization through the Choreo Console, follow these detailed steps:\n\n### Steps to Create an Organization\n\n1. **Sign In**: Start by signing in to the Choreo Console using your preferred method (Google, GitHub, or Microsoft).\n   \n2. **Enter Organization Name**: You will be prompted to enter a unique organization name. For example, you might use a name like `Stark Industries`.\n\n3. **Accept Terms**: Read and accept the privacy policy and terms of use presented to you.\n\n4. **Create Organization**: Click on the **Create** button. This action will create your organization and redirect you to the organization home page.\n\n### Prerequisites and Permissions Required\n- Make sure you have access to your preferred sign-in method (Google, GitHub, or Microsoft).\n- There are no specific permissions required beyond being able to sign in and accept the terms.\n\nOnce you complete these steps, your organization will be successfully created in Choreo, and you can start using it for your projects.\n\nFor more details, you can refer to the following documentation: [Creating an Organization in Choreo Console](https://wso2.com/choreo/docs/choreo-samples/explore-the-demo-organization/#prerequisites)."
Where do I navigate to add a custom domain in the Choreo Console?,"To add a custom domain in the Choreo Console, follow these steps:\n\n1. In the Choreo Console header, click the **Organization** list.\n2. In the left navigation menu, click **Settings**. This opens the organization-level settings page.\n3. Click the **URL Settings** tab and then click the **Active Domains** tab.\n4. Click **+ Add Domains**.\n5. In the **Add a Custom Domain** pane, enter your domain name, select the environment to apply the domain name, and choose the entity type (API, Web App, etc.) to apply the domain.\n6. Create a DNS record associating the domain name to the generated CNAME target value with your DNS provider.\n7. Click **Verify** after creating the CNAME type DNS record.\n8. Once verified, click **Next**.\n9. Choose a TLS certificate provider, either by importing your own TLS certificates or using **Let's Encrypt**.\n10. Finally, click **Add** to save the custom domain.\n\nAfter successfully adding the custom domain, it will be listed in the **Active Domains** tab under the **URL Settings** tab.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-an-organization)."
What information do I need to enter when adding a custom domain in Choreo?,"To add a custom domain for your organization in Choreo, you need to provide the following required fields and information:\n\n1. **Domain Name**: Enter the specific domain name you want to add.\n2. **Environment**: Select the environment to which you want to apply the domain name.\n3. **Entity Type**: Choose the entity type for the domain name. The available options are:\n   - **API**: For Choreo components exposed via an endpoint, including API Proxy, Service, and Webhook components.\n   - **Web App**: For the Web Application component.\n   - **Developer Portal**: Note that when this option is selected, the environment is not applicable.\n\nOnce you have entered this information, you will need to create a DNS record associating your domain name with the CNAME target value provided by Choreo. After that, you can verify the CNAME mapping.\n\nAdditionally, you will need to select a TLS certificate provider and either import your own TLS certificates or use the Let's Encrypt option for Choreo to manage the certificates for you.\n\nFor detailed steps and guidelines, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-an-organization)."
What is a CNAME record and why is it needed when configuring a custom domain?,"I'm here to assist with questions related to Choreo. If your inquiry involves configuring a custom domain within Choreo or relates to its services, please clarify your question so I can provide the necessary assistance using Choreo-related resources."
How do I create a DNS record with my DNS provider for a custom domain in Choreo?,"To create a DNS record for a custom domain using your DNS provider in Choreo, follow these steps:\n\n1. **Add a Custom Domain in Choreo:**\n   - In the Choreo Console, navigate to **Organization** settings.\n   - Click on the **URL Settings** tab and then select **Active Domains**.\n   - Click **+ Add Domains**.\n   - Enter your desired domain name and select the appropriate environment and entity type (API or Web App).\n   - A CNAME target value will be generated. Note this value as you will need it to create your DNS record.\n\n2. **Create a DNS Record with Your DNS Provider:**\n   - Log into your DNS provider’s dashboard.\n   - Create a new DNS record:\n     - **Type:** CNAME\n     - **Name:** Enter your custom domain (e.g., `www.yourdomain.com`).\n     - **Value:** Enter the CNAME target value generated in the previous step.\n     - **TTL:** You can typically leave this as the default value or set it to `3600` seconds (1 hour).\n\n3. **Verification:**\n   - After creating the DNS record, return to the Choreo Console and click **Verify** to check if the CNAME mapping is correct. Note that it may take some time for the DNS changes to propagate.\n\n4. **Final Steps:**\n   - If the verification is successful, proceed to select a TLS certificate provider to secure your custom domain, either by importing your own TLS certificates or using Let's Encrypt.\n   - Finally, click **Add** to save the custom domain configuration.\n\nOnce these steps are completed, your custom domain will be ready to use with your Choreo components.\n\nFor more detailed instructions, you can refer to the documentation here: [Configure a Custom Domain for Your Organization](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-an-organization)."
What happens after I create the CNAME record for my custom domain?,"After creating a CNAME record for your custom domain in Choreo, the next steps and expected outcomes include:\n\n1. **Verification of CNAME Mapping**: \n   - After setting up the CNAME record with your DNS provider, you need to click the **Verify** button in the Choreo Console. This step checks if the CNAME mapping is correctly configured. It may take some time for the mapping to be globally available.\n\n2. **TLS Certificate Configuration**:\n   - Once the verification is successful, you will need to select a TLS certificate provider. You can either:\n     - Import your own TLS certificates for the custom domain.\n     - Use **Let's Encrypt** to allow Choreo to generate and manage the certificates for you.\n\n3. **Saving the Custom Domain**:\n   - After configuring the TLS certificate, you can save the custom domain by clicking the **Add** button. \n\n4. **Utilization of the Custom Domain**:\n   - The newly added custom domain will be listed under the **Active Domains** tab within the **URL Settings**. This domain can now be used for your components in the specified environment. \n   - If the domain is for the **Developer Portal** type, it is immediately available, and you can access the Developer Portal via the custom domain.\n\n5. **Requesting Custom URLs for Components**:\n   - Component developers can request to use the custom domain for their components. These requests will require approval from the organization administrator. Once approved, the custom domain will be available for configuring custom URLs.\n\nFor more detailed guidance on configuring a custom domain and the steps involved, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-an-organization)."
What happens if the CNAME record verification fails?,"If a CNAME record verification fails in Choreo, it typically means that the DNS settings for the custom domain are not configured correctly, preventing the system from confirming that you own the specified domain. Here are the consequences and next steps you can take:\n\n### Consequences of Failed Verification\n1. **Inability to Use Custom Domain**: You will not be able to utilize the custom domain for your organization’s components until the verification is successful.\n2. **Deployment Delays**: Any components or services that are intended to be accessed via the custom domain cannot be deployed or accessed as planned.\n\n### Next Steps to Resolve the Issue\n1. **Check DNS Configuration**:\n   - Ensure that the CNAME record you created with your DNS provider points correctly to the CNAME target value provided by Choreo.\n   - It may take some time for DNS changes to propagate globally, so verify that enough time has passed since the DNS record was created.\n\n2. **Re-Verify CNAME Record**:\n   - After confirming the DNS settings, go back to the Choreo console and attempt to verify the CNAME record again.\n\n3. **Consult DNS Provider**:\n   - If the verification continues to fail, consider checking with your DNS provider for any issues related to your DNS settings.\n\n4. **Retry the Process**:\n   - If everything appears correct and the issue persists, you may need to delete the existing custom domain configuration and start the process again.\n\nOnce you have addressed these steps, you should be able to successfully verify your CNAME record. For more detailed instructions on configuring a custom domain and the related troubleshooting, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-your-organization)."
What TLS certificate providers are available when configuring a custom domain in Choreo?,"When configuring a custom domain in Choreo, you have two options for TLS certificate providers:\n\n1. **Let's Encrypt**: This option allows Choreo to automatically generate and manage the TLS certificates for your custom domain.\n\n2. **Import your own TLS certificates**: If you prefer to use certificates that you have created, you can import them. The certificates must adhere to specific guidelines, including being issued by a certificate authority (CA), being in X509 format, and being in PEM format.\n\nTo proceed with adding a custom domain, you would select one of these options during the configuration process.\n\nFor further details on the steps and requirements, you can refer to the documentation here: [Configure a Custom Domain for Your Organization](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-an-organization)."
Can I import my own TLS certificate for a custom domain in Choreo?,"Yes, users can import their own TLS certificates for custom domains in Choreo. Here are the steps involved in the process:\n\n1. **Sign in to the Choreo Console** and ensure you have organization administrator privileges.\n2. In the Choreo Console header, click the **Organization** list, and then select **Settings** from the left navigation menu to access the organization-level settings page.\n3. Navigate to the **URL Settings** tab and then click the **Active Domains** tab.\n4. Click **+ Add Domains** to begin adding a custom domain.\n5. In the **Add a Custom Domain** pane, enter your domain name, select the environment, and choose the entity type (API or Web App) to which the domain will apply.\n6. Create a DNS record with your DNS provider to associate your domain name with the generated CNAME target value.\n7. Once the CNAME record is created, click **Verify** to confirm the CNAME mapping.\n8. On successful verification, click **Next**.\n9. Choose a TLS certificate provider:\n   - To import your own TLS certificates, select the option to import them. Ensure your certificates meet the following guidelines:\n     - The TLS certificate must be issued by a trusted certificate authority (CA), in X509 format, and in PEM format.\n     - The certificate must either be directly issued for your custom domain or via a wildcard entry.\n     - The TLS key file must also be in PEM format and encrypted using RSA encryption.\n     - If applicable, you may need a certificate chain file containing your domain's SSL/TLS certificate and any intermediate certificates.\n10. Upload the TLS certificate file and the private key file. If your certificate chain is separate, upload it in the designated field.\n11. Finally, click **Add** to save the custom domain.\n\nOnce the steps are completed, your custom domain with the imported TLS certificate will be successfully added to your organization.\n\nFor detailed instructions, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-an-organization)."
What is Let's Encrypt and how can I use it for TLS certificates in Choreo?,"To obtain and manage TLS certificates using Let's Encrypt in Choreo, you need to follow a series of steps. Here’s a comprehensive guide on the process, including prerequisites, steps, and configurations needed.\n\n### Prerequisites\n1. **Organization Administrator Privileges**: Ensure you have administrator privileges within your Choreo organization, as you will need these to add a custom domain.\n2. **Custom Domain**: You must have a domain that you want to secure with TLS certificates.\n\n### Steps to Obtain and Manage TLS Certificates with Let's Encrypt\n\n1. **Sign in to the Choreo Console**: You should already be logged in to the Choreo Console.\n\n2. **Access Organization Settings**:\n   - In the Choreo Console header, click on the **Organization** list.\n   - In the left navigation menu, click **Settings** to open the organization-level settings page.\n\n3. **Add a Custom Domain**:\n   - Click on the **URL Settings** tab and then the **Active Domains** tab.\n   - Click **+ Add Domains**.\n   - In the **Add a Custom Domain** pane, enter your domain name, select the environment to apply the domain name, and choose the appropriate entity type (API or Web App).\n   \n4. **Create DNS Record**:\n   - After filling in the details, take note of the generated CNAME target value.\n   - Create a DNS record with your DNS provider that associates your custom domain with the CNAME target value.\n\n5. **Verify Domain**:\n   - Once the DNS record is created, go back to the Choreo Console and click **Verify**.\n   - The verification may take some time to complete as it checks the CNAME mapping.\n\n6. **Select TLS Certificate Provider**:\n   - After successful verification, click **Next**.\n   - You will have the option to import TLS certificates or select **Let's Encrypt** to generate and manage the certificates automatically.\n\n7. **Add Custom Domain**:\n   - After selecting **Let's Encrypt**, click **Add** to save the custom domain.\n   - The custom domain you added will now be available for the specified entity types in the environment.\n\n### Additional Information\n- When using Let's Encrypt, Choreo will handle the acquisition and renewal of TLS certificates automatically, which simplifies the management process.\n- Ensure that your DNS records are correctly configured and propagated for the Let's Encrypt validation to succeed.\n\n### Conclusion\nBy following these steps, you can successfully configure a custom domain in Choreo and manage TLS certificates using Let's Encrypt. This will enable secure communication for your services.\n\nFor more detailed information, you can refer to the official documentation: [Configure a Custom Domain for Your Organization](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-an-organization)."
Where will the added domain be listed in the Choreo Console?,"To find the list of added domains in the Choreo Console, you can follow these steps:\n\n1. In the Choreo Console header, click on the **Organization** list.\n2. In the left navigation menu, select **Settings**. This will take you to the organization-level settings page.\n3. Next, click on the **URL Settings** tab.\n4. Within the URL Settings, navigate to the **Active Domains** tab.\n\nIn the **Active Domains** tab, you will see the list of custom domains that have been added to your organization. This area displays all the active domains, and you can also perform actions related to these domains from here.\n\nFor more detailed instructions, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-an-organization)."
What happens to the Developer Portal customizations when I add a custom domain?,"When a custom domain is added for the Developer Portal in Choreo, the customization applied to the Developer Portal is implemented immediately. This means that after the custom domain setup is completed, you can access the organization’s Developer Portal using the newly added domain without any additional steps.\n\nTo summarize the process:\n\n1. **Immediate Application**: Customizations to the Developer Portal will take effect right after the custom domain is configured.\n\n2. **Access via Custom Domain**: You can access the Developer Portal through the custom domain you have set up.\n\nFor further details on adding a custom domain or managing the Developer Portal, you can refer to the documentation here: [Configure a Custom Domain for Your Organization](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-an-organization) and [Customize the Developer Portal](https://wso2.com/choreo/docs/administer/customize-the-developer-portal/)."
How can developers request to use available custom domains in Choreo?,"In Choreo, developers can request to use available custom domains for their components through a specific process that requires administrator approval. Here’s how it works:\n\n### Steps to Request a Custom Domain\n1. **Ensure Deployment**: Before requesting a custom domain, make sure that your component is deployed to the specific environment where you want to configure the custom URL.\n\n2. **Access Component Settings**:\n   - In the Choreo Console, navigate to the **Component Listing** pane.\n   - Click on the component for which you want to customize the URL.\n\n3. **Open URL Settings**:\n   - In the left navigation menu, select **Settings** to access the component-level settings page.\n   - Click on the **URL Settings** tab to view active deployments and check for available custom domains.\n\n4. **Edit URL Mapping**:\n   - If an active custom domain is available, the **Edit URL Mapping** icon will be enabled in the **Action** column for the corresponding environment.\n   - Click on the **Edit URL Mapping** icon to open the **URL Settings** dialog.\n\n5. **Request a Custom URL**:\n   - In the **URL Settings** dialog, select a domain from the drop-down menu to request a custom URL.\n   - If applicable, specify an appropriate context path in the **Path** field.\n   - Click **Configure** to submit your request. The request will remain in **Pending** status until an organization administrator approves it.\n\n### Administrator Approval\nOnce a developer submits a request for a custom URL, it will be listed under the **Pending URL Requests** tab in the organization-level settings page. An organization administrator can review and approve these requests, which will then enable the developer to use the configured custom domain for their component.\n\nFor further details, you can refer to the Choreo documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-url-for-a-component)."
What are the steps to request a custom URL for a component in Choreo?,"To request a custom URL for a component in Choreo, you need to follow these steps:\n\n### Steps to Request a Custom URL for a Component\n\n1. **Ensure Deployment**: Before requesting a custom domain, make sure that your component is deployed to the specific environment where you want to configure the custom URL.\n\n2. **Access Component Settings**:\n   - In the **Component Listing** pane, click on the component for which you want to customize the URL.\n\n3. **Open Settings**:\n   - In the left navigation menu, click on **Settings**. This will take you to the component-level settings page.\n\n4. **Check URL Settings**:\n   - Click on the **URL Settings** tab. Here, you will see the active deployments of your component across different environments and whether a custom URL is already configured. \n   - If there is an active custom domain available for configuration, the **Edit URL Mapping** icon will be enabled in the corresponding **Action** column.\n\n5. **Edit URL Mapping**:\n   - Click the **Edit URL Mapping** icon under the **Action** column for the respective environment. This will open the **URL Settings** dialog.\n\n6. **Select Domain**:\n   - In the **URL Settings** dialog, choose a domain from the drop-down list to configure your custom URL. \n   - If you are requesting a custom URL for an API, ensure to specify an appropriate context path in the **Path** field. You can edit the path as needed.\n\n7. **Configure the Custom URL**:\n   - Click **Configure** to create the custom URL mapping. This request will be visible under the **URL Settings** tab and will remain in the **Pending** status until it is approved by an organization administrator.\n\n### Additional Notes\n- The request for a custom URL will need to be approved by an organization administrator. Once approved, the invoke URL of the component will be updated to reflect the configured custom URL.\n\nFor more details, you can refer to the documentation here: [Configure a Custom URL for a Component](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-url-for-a-component)."
Where do I select the component from in the Choreo Console to request a custom URL?,"To request a custom URL for a component in the Choreo Console, follow these steps:\n\n1. **Check Deployment**: Ensure that your component is already deployed to the desired environment before making a request for a custom domain.\n\n2. **Select Your Component**: In the **Component Listing** pane, click on the component for which you want to customize the URL.\n\n3. **Access Settings**: In the left navigation menu, click on **Settings** to open the component-level settings page.\n\n4. **Navigate to URL Settings**: Click on the **URL Settings** tab. This will display the active deployments of your component across different environments, along with information on whether a custom URL is already configured.\n\n5. **Edit URL Mapping**: If an active custom domain is available for configuration, the **Edit URL Mapping** icon in the **Action** column will be enabled. Click on this icon to open the **URL Settings** dialog.\n\n6. **Request Custom URL**: In the **URL Settings** dialog, select an available domain from the **Domain** drop-down. If you are requesting a custom URL for an API, make sure to specify an appropriate context path in the **Path** field.\n\n7. **Confirm Configuration**: After selecting the domain and specifying the path, click **Configure**. This will create the custom URL mapping, which will initially be in **Pending** status until approved by an organization administrator.\n\nOnce your request is approved, the invoke URL of your component will be replaced with the configured custom URL.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-url-for-a-component)."
Where do I find the URL Settings for a component in the Choreo Console?,"Users can find the URL Settings for a component in the Choreo Console by following these steps:\n\n1. In the **Component Listing** pane, click on the component for which you want to customize the URL.\n2. In the left navigation menu, click **Settings**. This will open the component-level settings page.\n3. Click on the **URL Settings** tab. This tab displays the active deployments of the component across different environments and indicates whether a custom URL is configured.\n4. If an active custom domain is available, the **Edit URL Mapping** icon in the corresponding **Action** column will be enabled. You can click this icon to open the **URL Settings** dialog to specify values for requesting a custom URL.\n\nIn the **URL Settings** dialog, you can select a domain to configure a custom URL. If you want to set up a custom URL, make sure that the component is already deployed to the desired environment.\n\nFor further details, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-url-for-a-component)."
"What is the ""Edit URL Mapping"" icon and where do I find it?","The 'Edit URL Mapping' icon can be found in the **URL Settings** tab of the component-level settings page in the Choreo Console. Here’s how you can locate it:\n\n1. In the **Component Listing** pane, click on the component for which you want to customize the URL.\n2. In the left navigation menu, click **Settings** to open the component-level settings page.\n3. Click the **URL Settings** tab. This displays the active deployments of the component across different environments.\n4. If a custom domain is available to configure a custom URL for a component in a specific environment, the **Edit URL Mapping** icon in the corresponding **Action** column will be enabled.\n\n### Purpose of the 'Edit URL Mapping' Icon\nThe purpose of the 'Edit URL Mapping' icon is to allow developers to configure a custom URL for a component in a specific environment. Clicking this icon opens the **URL Settings** dialog, where you can select a domain and specify values to request for a custom URL. This is particularly useful when you want to use a more user-friendly or branded URL for your service.\n\nFor more detailed information, you can refer to the [Configure a Custom Domain for Your Organization](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-url-for-a-component) documentation."
"What options are available in the ""URL Settings"" dialog when requesting a custom URL?","When requesting a custom URL for a component in Choreo, the 'URL Settings' dialog provides the following options:\n\n1. **Domain Selection**: You can select a domain from the **Domain** drop-down menu. This menu lists all available domains that can be configured for the component.\n\n2. **Path Field**: If you are requesting a custom URL for an API, you must specify an appropriate context path in the **Path** field. The **Path** field will display the default context path, which you can edit according to your preferences.\n\n3. **Configure Button**: After selecting the domain and specifying the path, you click the **Configure** button to create the custom URL mapping. \n\nOnce the mapping is created, it will appear under the **URL Settings** tab, and the request will remain in a **Pending** status until an organization administrator approves it.\n\nFor more details, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-url-for-a-component)."
What is a context path and why is it needed for APIs when configuring a custom URL?,"A **context path** in API configuration is a specific segment of the URL that is used for routing purposes. It defines a base path that precedes the endpoint for the API, allowing multiple services or endpoints to coexist under the same domain without conflict. The context path is particularly important when setting up a custom URL because it helps to uniquely identify the API's entry point within the broader context of the application or service.\n\nWhen configuring a custom URL for your component in Choreo, you need to specify an appropriate context path in the **Path** field. This context path serves as a namespace for your API, helping to organize and manage the various endpoints that may be exposed by your service. For example, if you have multiple APIs under the same domain, each can have a different context path, thus avoiding any potential URL conflicts.\n\nHere are some key points regarding the context path and its importance:\n\n- **Routing**: The context path directs incoming requests to the appropriate service or endpoint, facilitating proper routing within your application.\n- **Organization**: It helps in organizing APIs logically, especially when multiple APIs are available under the same domain.\n- **Custom URL Configuration**: When you set up a custom URL, the context path must be provided to ensure that the API can be accessed correctly.\n\nTo configure a custom URL for your component, follow the steps in the Choreo Console, where you specify the context path as part of the URL settings.\n\nFor more detailed guidance, refer to the documentation on configuring a custom URL for components: [Configure a Custom URL for a Component](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-url-for-a-component)."
"What happens after I click ""Configure"" when requesting a custom URL?","When you click 'Configure' after requesting a custom URL for your component in Choreo, the following process occurs:\n\n1. **Custom URL Mapping Creation**: Clicking 'Configure' creates a custom URL mapping for the specified component. This mapping will link the selected custom domain and the path you specified.\n\n2. **Pending Status**: Immediately after the configuration, the status of your custom URL request will change to **Pending**. This indicates that the request is awaiting approval from an organization administrator.\n\n3. **Visibility of Request**: The custom URL request can be viewed under the **URL Settings** tab of the component's settings page. Until the administrator approves the request, it remains in the Pending state.\n\n4. **Administrator Approval**: Once the administrator reviews and approves the custom URL request, the invoke URL of the component will be replaced with the newly configured custom URL.\n\nThis entire process allows for effective branding and discoverability of the component through the requested custom URL.\n\nFor more detailed information, you can refer to the [Choreo documentation on configuring a custom URL for a component](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-url-for-a-component)."
"What does ""Pending"" status mean for a custom URL request?","In Choreo, when a custom URL request is marked with a **Pending** status, it indicates that the request has been successfully submitted by a developer but has not yet been approved by an organization administrator. \n\nHere’s a brief overview of the process:\n\n1. **Request Submission**: After a developer requests a custom URL for a component, this request will be recorded in the system.\n2. **Pending Status**: The custom URL request will remain in the **Pending** status until an organization administrator reviews and approves it.\n3. **Approval Process**: Once approved, the custom URL mapping will become active, and the invoke URL of the component will be updated accordingly.\n\nThe **Pending** status serves as a notification that action is required from an administrator to finalize the custom URL configuration. \n\nIf you need more detailed information about the custom URL request process, you can refer to the documentation here: [Configure a custom URL for a component](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-url-for-a-component)."
How do I approve a custom URL mapping in Choreo?,"To approve a custom URL mapping in Choreo, you need to have organization administrator privileges. Here are the steps you should follow:\n\n1. **Access the Organization Settings**: In the Choreo Console, click on the **Organization** list in the header.\n2. **Go to Settings**: In the left navigation menu, click on **Settings**. This will open the organization-level settings page.\n3. **Navigate to URL Settings**: Click on the **URL Settings** tab, and then proceed to the **Pending URL Requests** tab. Here, you will find all the pending URL mapping requests made by developers.\n4. **Select the Request to Approve**: Locate the custom URL request you wish to approve and click on the corresponding **Approve URL Mapping** icon under the **Action** column.\n5. **Review the Details**: Carefully review the details of the request and then click **Approve**.\n\nOnce the request is approved, the invoke URL of the component will be replaced with the configured custom URL.\n\nFor more details, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-url-for-a-component)."
Where do I navigate to approve pending URL requests in the Choreo Console?,"To approve pending URL requests in the Choreo Console, you need to follow these steps:\n\n1. In the Choreo Console header, click on the **Organization** list and select your organization.\n2. In the left navigation menu, click on **Settings**. This will take you to the organization-level settings page.\n3. Click on the **URL Settings** tab.\n4. Then, click on the **Pending URL Requests** tab. Here, you will see all the pending URL mapping requests submitted by developers.\n5. Locate the custom URL request you want to approve and click the corresponding **Approve URL Mapping** icon under the **Action** column.\n6. Review the details of the request and click **Approve**.\n\nOnce approved, the invoke URL of the component will be replaced with the configured custom URL.\n\nFor more detailed information, you can refer to the official documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-url-for-a-component)."
"What is the ""Approve URL Mapping"" icon and where do I find it?","The 'Approve URL Mapping' icon in the Choreo Console is an action button that allows organization administrators to approve custom URL mapping requests submitted by developers. \n\n### Location of the 'Approve URL Mapping' Icon:\nYou can find the 'Approve URL Mapping' icon in the following steps:\n\n1. In the Choreo Console, navigate to the **Organization** list in the header and select your organization.\n2. In the left navigation menu, click on **Settings** to open the organization-level settings page.\n3. Click on the **URL Settings** tab.\n4. Then, click the **Pending URL Requests** tab to view all pending URL mapping requests submitted by developers.\n5. Locate the custom URL mapping request you want to approve, and you will see the 'Approve URL Mapping' icon in the corresponding **Action** column.\n\n### Functionality of the Icon:\n- When you click on the 'Approve URL Mapping' icon, it allows you to review the details of the custom URL request. \n- After reviewing, you can click **Approve** to finalize the approval. Once approved, the invoke URL of the component will be replaced with the newly configured custom URL.\n\nIt's important to note that only users with organization administrator privileges can approve custom URL mapping requests.\n\nFor more detailed instructions, you can refer to the documentation here: [Approve a custom URL request](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-url-for-a-component)."
What details should I review before approving a custom URL request?,"When reviewing and approving a custom URL request in Choreo, there are several guidelines and requirements to consider:\n\n1. **Deployment Status**: Ensure that the component for which the custom URL is being requested is already deployed to the specific environment. Custom URL requests can only be made for deployed components.\n\n2. **Pending Requests**: You will find the custom URL requests listed under the **URL Settings** tab in the organization-level settings page. Make sure to review all pending requests carefully.\n\n3. **Approval Permissions**: Only users with organization administrator privileges can approve custom URL requests. Ensure that the person reviewing the request has the necessary permissions:\n   - **WORKFLOW-MANAGEMENT**: This permission allows the administrator to approve custom URL requests.\n   - **PROJECT-MANAGEMENT**: This permission provides access to view and approve workflow requests.\n\n4. **Review Details**: When approving a custom URL request, review the details of the request thoroughly. This includes checking the proposed custom URL against any organizational policies or naming conventions.\n\n5. **Naming Conventions**: Ensure the custom URL adheres to best practices for naming, such as:\n   - Paths should be in `kebab-case` (e.g., `/user-info`).\n   - Paths must not include file extensions (e.g., `.json` or `.xml`).\n   - Avoid including HTTP verbs in the path.\n\n6. **Approval Process**: To approve a request, locate the corresponding **Approve URL Mapping** icon under the **Action** column for the custom URL request, review the details, and then click **Approve**. \n\nUpon approval, the invoke URL of the component will be replaced with the configured custom URL, making it available for use.\n\nFor more detailed information, you can refer to the [Choreo documentation on configuring a custom URL for a component](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-url-for-a-component)."
"What happens after I click ""Approve"" when approving a custom URL request?","After clicking 'Approve' for a custom URL request in Choreo, the following happens:\n\n1. The request, which was previously in a ""Pending"" status, is approved by the organization administrator.\n2. Once the approval is confirmed, the invoke URL of the component is replaced with the newly configured custom URL. This means that the component will now be accessible via the custom URL instead of the default URL.\n3. The configured custom domain is now utilized for the component, allowing it to be accessed through the custom URL as intended.\n\nThis process ensures that the developers' requests for custom URLs are reviewed and approved, maintaining control over the custom domain configurations within the organization.\n\nFor more details, you can refer to the documentation on [approving a custom URL request](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-url-for-a-component)."
What happens to the component's invoke URL upon approval of a custom URL request?,"When a custom URL request for a component is approved in Choreo, the following change occurs:\n\n- The invoke URL of the component is replaced with the configured custom URL. This means that the original default URL, which follows the structure `<domain>/<project-name>/<component-name>`, will now point to the new custom URL that was set up during the approval process.\n\nTo summarize, the approval of a custom URL request effectively updates the component's invocation mechanism, allowing it to be accessed via a more user-friendly or branded URL rather than the default format.\n\nFor more detailed information on how to configure a custom URL and the approval process, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-url-for-a-component)."
What is Choreo's built-in identity provider (IdP) and what is it used for?,"Choreo's built-in identity provider (IdP) is a feature that allows developers to manage user authentication and authorization within their applications. It is particularly useful for testing purposes, enabling developers to set up test users and groups directly in Choreo. This built-in IdP supports basic user management, such as adding users with attributes and assigning them to groups.\n\nHowever, it is important to note that while the built-in IdP provides user management capabilities, it is not recommended for production use due to its limited functionality. It primarily facilitates experimentation and development rather than serving as a robust identity management solution.\n\nTo configure a user store with the built-in IdP, you can follow a series of steps provided in the Choreo documentation. These steps include navigating to the organization settings in the Choreo Console, managing the identity provider, and uploading a user store template file to create a user store with the desired user attributes.\n\nFor more details on how to configure a user store with Choreo's built-in IdP, you can refer to the documentation here: [Configure a User Store with the Built-In Identity Provider](https://wso2.com/choreo/docs/administer/configure-a-user-store-with-built-in-idp/)."
Is the Choreo built-in IdP recommended for production use?,"The Choreo built-in Identity Provider (IdP) is primarily designed for testing and experimentation purposes. While it allows you to set up test users and groups, its capabilities for user management are limited to adding users with basic attributes and groups. Therefore, it is **not recommended for use in production environments** due to these limitations.\n\nIf you are considering using an identity provider in a production setting, it would be more advisable to integrate with external identity providers that support OpenID Connect (OIDC) or OAuth 2.0, which can offer more robust authentication and authorization features.\n\nFor further details, you can refer to the documentation on configuring a user store with the built-in IdP: [Configure a User Store with the Built-In Identity Provider](https://wso2.com/choreo/docs/administer/configure-a-user-store-with-built-in-idp/)."
What are the prerequisites for configuring a Choreo built-in IdP user store?,"To configure a Choreo built-in Identity Provider (IdP) user store, you need to meet the following prerequisite:\n\n- **Administrator Rights**: You must have administrator rights to your Choreo organization. This permission is essential to configure a user store with the built-in IdP.\n\nHaving the necessary administrative privileges will enable you to access the settings required for configuring the user store.\n\nFor detailed steps on configuring a user store with the built-in IdP, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-user-store-with-built-in-idp/#prerequisites)."
What level of access is required to configure a Choreo built-in IdP user store?,"To configure a Choreo built-in Identity Provider (IdP) user store, you need to have **administrator rights** to your Choreo organization. This level of access is essential for setting up and managing the user store effectively.\n\nHere's a brief overview of the steps involved in configuring the user store once you have the necessary permissions:\n\n1. Navigate to the **Organization** settings from the top menu in the Choreo Console.\n2. Go to the **Application Security** section and click on the **Identity Providers** tab.\n3. From there, you can manage the Choreo Built-in Identity Provider and set up the user store according to your requirements.\n\nFor more detailed steps, you can refer to the official documentation here: [Configure a User Store with the Built-In Identity Provider](https://wso2.com/choreo/docs/administer/configure-a-user-store-with-built-in-idp/#prerequisites)."
Where do I navigate to configure the Choreo built-in IdP user store in the Choreo Console?,"To configure the Choreo built-in IdP user store within the Choreo Console, follow these steps:\n\n1. In the Choreo Console top navigation menu, click on the **Organization** list and select your organization.\n2. In the left navigation menu, click on **Settings**. This will take you to your organization settings.\n3. Click on the **Application Security** tab and then navigate to the **Identity Providers** tab.\n4. On the **Identity Providers** tab, find the **Choreo Built-in Identity Provider** pane and click **Manage**.\n5. In the Manage IdP pane, choose the specific environment tab where you want to configure the built-in IdP user store.\n6. You can download the sample **User store template file (.csv)** from the **User Store** section. The template should look like this:\n   ```csv\n   username,password,groups,first_name,last_name,email\n   ""demouser"",""password1"",""[manager, engineering]"",""John"",""Doe"",""john@acme.org""\n   ```\n   This template includes a sample user with associated attributes. You can add new users by inserting additional rows into the `.csv` file and include more user attributes by adding columns as needed.\n7. Fill in the appropriate user details in the template file and save it.\n8. Select the saved template file and click **Upload**. This successful upload will create the user store and display the configured users in the **Users** section.\n\nMake sure you have the necessary administrator rights to perform these actions. \n\nFor more detailed information, you can refer to the documentation here: [Configure a User Store with the Built-In Identity Provider](https://wso2.com/choreo/docs/administer/configure-a-user-store-with-built-in-idp/#configure-a-choreo-built-in-idp-user-store)."
"What is the ""Choreo Built-in Identity Provider"" pane and where do I find it?","The ""Choreo Built-in Identity Provider"" pane is a feature in the Choreo platform that allows developers to manage user authentication and authorization within their applications. This built-in identity provider (IdP) enables you to set up test users and groups, making it easier to experiment with user management and authentication processes.\n\nYou can find the ""Choreo Built-in Identity Provider"" pane within the Choreo Console by following these steps:\n\n1. In the Choreo Console top navigation menu, click on the **Organization** list and select your organization.\n2. In the left navigation menu, click **Settings** to access your organization settings.\n3. Click on the **Application Security** tab, then navigate to the **Identity Providers** tab.\n4. In this section, you will see the ""Choreo Built-in Identity Provider"" pane. Click **Manage** to access the management options for the built-in IdP.\n\nIt's important to note that while the built-in IdP provides user management features, it is primarily designed for testing and development purposes. It is not recommended for use in production environments due to its limitations in user management capabilities.\n\nFor more detailed guidance, you can refer to the documentation here: [Configure a User Store with the Built-In Identity Provider](https://wso2.com/choreo/docs/administer/configure-a-user-store-with-built-in-idp/)."
What is the purpose of the sample User store template file (.csv)?,"The sample User store template file (.csv) in Choreo serves as a foundational resource for configuring a built-in identity provider (IdP) user store. This template allows you to easily define user attributes and groups for authentication and authorization testing within your applications.\n\n### Purpose of the Sample User Store Template:\n\n1. **User Management**: The template provides a predefined structure to add users with specific attributes such as username, password, groups, first name, last name, and email. This is essential for setting up test users in your development environment.\n\n2. **Customization**: You can modify the template to include additional users by inserting more rows and can expand user attributes by adding more columns as necessary. This flexibility supports various testing scenarios.\n\n3. **Testing Authentication**: By using this template, developers can experiment with user authentication processes, allowing for effective testing of applications that require user login and management functionalities.\n\n4. **Seamless Integration**: The CSV format ensures that you can upload the information directly into the Choreo console, creating the user store with the configured users and their attributes.\n\n### Example of Template Content:\nThe content of the sample template file looks like this:\n\n```csv\nusername,password,groups,first_name,last_name,email\n""demouser"",""password1"",""[manager, engineering]"",""John"",""Doe"",""john@acme.org""\n```\n\nYou can download the template file and edit it to suit your requirements before uploading it back to Choreo to create your user store.\n\nFor more detailed information on configuring a user store with Choreo's built-in IdP, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-user-store-with-built-in-idp/#configure-a-choreo-built-in-idp-user-store)."
Where can I download the sample User store template file (.csv)?,"To find or download a sample User store template file in CSV format in Choreo, follow these steps:\n\n1. In the Choreo Console, navigate to your organization settings by clicking on the **Organization** list and selecting your organization.\n2. In the left navigation menu, click on **Settings**.\n3. Go to the **Application Security** tab and then click on the **Identity Providers** tab.\n4. Click **Manage** in the **Choreo Built-in Identity Provider** pane.\n5. In the Manage IdP pane, select the appropriate environment tab where you want to configure the user store.\n6. Look for the **User Store** section where you will find an option to download the sample **User store template file (.csv)**.\n\nThe template file will look similar to this:\n\n```csv\nusername,password,groups,first_name,last_name,email\n""demouser"",""password1"",""[manager, engineering]"",""John"",""Doe"",""john@acme.org""\n```\n\nYou can add new users by inserting additional rows and include more user attributes by adding columns as needed in the CSV file. Once you have edited the file with the appropriate user details, you can upload it back to create the user store.\n\nFor more detailed instructions, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-user-store-with-built-in-idp/#configure-a-choreo-built-in-idp-user-store)."
What information should I specify in the User store template file (.csv)?,"To configure a User store with the Choreo built-in Identity Provider (IdP), you need to prepare a User store template file in CSV format. The required fields in the CSV file are as follows:\n\n### Required Fields\n1. **username**: The unique identifier for the user.\n2. **password**: The user's password.\n3. **groups**: A list of groups the user belongs to, enclosed in square brackets and separated by commas (e.g., `[manager, engineering]`).\n4. **first_name**: The user's first name.\n5. **last_name**: The user's last name.\n6. **email**: The user's email address.\n\n### Sample Format\nHere’s an example of how the CSV content should look:\n\n```csv\nusername,password,groups,first_name,last_name,email\n""demouser"",""password1"",""[manager, engineering]"",""John"",""Doe"",""john@acme.org""\n```\n\n### Additional Notes\n- To add more users, you can insert additional rows in the CSV file.\n- If you need to include more user attributes, you can add additional columns as required.\n\nOnce you have prepared the CSV file with the necessary information, you can upload it to create the user store within the Choreo console.\n\nFor more detailed information, you can refer to the official documentation [here](https://wso2.com/choreo/docs/administer/configure-a-user-store-with-built-in-idp/#configure-a-choreo-built-in-idp-user-store)."
How do I upload the User store template file (.csv) in the Choreo Console?,"To upload a User store template file (.csv) in the Choreo Console, follow these detailed steps:\n\n1. **Access Organization Settings**:\n   - In the Choreo Console top navigation menu, click the **Organization** list and select your organization.\n\n2. **Navigate to Identity Providers**:\n   - In the left navigation menu, click **Settings** to access your organization settings.\n   - Click on the **Application Security** tab, followed by the **Identity Providers** tab.\n\n3. **Manage the Identity Provider**:\n   - In the **Identity Providers** tab, click **Manage** in the **Choreo Built-in Identity Provider** pane.\n\n4. **Select Environment**:\n   - In the Manage IdP pane, choose the appropriate environment tab where you want to configure the built-in IdP user store.\n\n5. **Download User Store Template**:\n   - In the **User Store** section, you can download a sample **User store template file (.csv)**. The content of the template file should look similar to this:\n     ```csv\n     username,password,groups,first_name,last_name,email\n     ""demouser"",""password1"",""[manager, engineering]"",""John"",""Doe"",""john@acme.org""\n     ```\n   - Note: The provided template includes a sample user with associated attributes. You can add more users by inserting additional rows in the `.csv` file and include more user attributes by adding additional columns as necessary.\n\n6. **Edit the Template File**:\n   - Specify the appropriate user details in the template file that you've downloaded and save the changes.\n\n7. **Upload the Template File**:\n   - After saving the modified template file, select it and click the **Upload** button. A successful upload will create the user store and display the configured users in the **Users** section.\n\nMake sure you have the necessary administrator rights to perform these actions. For further details, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-user-store-with-built-in-idp/#configure-a-choreo-built-in-idp-user-store)."
What is the purpose of configuring approvals for Choreo workflows?,"Configuring approval workflows in Choreo serves a crucial purpose in managing and controlling critical or sensitive changes within the platform. Here are the main reasons for setting up approval processes:\n\n1. **Control Over Critical Changes**: Approval workflows help ensure that modifications to workflows, especially those pertaining to environment promotions and API subscriptions, are reviewed and authorized by designated users. This is particularly important in production environments where unauthorized changes could lead to significant issues.\n\n2. **Environment Promotion**: By configuring approvals for environment promotions, authorized users can manage which components are promoted to critical or production environments. This adds a layer of security and oversight, preventing unintended changes that could disrupt operations.\n\n3. **API Subscription Management**: For API subscriptions, the approval process allows administrators to create subscription plans that require approval before activation. This ensures that access to APIs is controlled, and subscriptions are only granted following an administrative review, thereby maintaining governance over API usage.\n\n4. **Defined Roles and Responsibilities**: Administrators can assign specific roles and assignees to review and respond to approval requests. This delegation helps streamline the approval process while ensuring that the right individuals are responsible for oversight.\n\n5. **Notifications and Tracking**: The system notifies users assigned as reviewers when approval requests are submitted, enabling them to take timely actions. Additionally, approved requests are recorded, providing a history of decisions made regarding workflows.\n\nIn summary, configuring approval workflows is essential for maintaining control over sensitive operations in Choreo, ensuring that only authorized changes are made, and facilitating proper management of API access.\n\nFor more detailed information, you can refer to the documentation on [Configure Approvals for Choreo Workflows](https://wso2.com/choreo/docs/administer/configure-approvals-for-choreo-workflows/)."
What types of workflows can have approval processes configured in Choreo?,"In Choreo, approval processes are supported for two specific types of workflows:\n\n1. **Environment Promotion Workflows**: This allows authorized users to control which components are promoted to critical or production environments. An approval process ensures that any promotion of components is properly reviewed and authorized.\n\n2. **API Subscription Workflows**: This allows the creation of subscription plans that require approval before they can be activated. This feature helps in controlling access to APIs by necessitating administrative review and authorization of subscription requests.\n\nThese approval processes help ensure that critical changes are managed effectively within the platform.\n\nFor more detailed information, you can refer to the following documentation: [Configure Approvals for Choreo Workflows](https://wso2.com/choreo/docs/administer/configure-approvals-for-choreo-workflows/)."
What permissions are required to review and respond to environment promotion approval requests?,"To review and respond to environment promotion approval requests in Choreo, a user must have specific permissions set by the administrators. The required permissions are as follows:\n\n1. **WORKFLOW-MANAGEMENT**:\n   - **Approve component promotion requests**: This permission grants access to review and approve the promotion of components to critical environments.\n\n2. **PROJECT-MANAGEMENT**:\n   - This permission grants access to view and approve workflow requests. It is the same permission used to update or delete projects.\n\nAdministrators should ensure that users designated to review and respond to these approval requests have the above permissions configured correctly.\n\nFor more detailed information, you can refer to the documentation on [permissions to review and respond to approval requests](https://wso2.com/choreo/docs/administer/configure-approvals-for-choreo-workflows/#permissions-to-review-and-respond-to-approval-requests)."
What permissions are required to review and respond to API subscription approval requests?,"To review and respond to API subscription approval requests in Choreo, a user must have the following permissions:\n\n1. **WORKFLOW-MANAGEMENT**:\n   - **Approve API subscriptions**: This permission grants access to review and approve API subscription workflow requests.\n\n2. **PROJECT-MANAGEMENT**:\n   - This permission allows the user to view and approve workflow requests. It is the same permission used for updating or deleting projects.\n\nIt is important for administrators to ensure that users designated to review and respond to these approval requests have the necessary permissions configured properly. \n\nFor more detailed information, you can refer to the documentation here: [Permissions to review and respond to approval requests](https://wso2.com/choreo/docs/administer/configure-approvals-for-choreo-workflows/#permissions-to-review-and-respond-to-approval-requests)."
Where do I navigate to set up an approval process for a workflow in the Choreo Console?,"To set up an approval process for a workflow in the Choreo Console, follow these steps:\n\n1. **Select Your Organization**: In the Choreo Console header, go to the **Organization** list and select your organization.\n\n2. **Access Settings**: In the left navigation menu, click on **Settings**. This will open the organization-level settings page.\n\n3. **Navigate to Workflows**: Click on the **Workflows** tab to view the list of workflows.\n\n4. **Edit the Desired Workflow**: Locate the workflow for which you want to configure an approval process and click the edit icon next to it.\n\n5. **Configure Roles and Assignees**: In the **Configure Workflow** dialog that opens:\n   - In the **Roles** field, select one or more roles. Users assigned to these roles can review and respond to approval requests.\n   - In the **Assignees** field, select specific users who can review and approve workflow requests. These can be any Choreo users, regardless of their roles.\n\n6. **Save Your Configuration**: Click **Save** to enable the approval process for the workflow.\n\nPlease note that you must have administrator privileges to configure workflow approvals, and there is currently no validation to ensure that the specified roles and assignees have the necessary permissions to review and respond to requests.\n\nFor more details on configuring approvals, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-approvals-for-choreo-workflows/#set-up-an-approval-process-for-a-workflow)."
What is the edit icon for a workflow and where do I find it?,"In the Choreo Console, you can find the edit icon for a workflow in the following way:\n\n1. Go to the **Settings** section by clicking on it in the left navigation menu.\n2. Click on the **Workflows** tab to view the list of workflows.\n3. Locate the specific workflow you want to edit.\n4. The edit icon will be displayed next to the workflow's name. \n\nThe edit icon typically appears as a pencil symbol (✏️), indicating that you can click on it to modify the workflow settings.\n\nFor further details on configuring approvals for workflows, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-approvals-for-choreo-workflows/#set-up-an-approval-process-for-a-workflow)."
What information do I need to select when setting up an approval process for a workflow?,"To configure an approval process for a workflow in Choreo, you need to provide specific information and complete several steps. Here’s a comprehensive breakdown of the required fields and information:\n\n### Required Information to Configure Approval Process\n\n1. **Roles**:\n   - You need to select one or more roles that will be responsible for reviewing and responding to workflow approval requests. Any user assigned to these roles can approve or reject requests.\n\n2. **Assignees**:\n   - Specify individual users who can review and approve the workflow requests. Assignees can be any Choreo user, even if they are not assigned to a selected role.\n\n### Steps to Set Up Approval Process\n\n1. **Administrator Privileges**: \n   - Ensure you have administrator privileges in Choreo, as only administrators can configure workflow approvals.\n\n2. **Access Organization Settings**:\n   - In the Choreo Console, go to the **Organization** list and select your organization.\n\n3. **Navigate to Workflow Settings**:\n   - Click on **Settings** in the left navigation menu and then go to the **Workflows** tab.\n\n4. **Edit Workflow**:\n   - Click the edit icon next to the workflow you want to configure for approval.\n\n5. **Configure Approval Fields**:\n   - In the **Configure Workflow** dialog:\n     - Select the roles in the **Roles** field.\n     - Select users in the **Assignees** field.\n\n6. **Save Changes**:\n   - Click **Save** to enable the approval process for the workflow.\n\n### Important Considerations\n\n- **Permission Validation**: Currently, there is no validation to ensure that the specified roles and assignees have the necessary permissions to review and respond to requests. Administrators must ensure that the required permissions are correctly configured for those designated to approve requests.\n\nFor more detailed information on configuring approvals for workflows, you can refer to the official documentation here: [Configure Approvals for Choreo Workflows](https://wso2.com/choreo/docs/administer/configure-approvals-for-choreo-workflows/#set-up-an-approval-process-for-a-workflow)."
"What happens after I click ""Save"" when setting up an approval process for a workflow?","After clicking 'Save' while setting up an approval process for a workflow in Choreo, the following steps and processes are initiated:\n\n1. **Configuration Activation**: The approval process for the selected workflow is configured and enabled. This means that any actions taken within this workflow will now require approval as per the roles and assignees designated during the setup.\n\n2. **Notification to Assignees**: After the approval process is enabled, all authorized assignees are notified via email about the approval requirements for the workflow. They will receive notifications whenever a request for approval is submitted.\n\n3. **Submission of Requests**: For workflows that require approval (such as environment promotion or API subscription), developers or users must submit a request for approval to proceed with the associated tasks. This involves the users initiating the approval request through the workflow.\n\n4. **Review Process**: Once a request is submitted, the authorized assignees are responsible for reviewing the request. They can either approve or reject it based on the details of the request. Users who submitted the request will receive email notifications regarding the decision made by the assignees.\n\n5. **Approval or Rejection**: The authorized approvers have the option to approve or reject the workflow approval request. Upon making a decision, the submitter of the request is notified of the outcome via email.\n\nFor more detailed information, you can refer to the following links from the documentation:\n- [Configure Approvals for Choreo Workflows](https://wso2.com/choreo/docs/administer/configure-approvals-for-choreo-workflows/#set-up-an-approval-process-for-a-workflow)\n- [Submit and Manage Workflow Approval Requests](https://wso2.com/choreo/docs/develop-components/submit-and-manage-workflow-approval-requests/)"
What is enterprise login and how does it benefit users in Choreo?,"Enterprise login in the context of Choreo allows users from an external identity provider (IdP) to sign in seamlessly to the Choreo platform without having to change their existing credentials. This integration enhances user experience by enabling organizations to leverage their existing authentication systems, making the login process smoother and more secure.\n\n### Benefits of Enterprise Login in Choreo:\n1. **Seamless Access**: Users can log in using their enterprise credentials, which eliminates the need to remember additional passwords or change existing ones.\n   \n2. **Centralized Identity Management**: Organizations can manage user identities through their preferred IdP, ensuring consistent access control and security policies across the enterprise.\n\n3. **Enhanced Security**: By integrating with external IdPs, organizations can benefit from their security measures, such as multi-factor authentication (MFA) and other advanced security features.\n\n4. **Role-Based Access Control**: Choreo allows for the configuration of role-based access control for users authenticated through enterprise login, ensuring that users have appropriate permissions based on their roles within the organization.\n\n5. **Easier Administration**: Administrators can manage user access and permissions centrally, reducing the overhead of managing multiple accounts and improving compliance with organizational policies.\n\nTo configure enterprise login for your organization in Choreo, you would typically need to follow these steps:\n- Ensure you have a valid email domain for your organization.\n- If you already have a support account, contact the support team with your organization name and email domains. If not, request support through email.\n- Once configured, users from your IdP will be able to sign in using their enterprise credentials.\n\nFor more detailed instructions on how to set up enterprise login, you can refer to the documentation here: [Configure Enterprise Login](https://wso2.com/choreo/docs/administer/configure-enterprise-login/)."
What are the prerequisites for configuring enterprise login in Choreo?,"To configure enterprise login in Choreo, there are a few prerequisites you need to fulfill:\n\n1. **Valid Email Domain**: Ensure that you have a valid email domain for your organization.\n\n2. **Access to Choreo Console**: You need to access the Choreo Console via your Google, GitHub, or Microsoft account. If you are a new user, you should create an organization with a unique organization name.\n\nThese prerequisites are essential for proceeding with the configuration of enterprise login for your organization.\n\nFor more detailed information, you can refer to the official documentation here: [Configure Enterprise Login - Prerequisites](https://wso2.com/choreo/docs/administer/configure-enterprise-login/#prerequisites)."
What information do I need to provide to Choreo support to configure enterprise login?,"To configure enterprise login for your organization in Choreo, you will need to gather and provide specific information. Here are the details required:\n\n1. **Organization Name/Handle**: This is the unique name or handle for your organization. For example, you might use ""Stark Industries"" or ""starkindustries"".\n\n2. **Email Domains**: You need to specify the email domains associated with your organization. This can include multiple domains, such as:\n   - `@stark.com`\n   - `@starkindustries.com`\n   - `@stark.eu`\n\n### Steps to Configure Enterprise Login\n\n- **If you already have a support account with Choreo**: You can submit a request through the support portal, including your organization name and the specific email domains.\n\n- **If you do not have a support account**: You will need to send an email to `choreo-help@wso2.com` requesting to enable enterprise login for your organization. Ensure your email includes the required information.\n\nHere’s a sample email format you can use:\n\n```\nSubject: [Stark Industries] Configure enterprise login\n\nHi CS team,\n\nI need to configure enterprise login for my organization. Can you please do the necessary configurations to proceed? \n\nMy organization details are as follows:\n- Organization name: Stark Industries\n- Organization handle: starkindustries\n- Email domains specific to my organization: ""@stark.com"", ""@starkindustries.com"", and ""@stark.eu""\n\nThank you.\n```\n\nAfter your request is processed, the Choreo support team will configure the necessary settings and provide you with a verification code. You will then need to configure the DNS record for your email domain with specific values provided by the support team.\n\nFor detailed instructions on configuring enterprise login, you can refer to the official documentation here: [Configure Enterprise Login](https://wso2.com/choreo/docs/administer/configure-enterprise-login/#configure-enterprise-login-for-your-choreo-organization)."
What is a DNS record verification code and how is it used for enterprise login?,"I'm sorry, but I can only assist with questions related to Choreo. Could you please clarify or ask a question related to Choreo?"
What is Asgardeo and how does it relate to enterprise login in Choreo?,"Asgardeo plays a significant role in facilitating enterprise login and identity management within Choreo. It serves as an external identity provider (IdP) that streamlines the authentication process for users accessing Choreo applications.\n\n### Key Functions of Asgardeo in Choreo:\n\n1. **Seamless Integration**:\n   - Asgardeo integrates with Choreo to provide a unified authentication experience, allowing users to log in using their enterprise credentials. This integration helps maintain security while simplifying the user experience.\n\n2. **Role-Based Access Control (RBAC)**:\n   - Asgardeo allows for role-based access control, which means that permissions can be managed based on user roles defined in an external identity provider. By configuring RBAC, organizations can ensure that users have appropriate access levels to Choreo resources based on their roles in the enterprise.\n\n3. **Configuration Steps**:\n   - To set up Asgardeo as an external IdP in Choreo, the following steps are typically involved:\n     1. **Configure the Identity Provider**: Organizations need to configure their external IdP in Asgardeo, selecting protocols such as OpenID Connect or SAML.\n     2. **Set Up User Attributes**: It's essential to manage user attributes, including group or role information, to ensure proper mappings in Choreo.\n     3. **Map Groups**: After setting up Asgardeo, organizations can map Choreo groups to IdP groups, which allows for efficient user management and access control.\n\n4. **API Access Control**:\n   - Asgardeo facilitates API access management through the use of API scopes. This feature restricts API access to designated user groups based on their roles. This means that organizations can control what actions authenticated users can perform within the Choreo environment.\n\n5. **Enterprise Identity Federation**:\n   - When an organization is created in Choreo, it is automatically provisioned with a corresponding entity in Asgardeo. This allows organizations to bring their own identity, ensuring that users can authenticate using their existing enterprise credentials.\n\n### Summary\nBy utilizing Asgardeo, organizations can enhance their identity management capabilities within Choreo, streamline the login process for users, and enforce robust access control mechanisms based on user roles and permissions.\n\nFor further details on setting up and configuring Asgardeo as an external IdP in Choreo, you can refer to the following documentation:\n- [Configure Asgardeo as an External Identity Provider (IdP)](https://wso2.com/choreo/docs/administer/configure-an-external-idp/configure-asgardeo-as-an-external-idp/)\n- [Configure Enterprise Login](https://wso2.com/choreo/docs/administer/configure-enterprise-login/#configure-role-based-access-control-for-enterprise-login)"
What is a federated enterprise IdP and how do I configure it in Asgardeo for Choreo?,"A federated enterprise Identity Provider (IdP) allows organizations to use their existing identity management systems to authenticate users in applications like Choreo. By configuring a federated IdP, users can sign in to Choreo using their enterprise credentials, streamlining the login process and enhancing security.\n\nTo configure a federated enterprise IdP in Asgardeo for Choreo, you can follow these steps:\n\n1. **Sign in to Asgardeo**: Access your Asgardeo account.\n\n2. **Configure the federated IdP**:\n   - Follow the instructions in the [Asgardeo documentation on adding standard-based login](https://wso2.com/asgardeo/docs/guides/authentication/enterprise-login/) to set up your enterprise IdP.\n\n3. **Manage Applications**:\n   - In the Asgardeo Console, navigate to the **Applications** section.\n   - You should see an application named **WSO2_LOGIN_FOR_CHOREO_CONSOLE**. Click on it to edit.\n\n4. **Set up the Sign-in Method**:\n   - Click on the **Sign-in Method** tab to view the configured connection.\n   - Ensure that the necessary protocols (OpenID Connect or SAML) are set up correctly for your IdP.\n\n5. **User Attributes**:\n   - Go to the **User Attributes** tab.\n   - Ensure that the **Groups** attribute is selected and marked as requested.\n\nOnce the above steps are completed, users from your enterprise IdP can sign in to the Choreo Console using their enterprise IDs.\n\nFor further details, you can refer to the following documentation:\n- [Bring your own identity to Choreo](https://wso2.com/choreo/docs/administer/configure-enterprise-login/#bring-your-own-identity-to-choreo)\n- [Configure enterprise login for your Choreo organization](https://wso2.com/choreo/docs/administer/configure-enterprise-login/#configure-role-based-access-control-for-enterprise-login)"
What is role-based access control and how does it work with enterprise login in Choreo?,"**Role-Based Access Control (RBAC) in Choreo**\n\nRole-Based Access Control (RBAC) is a method for regulating access to resources based on the roles assigned to individual users or groups. In Choreo, RBAC allows you to define roles with specific permissions that determine what actions users can perform on APIs and other components. \n\n### Functionality\n1. **User Roles**: Users are assigned to roles that correspond to their job functions. Each role has defined permissions that dictate what resources can be accessed and what actions can be performed.\n2. **Granular Control**: RBAC enables granular control over access permissions, allowing organizations to enforce security policies more effectively and reduce the risk of unauthorized access.\n\n### Implementation\nTo implement RBAC in Choreo, especially with enterprise login integration, follow these steps:\n\n1. **Configure Enterprise Login**:\n   - Set up enterprise login to allow users from an external Identity Provider (IdP) to authenticate without changing their credentials.\n   - Ensure that your IdP includes group/role attributes in the tokens sent to Choreo.\n\n2. **Asgardeo Configuration**:\n   - Use Asgardeo to configure your IdP as an external IdP, either via OpenID Connect or SAML.\n   - Enable the groups attribute to be included in the user tokens.\n\n3. **Mapping Groups**:\n   - In the Choreo Console, map Choreo groups to the corresponding enterprise IdP groups under the Access Control settings.\n\n4. **Define Roles and Permissions**:\n   - Define specific roles (e.g., admin and user) and assign permissions to API resources:\n     - For instance, an admin may have permissions to create, delete, and list users, while a user may have permission only to list users.\n\n5. **User Management**:\n   - Create users in your IdP and assign them to the appropriate roles/groups based on the defined permissions.\n\n### Benefits\n- **Improved Security**: By controlling user access based on roles, organizations can minimize the risks associated with unauthorized access to sensitive resources.\n- **Flexibility and Scalability**: RBAC is flexible and can scale with the organization as roles and permissions can be easily adjusted according to changing needs.\n- **Streamlined Administration**: Managing access rights through roles simplifies the administrative overhead, making it easier to onboard new users and manage existing ones.\n\nBy integrating RBAC with enterprise login, Choreo ensures that users have appropriate permissions based on their roles, enhancing both security and user experience.\n\nFor more detailed steps on configuring RBAC with enterprise login in Choreo, you can refer to the following documentation:\n- [Configure Role-Based Access Control for Enterprise Login](https://wso2.com/choreo/docs/administer/configure-enterprise-login/#configure-role-based-access-control-for-enterprise-login)\n- [Secure an API with Role-Based Access Control](https://wso2.com/choreo/docs/tutorials/secure-an-api-with-role-based-access-control/)"
What are the steps to configure role-based access control for enterprise login in Choreo?,"To configure role-based access control for enterprise login in Choreo, you need to follow these steps:\n\n### Prerequisites\nBefore proceeding with the configuration, ensure you have completed the following:\n1. **Configure enterprise login** for your organization (for instructions, see the relevant documentation).\n2. Ensure your enterprise identity provider (IdP) includes the group/role attributes in the tokens it sends to Asgardeo via the respective protocol.\n3. Verify that you have **administrator privileges** in Choreo.\n\n### Step 1: Configure Asgardeo\n1. Sign in to [Asgardeo](https://asgardeo.io/).\n2. Configure your IdP as an external IdP in Asgardeo. Depending on your IdP, select either **OpenID Connect** or **SAML** as the protocol.\n   - If using OpenID Connect, configure the requested scopes accordingly to retrieve relevant group/role details from the external IdP.\n3. To configure the application:\n   - In the Asgardeo Console left navigation menu, click **Applications** and find the application named **WSO2_LOGIN_FOR_CHOREO_CONSOLE**.\n   - Click on the application to edit it.\n   - Click the **Sign-in Method** tab and configure the IdP for login based on the protocol selected (refer to the respective instructions for OpenID Connect or SAML).\n   - Click the **User Attributes** tab, select the **Groups** attribute, and check the **Requested** checkbox.\n   - Click **Update**.\n4. To add user attributes as OpenID Connect scopes:\n   - In the Asgardeo Console, click **Scopes**.\n   - In the **OpenID Connect Scopes** pane, click **OpenID** to edit it.\n   - Click **New Attribute** and select the **Groups** attribute.\n   - Click **Save** and then **Save Changes**.\n\n### Step 2: Map Choreo Groups to Enterprise IdP Groups via Choreo Console\n1. In the Choreo Console, go to the top navigation menu and click **Organization** to access the organization's home page.\n2. In the left navigation menu, click **Settings** to open the organization-level settings page.\n3. In the **Access Control** tab, click **Groups**.\n4. Click **Manage IdP Group Mapping**.\n   - ![Group mapping](https://wso2.com/choreo/docs/assets/img/administer/enterprise-login/group-mapping.png)\n5. Click the edit icon corresponding to the Choreo group you want to map to the enterprise IdP group.\n6. In the **IdP Group Name** field, specify the exact name you configured in the enterprise IdP and enter it to add.\n7. Click **Save**.\n\n### Note\nIf there is a change to the IdP group mapping, it will take effect from the next login session onwards.\n\nBy following these steps, you will have successfully configured role-based access control for enterprise login in Choreo, allowing users from the external IdP to have the appropriate permissions.\n\nFor more detailed instructions, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-enterprise-login/#configure-role-based-access-control-for-enterprise-login)."
Where do I configure the external IdP in Asgardeo for enterprise login?,"I'm sorry, but I can only assist with questions related to Choreo. If you have any questions about Choreo, feel free to ask!"
"What is the ""WSO2\_LOGIN\_FOR\_CHOREO\_CONSOLE"" application in Asgardeo and how is it used?","I'm sorry, but I can only assist with questions related to Choreo. If you have any inquiries about the Choreo Console or its functionalities, feel free to ask!"
How do I map Choreo groups to enterprise IdP groups?,"To map Choreo groups to enterprise IdP groups in the Choreo Console, you need to follow a series of steps after ensuring that you have configured the enterprise login and that Asgardeo is set as your key manager. Here’s how you can do it:\n\n### Prerequisites\nBefore you start mapping, ensure the following:\n- Asgardeo is your key manager.\n- You have the necessary permissions (administrator role) in Choreo.\n\n### Steps to Map Choreo Groups to Enterprise IdP Groups\n\n1. **Access the Choreo Console**: Make sure you are signed in to the Choreo Console.\n\n2. **Navigate to Organization Settings**:\n   - Go to the top navigation menu and click on **Organization**. This will take you to your organization's home page.\n\n3. **Open Organization-Level Settings**:\n   - In the left navigation menu, click on **Settings**. This will open the organization-level settings page.\n\n4. **Access the Access Control Tab**:\n   - Click on the **Access Control** tab and then select **Groups**.\n\n5. **Manage IdP Group Mapping**:\n   - Click on **Manage IdP Group Mapping**.\n\n   ![Group mapping](https://wso2.com/choreo/docs/assets/img/administer/enterprise-login/group-mapping.png)\n\n6. **Edit Group Mapping**:\n   - Locate the Choreo group you want to map to an enterprise IdP group and click the edit icon next to it.\n\n7. **Specify IdP Group Name**:\n   - In the **IdP Group Name** field, enter the exact name of the group as configured in your enterprise IdP.\n\n8. **Save Changes**:\n   - Click **Save** to apply the changes.\n\n### Important Note\nAny changes made to the IdP group mapping will take effect from the next login session onwards.\n\nBy following these steps, you can successfully map Choreo groups to your enterprise IdP groups, enabling role-based access control for users authenticated through your external IdP.\n\nFor a detailed guide, you can refer to the documentation here: [Configure role-based access control for enterprise login](https://wso2.com/choreo/docs/administer/configure-enterprise-login/#configure-role-based-access-control-for-enterprise-login)."
Where do I navigate to manage IdP group mapping in the Choreo Console?,"To manage IdP group mapping in the Choreo Console, you need to follow these steps:\n\n1. Go to the top navigation menu and click on **Organization** to access your organization's home page.\n2. In the left navigation menu, click on **Settings** to open the organization-level settings page.\n3. Click on the **Access Control** tab, then select **Groups**.\n4. Here, you will find the option **Manage IdP Group Mapping**. Click on it.\n5. You can then click the edit icon next to the Choreo group you want to map to the enterprise IdP group.\n6. In the **IdP Group Name** field, enter the exact name configured in the enterprise IdP and press enter to add it.\n7. Finally, click **Save** to apply the changes.\n\nBy following these steps, you will successfully manage the IdP group mapping in Choreo. \n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-enterprise-login/#configure-role-based-access-control-for-enterprise-login)."
What is self-sign-up and how does it benefit users in the Developer Portal?,"In the context of the Choreo Developer Portal, self-sign-up refers to the feature that allows users to create their own accounts and gain access to the Developer Portal without needing manual approval from an administrator. This feature streamlines the process for developers who wish to subscribe to APIs and access the resources available in the Developer Portal.\n\n### Benefits of Self-Sign-Up\n\n1. **Ease of Access**: Users can sign up at their convenience, which reduces barriers to entry and encourages more developers to engage with your APIs.\n\n2. **Automation**: With self-sign-up, the process of user account creation can be automated. You can choose to enable auto-approval for new user registrations, allowing users to access the Developer Portal immediately after signing up. This saves time and effort for both users and administrators.\n\n3. **Control**: Administrators have the option to manually approve or reject user accounts, providing a level of control over who can access the Developer Portal. This is useful for maintaining security and ensuring that only authorized users are able to interact with your APIs.\n\n4. **Streamlined Management**: The self-sign-up feature also simplifies user management by allowing administrators to manage user registrations in one place, whether they choose auto-approval or manual approval.\n\n5. **Increased Engagement**: By making it easier for users to sign up and access the Developer Portal, you can foster a larger community of developers who can discover, subscribe to, and utilize your APIs more effectively.\n\nOverall, self-sign-up enhances the user experience and administration efficiency within the Choreo Developer Portal.\n\nFor more detailed information on how to configure self-sign-up in the Developer Portal, you can refer to the official documentation [here](https://wso2.com/choreo/docs/administer/configure-self-sign-up/)."
What are the prerequisites for configuring Developer Portal self-sign-up in Choreo?,"To configure self-sign-up for the Developer Portal in Choreo, the prerequisites are as follows:\n\n1. **Sign in to Choreo Console**: You need to be signed in to the Choreo Console using your Google, GitHub, or Microsoft account.\n\n2. **Create an Organization**: If you are a new user, you must create an organization with a unique name. For example, ""Stark Industries"".\n\nOnce you have met these prerequisites, you can proceed with the configuration steps for enabling self-sign-up in your Developer Portal.\n\nFor more detailed steps on configuring self-sign-up, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-self-sign-up/#prerequisites)."
What information do I need to provide to Choreo support to configure enterprise IdP for the Developer Portal?,"To configure enterprise IdP for the Developer Portal, you need to provide the following details to Choreo support:\n\n1. **Organization Name**: The official name of your organization.\n2. **Organization Handle**: A unique identifier for your organization, often used in URLs or API calls.\n3. **Email Domains**: The specific email domains associated with your organization that will be used for the enterprise login.\n\n### Steps to Request Configuration:\n\n1. **Send an Email**: Compose an email to `choreo-help@wso2.com` with your request for configuring the enterprise IdP. \n   \n   **Example Email Structure**:\n   ```\n   Subject: [Your Organization Name] Configure enterprise IdP for Developer Portal\n\n   Hi CS team,\n\n   I need to configure enterprise IdP for my organization’s Developer Portal. Can you please do the necessary configurations to proceed? \n\n   My organization details are as follows:\n   - Organization name: Your Organization Name\n   - Organization handle: yourorganizationhandle\n   - Email domains specific to my organization: ""@yourdomain.com"", ""@yourorganization.com""\n\n   Thank you.\n   ```\n\n### Additional Notes:\n- Make sure to include all the required details clearly to facilitate a smooth configuration process.\n- Once you send the email, the Choreo support team will perform the necessary configurations and respond to your request.\n\nFor further guidance, you can refer to the documentation on configuring self-sign-up and enterprise login: [Configure Self-Sign-Up](https://wso2.com/choreo/docs/administer/configure-self-sign-up/#configure-developer-portal-self-sign-up) and [Configure Enterprise Login](https://wso2.com/choreo/docs/administer/configure-enterprise-login/#configure-enterprise-login-for-your-choreo-organization)."
Where do I sign in to Asgardeo to configure Developer Portal self-sign-up?,"I'm here to assist with questions related to Choreo. If your question is related to configuring Developer Portal self-sign-up in Choreo or any other Choreo-related feature, please provide more details or clarify your question."
"What is the ""WSO2\_LOGIN\_FOR\_CHOREO\_DEV\_PORTAL"" application in Asgardeo and how is it used?","I'm sorry, but I can't provide information about the ""WSO2_LOGIN_FOR_CHOREO_DEV_PORTAL"" application in Asgardeo as it falls outside the scope of Choreo-related inquiries. If you have any questions related to Choreo or need help with its features, feel free to ask!"
What is the Access URL and why is it important to set it correctly for the Developer Portal?,"In the context of Choreo, the Access URL is a crucial component that specifies where your application can be accessed by users or external systems. It serves as the endpoint that clients will use to interact with your application’s APIs. Setting the Access URL correctly is essential for several reasons:\n\n1. **Accessibility**: The Access URL allows developers and consumers to access your APIs efficiently. If the URL is misconfigured, users may face difficulties in invoking the services, leading to a poor experience.\n\n2. **Integration**: For applications that rely on APIs, having the correct Access URL is vital for seamless integration. It ensures that requests are routed to the right destination, which is particularly important in distributed systems.\n\n3. **Security**: Setting the Access URL properly can also enhance security by ensuring that only authorized users can access the intended services. This helps in managing access control and implementing security measures effectively.\n\n4. **Documentation and Clarity**: A well-defined Access URL contributes to better documentation and understanding of how to interact with your APIs. It clarifies the endpoints available to developers using the Developer Portal.\n\nIn summary, the Access URL plays a pivotal role in the functionality and usability of your services within Choreo, making it imperative to configure it accurately.\n\nFor more detailed information, you can refer to the documentation here: [Generate an Access Token](https://wso2.com/choreo/docs/consuming-services/generate-an-access-token/)."
"What user attributes should I add to the ""WSO2\_LOGIN\_FOR\_CHOREO\_DEV\_PORTAL"" application in Asgardeo?","I'm here to assist with questions related to Choreo. However, your question seems to be related to Asgardeo, which is outside the scope of Choreo. If you have any questions specifically about Choreo, feel free to ask!"
What is basic authentication and how do I configure it in Asgardeo?,"I'm here to assist with questions related to Choreo. If you have questions or need assistance with Choreo, feel free to ask! If your question is about something else, please provide more context related to Choreo."
How do I configure self-registration in Asgardeo?,"I'm here to assist with questions related to Choreo. If you have any questions about Choreo, feel free to ask! If your question was intended to be about Choreo or if there's any way I can assist you with Choreo-related topics, please let me know."
How do I manage new users who sign up through the Developer Portal self-sign-up page?,"To manage users who sign up through the Developer Portal self-sign-up page in Choreo, you have two main approaches:\n\n### 1. Enable Auto-Approval for New User Registrations\nThis method automates the user approval process. When enabled, every user who creates an account on your Developer Portal can access it immediately without any manual intervention.\n\n**Steps to Enable Auto-Approval:**\n1. Click your username in the top right corner of the Choreo Console.\n2. Select **Settings** from the drop-down menu to open the **Organization** pane.\n3. Navigate to **Self Signups** in the Organization pane.\n4. Turn on the toggle to enable auto-approval.\n\nOnce this setting is enabled, users will be able to sign in and access your APIs and applications right after creating an account.\n\n### 2. Manually Approve or Reject User Accounts\nIf you choose not to enable auto-approval, you can manually review and manage each user registration.\n\n**Steps to Manually Approve or Reject User Accounts:**\n1. Click your username in the top right corner of the Choreo Console.\n2. Select **Settings** from the drop-down menu to access the **Organization** pane.\n3. Go to **Self Signups** to view the list of user accounts awaiting approval.\n4. To approve a user account, click **Approve**. To reject a user account, click **Reject**.\n\n- Upon approval, the user receives an email confirming their access.\n- If rejected, the user gets an email notifying them of the rejection. Please note that a rejected user cannot sign up again using the same account.\n\n### Additional Information\n- It's essential to regularly monitor the registrations if you opt for manual approval to ensure that you are aware of new users trying to access your services.\n\nFor more detailed information, you can refer to the documentation on managing new users in the Developer Portal: [Manage Users](https://wso2.com/choreo/docs/administer/configure-self-sign-up/#manage-new-users)."
Where do I find the settings to enable auto-approval or manually approve/reject user accounts in the Choreo Console?,"In the Choreo Console, you can configure user account approval settings for those accessing your Developer Portal through self-sign-up. There are two main approaches for managing new user registrations:\n\n1. **Auto-Approval**: This option automates the approval process. When you enable auto-approval, every user who creates an account can access the Developer Portal immediately after signing up.\n\n2. **Manual Approval**: If you choose not to enable auto-approval, you will need to manually review and approve or reject each new user registration. After a user creates an account, Choreo sends them an email to confirm their account. You can then view the list of user registrations and approve or reject them as needed.\n\n### Steps to Enable Auto-Approval:\n1. Click your username in the top right corner of the Choreo Console.\n2. Select **Settings** from the drop-down menu to open the **Organization** pane.\n3. Click on **Self Signups** within the Organization pane.\n4. Turn on the toggle to enable auto-approval.\n\n### Steps for Manual Approval:\n1. Click your username in the top right corner of the Choreo Console.\n2. Select **Settings** from the drop-down menu to open the **Organization** pane.\n3. Click on **Self Signups** to see the list of user accounts awaiting approval.\n4. Click **Approve** to approve a user account or **Reject** to reject it.\n\nWhen a user account is approved, they receive a confirmation email. If rejected, the user will be notified that their account is not approved and cannot sign up using the same account again.\n\nFor further details, you can refer to the documentation on [Managing New Users](https://wso2.com/choreo/docs/administer/configure-self-sign-up/#manage-new-users)."
What is access control and how does it work in the Choreo Console?,"Access control in the Choreo Console refers to the mechanisms that manage who can access specific projects and what actions they can perform within those projects. It is implemented through a structured approach that involves **Roles**, **Groups**, and various **Mapping levels**.\n\n### Key Components of Access Control\n\n1. **Roles**: \n   - A role is a collection of permissions that determine what actions a user can perform.\n   - Choreo provides a predefined set of roles with specific permissions assigned to them.\n\n2. **Groups**: \n   - A group is a collection of users. \n   - Roles are assigned to groups to grant permissions to all users within that group.\n\n3. **Mapping Levels**: \n   - Choreo has two defined resource levels for assigning roles:\n     - **Organization Level**: Roles assigned at this level grant permissions across all projects within the organization. For example, a user can edit all projects if they have the `edit_project` permission at this level.\n     - **Project Level**: Roles assigned here grant permissions only within the specified project. Users can perform actions only on that project based on the assigned roles.\n\n### Implementation Steps\n\nTo manage access control in the Choreo Console, you would typically follow these steps:\n\n1. **Create a Project**: Start by creating a project where you want to manage access.\n\n2. **Create a Group**: \n   - Navigate to the **Settings** section and create a new group. For example, you could create a group named ""Engineering Project Developers"".\n\n3. **Assign Roles to the Group**: \n   - Within the project settings, assign the relevant roles (like Developer) to the group you created. This determines what the users in that group can do within the project.\n\n4. **Add Users to the Group**: \n   - You can invite new users or add existing users to the group. This allows those users to inherit the permissions associated with the group's roles.\n\n5. **Manage Permissions**: \n   - Ensure that roles and permissions are correctly mapped according to the specific needs of your projects and organization to prevent unintended access.\n\n### Important Considerations\n\n- It is essential to avoid assigning multiple roles to a single user across different projects or levels to prevent granting unintended permissions.\n- Organization-level permissions take precedence over project-level permissions, so careful planning is necessary to ensure correct access control.\n\n### Visual Representation\nThe following diagram illustrates a role-group assignment at a specific resource level, showing how an admin can grant permissions within a project context:\n\n![Console access control](https://wso2.com/choreo/docs/assets/img/administer/access-control-to-console.png)\n\nFor further details and step-by-step instructions, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/control-access-in-the-choreo-console/)."
"What are Roles, Groups, and Mapping levels and how are they used to control access in Choreo?","In Choreo, access control is managed through the concepts of **Roles**, **Groups**, and **Mapping levels**. Here's a detailed explanation of each concept and how they work together to control access:\n\n### Roles\nA **Role** in Choreo is a collection of permissions. Choreo provides a predefined set of roles, each associated with specific permissions that determine what actions a user can perform. For example, roles might include permissions for publishing APIs, managing projects, or administering the organization.\n\n### Groups\nA **Group** is a collection of users. To grant access to users, a group must have one or more roles assigned to it. When users are added to a group, they inherit the permissions associated with that group's roles. For instance, if a group is assigned the Developer role, all users in that group will have developer access.\n\n### Mapping Levels\n**Mapping levels** define the scope at which roles can be assigned to groups. Choreo recognizes two primary mapping levels:\n\n1. **Organization Level**: Roles assigned at this level provide permissions across all resources within the organization. For example, if a user has the permission to edit projects at the organization level, they can edit any project within that organization.\n\n2. **Project Level**: Roles assigned at this level restrict permissions to specific projects. For instance, if a user is granted edit permissions only for a specific project, they cannot edit any other projects within the organization.\n\n### Access Control Mechanism\nThe authorization process in Choreo involves assigning a role to a group at a specified mapping level. The level at which the role is assigned determines the extent of permissions granted to the users. \n\n- **Organization-level permissions** take precedence over project-level permissions. This means that if a user has permissions at both levels, the organization-level permissions will apply.\n\n### Important Considerations\n- It is advised to avoid assigning multiple roles to a single user across different projects or mapping levels, as this can inadvertently grant users broader access than intended.\n- Properly managing roles and groups ensures that users have access only to the resources they need, following the principle of least privilege.\n\nBy understanding these concepts, administrators can effectively manage user permissions and ensure secure access control within the Choreo Console.\n\nFor more detailed information on this topic, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/control-access-in-the-choreo-console/)."
What is the difference between Organization and Project mapping levels in Choreo?,"In Choreo, the distinction between Organization and Project mapping levels is crucial for managing access control effectively. Here's a detailed explanation of both levels:\n\n### Organization Mapping Level\n- **Scope**: At the organization mapping level, roles are assigned to user groups across all projects within the organization. This means that any permissions granted to a role at this level apply universally to all projects under that organization.\n- **Example**: If a user is granted the `edit_project` permission at the organization level, that user can edit all projects within the organization. This is beneficial for administrators who want to manage access at a broader scale.\n\n### Project Mapping Level\n- **Scope**: At the project mapping level, roles are assigned to user groups within a specific project. Permissions granted at this level are limited to that particular project only.\n- **Example**: If a user is granted the `edit_project` permission at the project level, that user can only edit the designated project and not any other projects in the organization. This allows for more granular control over who can access and modify specific projects.\n\n### Key Differences\n- **Permission Scope**: Organization-level permissions apply to all projects, while project-level permissions are restricted to a single project.\n- **Use Cases**: Organization-level is useful for overarching roles that need to be consistent across all projects, whereas project-level is ideal for roles that require specificity and limited access only to certain projects.\n\n### Important Considerations\n- Organization-level permissions take precedence over project-level permissions. Thus, if a user has both organization-level and project-level permissions, the organization-level permissions will apply.\n- It is recommended to avoid assigning multiple roles to a single user across different projects or levels to prevent unintended access.\n\nFor further details, you can refer to the documentation on [Control Access in the Choreo Console](https://wso2.com/choreo/docs/administer/control-access-in-the-choreo-console/)."
What is the purpose of the sample scenario provided for granting development access?,"The sample scenario outlined for granting development access in Choreo is designed to help users manage access control within a project effectively. Here's a detailed breakdown of the purpose and the steps involved in this scenario:\n\n### Purpose\nThe main objective of this scenario is to provide a structured approach for overseeing access rights within a specific project, allowing you to grant development access to particular users. This is crucial for managing who can modify or deploy components within the project, ensuring that only authorized personnel have the necessary permissions.\n\n### Step-by-Step Details\n\n1. **Create a Project**:\n   - You start by creating a project where development activities will take place. This step involves specifying a unique project name and description, which helps in identifying the project within the organization.\n\n2. **Create a New Group**:\n   - After setting up the project, the next step is to create a group specifically for users who will have development access. In this scenario, the group is named ""Engineering Project Developer."" This helps in organizing users based on their roles and responsibilities.\n\n3. **Assign Roles to the Group**:\n   - Once the group is created, you assign the ""Developer"" role to it. This role grants the designated users the necessary permissions to perform development tasks within the project. The mapping level indicates that this access is limited to the specific project, preventing any unintended organization-wide access.\n\n4. **Add Users to the Group**:\n   - Finally, users can be added to the newly created group. There are two methods for adding users:\n     - Inviting new users by specifying their email addresses.\n     - Adding existing users by searching for them in the system and assigning them to the group.\n   - It is important to ensure that users are removed from other groups to avoid granting broader access than intended.\n\nBy following these steps, you effectively manage who can engage in development activities within the ""Engineering Project,"" ensuring that only authorized users have the necessary access.\n\nFor a detailed guide, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/control-access-in-the-choreo-console/#sample-scenario)."
How do I create a project in Choreo?,"To create a project in Choreo, follow these steps:\n\n1. On the organization home page, click **+ Create Project**.\n2. Enter the required project details:\n   - **Project Display Name**: This is the name that will be shown in the UI.\n   - **Name**: This must be unique and cannot be changed after creation.\n   - **Project Description**: A brief description of your project.\n   \n   For example:\n   | **Field**                | **Value**                |\n   |--------------------------|--------------------------|\n   | **Project Display Name** | My Sample Project        |\n   | **Name**                 | my-sample-project        |\n   | **Project Description**  | This is a sample project |\n\n3. Click **Create**. This will create the project and navigate you to the project home page.\n\nRemember that the **Name** field must be unique across all projects in your organization.\n\nFor more detailed information, you can refer to the [Choreo documentation](https://wso2.com/choreo/docs/quick-start-guides/deploy-your-first-service/#step-1-create-a-project)."
How do I create a new group in Choreo?,"To create a new group in the Choreo Console, you can follow these steps:\n\n1. **Select Your Organization**: In the top navigation menu, click on **Organization** and select the organization where you want to create the group.\n\n2. **Access Settings**: In the left navigation menu, click on **Settings**.\n\n3. **Navigate to Access Control**: Click on the **Access Control** tab, and then click the **Groups** tab.\n\n4. **Create a New Group**:\n   - Click on **+ Create Group**.\n   - Enter a **Group Name** and a **Group Description**. For example:\n     - **Group Name**: `Engineering Project Developer`\n     - **Group Description**: `Users with development access within the engineering project`\n\n5. **Finalize Creation**: Click **Create** to establish the new group.\n\nAfter creating the group, you can assign roles to the group and add users as needed.\n\nFor more detailed information, you can refer to the official documentation [here](https://wso2.com/choreo/docs/administer/control-access-in-the-choreo-console/#sample-scenario)."
How do I assign roles to a group in Choreo?,"To assign roles to a group in Choreo for managing permissions and access, follow these steps in the Choreo Console:\n\n1. **Navigate to Your Organization**: \n   - Go to the top navigation menu, click on the **Organization** list, and select the organization where your component is created.\n\n2. **Access Role Management**:\n   - Click on the **Application Security** tab and then select **Role Management**.\n\n3. **Map Groups to Roles**:\n   - Find the role that you want to assign and click on **Map Groups** corresponding to that role.\n   - In the dialog that appears, specify the name of the group you want to assign to this role. You can add multiple groups as needed.\n\n4. **Save the Changes**:\n   - After entering the group name(s), click **Save** to confirm the role assignments.\n\n### Important Concepts:\n- **Roles**: A role is a collection of permissions assigned to a group. Various predefined roles are available, each granting different permissions.\n- **Groups**: A group is a collection of users. When a role is assigned to a group, all users in that group inherit the permissions associated with that role.\n\n### Notes:\n- Be cautious about assigning multiple roles to a single user across different projects or levels, as this may inadvertently grant more permissions than intended.\n\nFor more detailed instructions and visual aids, you can refer to the documentation here: [Assign roles to user groups](https://wso2.com/choreo/docs/authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#step-3-assign-roles-to-user-groups)."
How do I add users to a group in Choreo?,"To add users to a group in Choreo, you can follow the steps outlined below. There are two methods for adding users: inviting new users or adding existing users.\n\n### Steps to Add Users to a Group:\n\n#### 1. **Add a New User as a Project Developer**\n   - In the Choreo Console, go to the top navigation menu, click the **Organization** list, and select the organization where you created your project.\n   - In the left navigation menu, click **Settings**.\n   - Click the **Access Control** tab and then click the **Users** tab.\n   - Click **+Invite Users**.\n   - In the **Invite Users** dialog:\n     - Specify the email addresses of the users in the **Emails** field.\n     - Click the **Groups** list and select the group you want to add the users to (e.g., `Engineering Project Developer`).\n   - Click **Invite**.\n\n#### 2. **Add an Existing User as a Project Developer**\n   - In the Choreo Console, go to the top navigation menu, click the **Organization** list, and select the organization where you created your project.\n   - In the left navigation menu, click **Settings**.\n   - Click the **Access Control** tab and then click the **Users** tab.\n   - Search for the existing user you want to add to the group.\n   - Click the edit icon corresponding to the user.\n   - Click **+Assign Groups**.\n   - In the **Add Groups to User** dialog, click the **Groups** list and select the desired group (e.g., `Engineering Project Developer`).\n   - Click **Add**.\n\n### Notes:\n- Make sure to remove the user from any other groups if you want to avoid granting unintended organization-level access.\n- When users are added to a specific group, their access will be limited to the permissions associated with that group's role within the specified project.\n\nBy following these steps, you can effectively manage user access within your Choreo projects.\n\nFor further details, you can refer to the documentation here: [Control Access in the Choreo Console](https://wso2.com/choreo/docs/administer/control-access-in-the-choreo-console/#sample-scenario)."
What is egress traffic and why is it important to control it in Choreo?,"In Choreo, **egress traffic** refers to the data that is sent from your applications to external destinations outside of your organization. Controlling egress traffic is crucial for several reasons:\n\n1. **Security**: By managing egress traffic, you can prevent unauthorized data leaks or exposure of sensitive information. This ensures that only trusted destinations are allowed to receive data from your applications.\n\n2. **Compliance**: Many organizations have regulatory requirements regarding data handling. Controlling egress traffic helps in adhering to these compliance standards by limiting data movement to approved entities.\n\n3. **Resource Management**: By restricting egress traffic, you can manage bandwidth usage effectively and avoid unnecessary costs associated with data transfer.\n\n4. **Operational Control**: Implementing egress policies allows you to have better control over the behavior of your applications and can help in troubleshooting issues related to external connectivity.\n\nIn Choreo, you can manage egress traffic by setting up policies at both the organization and project levels. By default, egress traffic is allowed to any destination unless specific restrictions are implemented. You can create an **allow list** or a **deny list** to control which external IPs or domains your applications can communicate with.\n\nTo configure an egress policy at the organization level, you need to:\n- Select an egress control type (Allow All or Deny All).\n- Add rules to govern the traffic accordingly.\n\nAdditionally, project-level egress policies can override organization-level settings, allowing for more granular control based on specific project needs.\n\nFor more detailed steps and visual guidance, you can refer to the documentation on [Control Egress Traffic for Your Organization](https://wso2.com/choreo/docs/administer/control-egress-traffic-for-your-organization/)."
What are allow lists and deny lists and how are they used to control egress traffic in Choreo?,"In Choreo, allow lists and deny lists are used to manage egress traffic from your applications effectively.\n\n### Allow Lists\n- An **allow list** specifies which destinations are permitted for egress traffic. This means that by default, all egress traffic is allowed unless you explicitly block certain IP ranges or domains. \n\n### Deny Lists\n- A **deny list**, on the other hand, blocks egress traffic to specific destinations by default. You can then selectively allow traffic to certain IP ranges or domains.\n\n### Usage\nYou can configure these lists at both the organization level and the project level:\n\n1. **Organization Level**: \n   - By default, egress traffic is allowed to any destination. You can set an egress policy to either ""Allow All"" or ""Deny All"":\n     - **Allow All**: All traffic is allowed unless specified in the deny list.\n     - **Deny All**: All traffic is blocked unless specified in the allow list.\n   - Once you select an egress control type and create a rule, you cannot change the type without deleting existing rules.\n\n2. **Project Level**: \n   - You can override the organization-level policy by adding project-level rules. For example:\n     - If ""Allow All"" is set at the organization level, you can add rules at the project level to deny specific traffic.\n     - If ""Deny All"" is set at the organization level, you can remove inherited allow rules from the organization level.\n\n### Important Considerations\n- Ensure you add egress rules carefully to avoid blocking necessary traffic that your applications rely on.\n- If using the ""Deny All"" policy, it's crucial to allow Choreo-managed database hosts to avoid disruptions.\n\nFor more detailed steps on configuring egress policies, you can refer to the [Choreo documentation on controlling egress traffic](https://wso2.com/choreo/docs/administer/control-egress-traffic-for-your-organization/)."
How do I configure an egress policy at the organization level in Choreo?,"To configure an egress policy at the organization level in Choreo, follow these steps:\n\n1. In the Choreo Console header, go to the **Organization** list and select your organization.\n2. In the left navigation menu, click on **Settings**. This will open the organization-level settings page.\n3. Click on the **Egress Control** tab.\n4. Click **+ Create** to add a new egress policy.\n5. Select the type of egress control you want to apply and add the required rules:\n   - **Allow All**: This option allows all egress traffic by default, but you can selectively block traffic to specific IP ranges.\n   - **Deny All**: This option blocks all egress traffic by default, allowing you to selectively permit traffic to specific IP ranges or domains.\n\n**Important Notes**:\n- Once you select an egress control type and create a rule, you cannot change the type without deleting existing rules.\n- Be cautious when adding egress rules, as blocking traffic to required destinations could disrupt your application.\n- If using the **Deny All** type, ensure you add Choreo-managed database hosts to the allowed list.\n- Egress policies apply across all environments in your organization.\n- Note that egress policies do not apply to API proxies.\n\nFor more detailed guidance, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/control-egress-traffic-for-your-organization/#configure-an-egress-policy-at-the-organization-level)."
Where do I navigate to configure egress control in the Choreo Console?,"Users can configure egress control settings in the Choreo Console at both the organization level and the project level. Here's how to do it for each:\n\n### Configuring Egress Control at the Organization Level\n1. In the Choreo Console header, go to the **Organization** list and select your organization.\n2. In the left navigation menu, click **Settings** to open the organization-level settings page.\n3. Click the **Egress Control** tab.\n4. Click **+ Create** to add a new egress policy.\n5. Select the type of egress control you want to apply and add the required rules. You can choose between:\n   - **Allow All**: Allows all egress traffic by default but allows you to block specific IP ranges selectively.\n   - **Deny All**: Blocks all egress traffic by default but allows you to permit specific IP ranges or domains selectively.\n\n### Important Notes:\n- The egress control type cannot be changed once rules are created; to change it, you must delete existing rules.\n- Ensure that egress rules do not disrupt your applications by blocking essential traffic.\n- Egress policies apply across all environments in the organization and do not apply to API proxies.\n\n![Configure an organization-level egress policy](https://wso2.com/choreo/docs/assets/img/administer/configure-an-organization-level-egress-policy.png)\n\n### Overriding the Organization-Level Egress Policy at the Project Level\n1. In the Choreo Console header, go to the **Project** list and select your project.\n2. In the left navigation menu, click **Settings** to open the project-level settings page.\n3. Click the **Egress Control** tab. The organization-level egress policy is enforced by default.\n4. You can add project-level rules to further restrict egress traffic based on the organization-level policy.\n\n### Important Considerations:\n- If **Allow All** is selected at the organization level, you can add deny rules at the project level.\n- If **Deny All** is selected at the organization level, you can remove inherited allow rules to further restrict traffic.\n\n![Add project-level rules](https://wso2.com/choreo/docs/assets/img/administer/add-project-level-rules.png)\n\nFor more detailed information, you can refer to the documentation on [Controlling Egress Traffic for Your Organization](https://wso2.com/choreo/docs/administer/control-egress-traffic-for-your-organization/)."
"What is the difference between ""Allow All"" and ""Deny All"" egress policies?","In Choreo, egress policies control the outbound traffic from your applications. There are two main types of egress policies: **Allow All** and **Deny All**.\n\n### Allow All Egress Policy\n- **Definition**: This policy allows all egress traffic by default. You can selectively block traffic to specific IP ranges or domains.\n- **Usage**: It is useful when you want to maintain open access while having the ability to restrict certain destinations as needed.\n\n### Deny All Egress Policy\n- **Definition**: This policy blocks all egress traffic by default. You can selectively allow traffic to specific IP ranges or domains.\n- **Usage**: It is beneficial for environments where security is a priority, ensuring that only explicitly allowed traffic can leave the application.\n\n### Key Differences\n- **Default Behavior**: \n  - **Allow All** permits all traffic unless specified otherwise.\n  - **Deny All** restricts all traffic until specific allowances are made.\n- **Configuration**: \n  - With **Allow All**, you can create rules to block certain destinations.\n  - With **Deny All**, you must create rules to allow specific destinations or IP ranges.\n\nWhen implementing these policies, it's important to ensure that the rules added do not disrupt the functionality of your applications, especially when using the **Deny All** policy, as you need to explicitly allow necessary traffic, such as to Choreo-managed database hosts.\n\nFor more detailed guidance, you can refer to the official documentation [here](https://wso2.com/choreo/docs/administer/control-egress-traffic-for-your-organization/#configure-an-egress-policy-at-the-organization-level)."
How do I add rules for IP ranges or domains in an egress policy?,"To configure egress policies in Choreo, you can set them at either the organization level or the project level. Here's how to do it for both:\n\n### Configuring Egress Policies at the Organization Level\n1. In the Choreo Console, go to the **Organization** list and select your organization.\n2. Click **Settings** in the left navigation menu to open the organization-level settings page.\n3. Click the **Egress Control** tab.\n4. Click **+ Create** to add a new egress policy.\n5. Choose the type of egress control:\n   - **Allow All**: Allows all egress traffic by default, but you can block specific IP ranges.\n   - **Deny All**: Blocks all egress traffic by default, allowing you to specify which IP ranges or domains are permitted.\n\n   **Important Notes**:\n   - Once you choose an egress control type and create a rule, you cannot change the type without deleting existing rules.\n   - Be cautious as egress rules can disrupt your applications if they block necessary traffic.\n   - Egress policies apply across all environments in your organization.\n\n### Configuring Egress Policies at the Project Level\n1. In the Choreo Console, go to the **Project** list and select your project.\n2. Click **Settings** in the left navigation menu to access the project-level settings page.\n3. Click the **Egress Control** tab, where you will see that the organization-level egress policy is enforced by default.\n4. You can now add project-level rules to further restrict egress traffic:\n   - If the organization-level policy is set to **Allow All**, you can add deny rules at the project level.\n   - If it's set to **Deny All**, you can remove allow rules inherited from the organization level.\n\nBy following these steps, you can configure egress policies to manage traffic based on specific IP ranges or domains effectively.\n\nFor more details, you can refer to the documentation:\n- [Control Egress Traffic for Your Organization](https://wso2.com/choreo/docs/administer/control-egress-traffic-for-your-organization/#configure-an-egress-policy-at-the-organization-level)"
How do I override the organization-level egress policy at the project level in Choreo?,"To override an organization-level egress policy at the project level in Choreo, you can follow these steps:\n\n1. **Select Your Project**: In the Choreo Console, go to the **Project** list and select the project for which you want to configure the egress policy.\n\n2. **Access Project Settings**: In the left navigation menu, click on **Settings**. This will open the project-level settings page.\n\n3. **Navigate to Egress Control**: Click on the **Egress Control** tab. By default, you will see that the organization-level egress policy is enforced.\n\n4. **Add Project-Level Rules**: You can now add project-level rules to further restrict egress traffic. The ability to do this depends on the type of egress control set at the organization level:\n   - **Allow All**: If the organization-level policy allows all egress traffic, you can add specific deny rules at the project level to restrict certain traffic.\n   - **Deny All**: If the organization-level policy blocks all egress traffic, you can remove inherited allow rules to further restrict traffic.\n\nBy following these steps, you can effectively manage and customize the egress policies for your specific project while adhering to the broader organizational guidelines.\n\nFor more detailed information, you can refer to the [Control Egress Traffic for Your Organization documentation](https://wso2.com/choreo/docs/administer/control-egress-traffic-for-your-organization/#override-the-organization-level-egress-policy-at-the-project-level)."
"What happens if I add project-level rules to an organization-level ""Allow All"" egress policy?","In Choreo, when you have an organization-level egress policy set to ""Allow All,"" it means that all egress traffic is permitted by default. However, you can still impose additional restrictions at the project level by adding project-level rules. \n\nHere's how it works:\n\n1. **Project-Level Rules**: You can add project-level deny rules to further restrict traffic, even if the organization-level policy allows all traffic. This means that while the organization-level policy might permit any outgoing traffic, you can specify certain traffic that should be denied at the project level.\n\n2. **Egress Control Types**:\n   - If the organization-level egress control type is ""Allow All,"" you can introduce project-level rules that deny specific traffic, effectively overriding the allowance for that traffic at the organization level.\n   - Conversely, if you had an organization-level policy set to ""Deny All,"" you would have the ability to remove any inherited allow rules from the organization at the project level, further restricting outgoing traffic.\n\nIn summary, adding project-level rules to an organization-level ""Allow All"" egress policy allows you to fine-tune and restrict specific egress traffic that you may not want to allow, despite the broader allowance at the organization level.\n\nFor more detailed information, you can refer to the [Control Egress Traffic for Your Organization](https://wso2.com/choreo/docs/administer/control-egress-traffic-for-your-organization/#override-the-organization-level-egress-policy-at-the-project-level) documentation."
"What happens if I add project-level rules to an organization-level ""Deny All"" egress policy?","In Choreo, the interaction between project-level rules and the organization-level 'Deny All' egress policy is structured to provide flexibility and control over egress traffic.\n\n1. **Organization-Level 'Deny All' Policy**: When an organization-level egress policy is set to 'Deny All', it blocks all outgoing traffic by default. This means that unless explicitly allowed, no egress traffic will be permitted from any project within the organization.\n\n2. **Project-Level Overrides**: Despite the restrictive nature of the organization-level 'Deny All' policy, project-level rules can be configured to override this setting. Specifically:\n   - At the project level, you can remove any inherited allow rules from the organization-level policy. This means you can further restrict egress traffic if needed.\n   - If you need to allow specific traffic that is otherwise blocked by the organization-level policy, you can create allow rules at the project level. This capability allows for granular control of egress traffic based on the specific needs of each project.\n\n3. **Steps to Manage Egress Policies**:\n   - To manage project-level rules, navigate to your project's settings in the Choreo Console, and then to the Egress Control tab. Here, you can view the inherited organization-level policy and add or modify project-level rules accordingly.\n\nThis structure ensures that while the organization maintains a high level of security with a default 'Deny All' policy, individual projects have the flexibility to operate based on their specific requirements.\n\nFor further details, you can refer to the documentation on [controlling egress traffic for your organization](https://wso2.com/choreo/docs/administer/control-egress-traffic-for-your-organization/#override-the-organization-level-egress-policy-at-the-project-level)."
What are API subscription plans and how are they used to control access to APIs in Choreo?,"API subscription plans in Choreo are essential for controlling and managing access to APIs. They establish the rules and limitations regarding how clients can interact with APIs, which aids in efficient resource utilization and enhances security. Here’s a detailed explanation of their role and features:\n\n### Role of API Subscription Plans\n1. **Access Control**: Subscription plans define different levels of access for various users, allowing API providers to manage who can use their APIs and under what conditions.\n   \n2. **Resource Management**: By setting limits on API usage, these plans help to prevent abuse and ensure that the API can handle requests without compromising performance.\n\n3. **Rate Limiting**: Subscription plans allow API providers to implement rate limits, which restrict the number of requests a user can make within a specified time frame. This is crucial for protecting backend services from being overwhelmed by too many requests at once.\n\n4. **Burst Control**: This feature enables the management of sudden spikes in request traffic. It allows for controlled usage over longer periods, thus preventing a single user from exhausting their quota too quickly.\n\n5. **Tiered Access Levels**: Organizations can create multiple subscription plans to cater to different user needs and business models. This flexibility helps in accommodating varying requirements and ensuring optimal API performance.\n\n6. **Approval Process**: Subscription plans can be configured to require approval from an administrator or API publisher before they become active. This adds an extra layer of control over who can access the API.\n\n### Creating and Assigning Subscription Plans\n- Users with an administrator role can create, update, and delete subscription plans at the organization level. Once created, API publishers can assign these plans to specific APIs, which allows API consumers to choose a plan that meets their needs during the subscription process.\n\n### Summary of Steps to Create Subscription Plans:\n1. Navigate to the **Settings** section in the Choreo Console.\n2. Go to the **API Management** tab and select **Subscription Plans**.\n3. Click on **+ Add Subscription Plan** and fill in the required details such as name, rate limits, and burst control options.\n4. Save the plan, which will then be listed under the Subscription Plans.\n\n### Useful Links\n- For more information on creating API subscription plans, you can refer to the [Create API Subscription Plans](https://wso2.com/choreo/docs/administer/create-api-subscription-plans/) documentation.\n- To learn about assigning these plans to APIs, visit [Assign Subscription Plans to APIs](https://wso2.com/choreo/docs/api-management/manage-api-traffic/assign-subscription-plans-to-apis/).\n\nBy utilizing subscription plans effectively, organizations can enhance their API management practices, ensuring both security and performance."
How do I create an organization-level subscription plan in Choreo?,"To create an organization-level subscription plan in Choreo, follow these steps:\n\n1. **Select Organization**: In the Choreo Console header, go to the **Organization** list and select your organization.\n\n2. **Access Settings**: In the left navigation menu, click **Settings** to open the organization-level settings page.\n\n3. **Navigate to API Management**: Click on the **API Management** tab and then select **Subscription Plans**.\n\n4. **Add a Subscription Plan**: Click on **+ Add Subscription Plan**.\n\n5. **Fill in the Details**: In the **Create Subscription Plan** pane, enter the required values for each field:\n   - **Name**: Provide a unique name for the subscription plan. Note that this name cannot be changed once the plan is created.\n   - **Stop on Quota Reach**: This checkbox is selected by default, meaning that requests will return an HTTP 429 response if the limit is exceeded. You can uncheck this if you want to allow requests even after the quota is reached.\n   - **Burst Control**: If you want to manage spikes in requests, select the **Burst Control** checkbox when the **Request Count Time Unit** is set to **Hour** or **Day**.\n   - **Approval Required**: If you want subscription requests to require approval from an administrator or API publisher, select the **Approval required** checkbox.\n\n6. **Create the Plan**: Click **Create** to finalize and add the subscription plan to the list under **Subscription Plans**.\n\nOnce created, users with the API publisher role can assign these subscription plans to APIs, allowing API consumers to select the appropriate plan during the subscription process.\n\nFor more detailed information, you can refer to the following documentation: [Create API Subscription Plans](https://wso2.com/choreo/docs/administer/create-api-subscription-plans/)."
Where do I navigate to manage subscription plans in the Choreo Console?,"To manage subscription plans within the Choreo Console, users with the administrator role can follow these steps:\n\n1. **Access the Organization Settings**:\n   - In the Choreo Console header, go to the **Organization** list and select your organization.\n\n2. **Navigate to API Management**:\n   - In the left navigation menu, click **Settings**. This will open the organization-level settings page.\n   - Click on the **API Management** tab, then select **Subscription Plans**.\n\n3. **Create or Manage Subscription Plans**:\n   - To create a new subscription plan, click on **+ Add Subscription Plan**. Fill out the required fields in the **Create Subscription Plan** pane and click **Create**.\n   - To manage existing plans, you can view and edit them from the list displayed under **Subscription Plans**.\n\n4. **Assign Subscription Plans to APIs**:\n   - To assign a subscription plan to an API, navigate back to the **Component Listing** pane, select the desired API, click **Manage**, and then go to **Subscription Plans** to enable the desired plans.\n\nThese steps will allow you to effectively manage subscription plans for APIs within the Choreo Console.\n\nFor more detailed instructions, you can refer to the following documentation:\n- [Create API Subscription Plans](https://wso2.com/choreo/docs/administer/create-api-subscription-plans/)\n- [Assign Subscription Plans to APIs](https://wso2.com/choreo/docs/api-management/manage-api-traffic/assign-subscription-plans-to-apis/)"
What information do I need to enter when creating a subscription plan in Choreo?,"To create a subscription plan in Choreo, you need to provide specific information in the **Create Subscription Plan** pane. Here are the required fields and their descriptions:\n\n1. **Name**: This is a mandatory field where you must specify a unique name for the subscription plan. This name will be used to identify the plan in various contexts. Note that once the subscription plan is created, the name cannot be changed.\n\n2. **Stop on Quota Reach**: This checkbox is selected by default. If selected, when the request count exceeds the limit set in the subscription plan, requests will return an HTTP 429 response. If you uncheck it, requests will still be allowed even if the quota is exceeded.\n\n3. **Burst Control**: This is an optional feature that helps protect your backend from sudden spikes in requests and manages API usage. It is particularly useful if the request count is enforced over a longer period. You should select the **Burst Control** checkbox if the **Request Count Time Unit** is set to **Hour** or **Day**.\n\n4. **Approval Required**: If you check this box, subscription requests made to this plan will require manual approval from an administrator or API publisher before they can be activated. This allows for a review process for subscriptions.\n\nAfter filling in these fields, you can proceed to create the subscription plan by clicking **Create**.\n\nFor further details and guidance on creating API subscription plans, you can refer to the documentation: [Create API Subscription Plans](https://wso2.com/choreo/docs/administer/create-api-subscription-plans/)."
What are rate limits and burst control and how are they configured in a subscription plan?,"Rate limits and burst control are crucial components of API management, particularly in subscription plans, as they help regulate how clients interact with APIs.\n\n### Rate Limits\nRate limits are restrictions placed on the number of requests that can be made to an API within a specified time frame. This technique helps prevent system overload, enhances API performance, and ensures that the API remains available and responsive to all users. Implementing rate limits is essential for protecting APIs from excessive usage and potential abuse.\n\n### Burst Control\nBurst control is a feature that helps manage sudden spikes in requests. It allows a predetermined number of requests to be processed quickly, even if they exceed the normal rate limit for a short period. This is particularly useful for subscription plans that enforce request counts over longer periods (e.g., hourly or daily). Burst control prevents consumers from exhausting their entire quota too quickly and protects backend services from sudden surges in traffic.\n\n### Configuring Rate Limits and Burst Control in a Subscription Plan\nTo configure rate limits and burst control in a subscription plan in Choreo, follow these steps:\n\n1. **Access Subscription Plans**:\n   - In the Choreo Console, navigate to your organization and access the **Settings**.\n   - Click on the **API Management** tab and then select **Subscription Plans**.\n\n2. **Add a Subscription Plan**:\n   - Click on **+ Add Subscription Plan**.\n   - In the **Create Subscription Plan** pane, fill in the necessary fields.\n\n3. **Set Rate Limits**:\n   - In the configuration, you can specify the limits for requests in the subscription plan.\n\n4. **Enable Burst Control**:\n   - Ensure that you select the **Burst Control** checkbox if the **Request Count Time Unit** is set to either **Hour** or **Day**. This allows the plan to handle spikes in usage without immediately throttling requests.\n\n5. **Finalizing the Plan**:\n   - Once all settings are configured, click on **Create** to finalize the subscription plan.\n\nAfter creating the subscription plans, users with the API publisher role can assign these plans to APIs, allowing API consumers to select the appropriate plan based on their requirements.\n\nFor further details, you can refer to the [Create API Subscription Plans documentation](https://wso2.com/choreo/docs/administer/create-api-subscription-plans/) for extensive guidance."
What is the Developer Portal and how can I customize it in Choreo?,"The **Choreo Developer Portal** is a platform designed to facilitate API discovery and consumption for developers. It allows API consumers to easily find and utilize APIs published through the Choreo Console, streamlining the integration of these APIs into their applications.\n\n### Customization of the Developer Portal\n\nThe Developer Portal can be customized to enhance the developer experience and align it with your brand identity. Here are the key ways you can customize the Developer Portal:\n\n1. **Theme Customization**: You can change the look and feel of the Developer Portal by adjusting the theme. This includes modifications to:\n   - Home page content (e.g., titles)\n   - Color themes\n   - Fonts\n   - Header and footer designs\n   - Logos\n\n2. **Steps to Customize the Theme**:\n   - **Access the Theme Settings**:\n     - Navigate to **Settings** in the Choreo Console.\n     - Select the **Organization** settings.\n     - Go to the **API Management** tab and click on **Devportal Theme**.\n   \n   - **Make Changes**:\n     - Expand relevant sections (like Home Page or Color Palette) to make desired changes. For example:\n       - Change the title on the Home page.\n       - Adjust colors in the Color Palette section.\n     - Preview your changes to see how they will look in the portal.\n\n   - **Save and Apply Changes**:\n     - Save your changes as a draft.\n     - Toggle the **Go Live** switch and confirm to apply the changes to the Developer Portal.\n\n3. **Resetting to Default Theme**: If you wish to revert to the default theme, you can do so by accessing the same **Devportal Theme** settings and selecting the option to reset to default.\n\n### Important Notes:\n- Only admin users of the organization can customize the Developer Portal theme.\n- Changes once made cannot be undone, but you can reset to the default theme if needed.\n\n### Custom Domains\nAdditionally, you can configure a custom domain for your organization, allowing you to access the Developer Portal via your own domain name. This adds a layer of branding and professionalism to the portal.\n\nFor more detailed steps and visual aids, you can refer to the documentation here: [Customize the Developer Portal](https://wso2.com/choreo/docs/administer/customize-the-developer-portal/) and [Configure a Custom Domain for Your Organization](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-an-organization)."
How do I customize the Developer Portal theme in Choreo?,"To customize the Developer Portal theme in Choreo, follow these steps:\n\n1. **Access the Settings**:\n   - In the left pane of the Choreo Console, click on **Settings**.\n\n2. **Navigate to Organization Settings**:\n   - In the header, click the **Organization** list to open the organization-level settings page.\n\n3. **Choose the Devportal Theme**:\n   - In the **API Management** tab, click on **Devportal Theme**. \n\n   ![Access Devportal theme](https://wso2.com/choreo/docs/assets/img/administer/devportal-theme/access-devportal-theme.png)\n\n4. **Customize the Theme**:\n   - You can customize various elements such as:\n     - **Home Page**: Change the title and other content.\n     - **Color theme**: Modify the color palette.\n     - **Fonts**: Adjust font styles.\n     - **Header and Footer**: Update the header and footer content.\n     - **Logos**: Change the logos as needed.\n\n5. **Make Changes**:\n   - For example:\n     - To update the title on the **Home** page, expand the **Home Page** section and change the title in the **Title** field.\n     - To change the background color, expand the **Color Palette** section and select your desired colors.\n\n6. **Preview Changes**:\n   - Click **Preview** to see how the Developer Portal looks with your changes.\n\n   ![Preview of customization](https://wso2.com/choreo/docs/assets/img/administer/devportal-theme/preview-of-customization.png)\n\n7. **Save Changes**:\n   - Click **Save** to save your changes as a draft.\n\n8. **Go Live**:\n   - To apply your changes to the Developer Portal, toggle the **Go Live** switch and confirm by clicking **Enable** when prompted.\n\n9. **View Changes**:\n   - You can sign in to the Developer Portal to see how it appears after the changes.\n\nKeep in mind that to customize the Developer Portal theme, you must be an admin user of your organization. Also, note that you cannot undo a change to revert to a previous version of the theme, but you can reset it to the default theme if needed.\n\nFor more detailed instructions, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/customize-the-developer-portal/)."
Where do I navigate to manage the Devportal Theme in the Choreo Console?,"To manage the Devportal Theme in the Choreo Console, follow these steps:\n\n1. In the left pane, click on **Settings**.\n2. In the header, click the **Organization** list to access the organization-level settings page.\n3. In the **API Management** tab, click on **Devportal Theme**.\n   ![Access Devportal theme](https://wso2.com/choreo/docs/assets/img/administer/devportal-theme/access-devportal-theme.png){.cInlineImage-threeQuarter}\n4. Once you access the theme, you can customize various aspects such as the **Home** page, color theme, font, headers, footers, and logos by expanding the relevant sections.\n\n5. To make changes, for example, you can:\n   - Update the title on the **Home** page by expanding the **Home Page** section and modifying the **Title** field.\n   - Change the color theme by expanding the **Color Palette** section and adjusting the colors as needed.\n\n6. After making your changes, click **Preview** to see how the Developer Portal will look with your modifications. If satisfied, click **Save** to save your changes as a draft theme.\n\n7. To apply the changes, toggle the **Go Live** switch and confirm by clicking **Enable** in the prompt that appears.\n\nAfter completing these steps, your changes will be visible on the Developer Portal. For further details, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/customize-the-developer-portal/)."
What elements of the Developer Portal can I customize?,"In the Choreo Developer Portal, you can customize several elements to enhance the developer experience and align it with your brand. The main elements that can be customized include:\n\n1. **Theme**: You can change the overall look and feel of the Developer Portal by customizing the theme. This includes:\n   - **Home Page**: You can modify the title and content displayed on the home page.\n   - **Color Theme**: You can choose different colors for various elements, including background and button colors.\n   - **Fonts**: You can select different font styles to use throughout the portal.\n   - **Header and Footer**: Customization of the header and footer sections is possible.\n   - **Logos**: You can upload your organization's logo to personalize the portal.\n\n2. **Custom Domain**: You can configure a custom domain for your organization’s Developer Portal, which allows you to access the portal via a URL that reflects your brand instead of the default Choreo URLs.\n\n3. **Self-Sign-Up Configuration**: You can set up self-sign-up capabilities for your Developer Portal, allowing users to create their accounts independently. This includes customizing user attributes that are collected during sign-up, such as email, first name, and last name.\n\nTo implement these customizations, you will typically navigate to the settings in the Choreo Console and follow the respective steps for each customization type.\n\nFor detailed guidance on how to customize the Developer Portal, you can refer to the documentation here: [Customize the Developer Portal](https://wso2.com/choreo/docs/administer/customize-the-developer-portal/)."
How do I preview changes to the Developer Portal theme before applying them?,"To preview changes to the Developer Portal theme in Choreo before applying them, follow these steps:\n\n1. **Access the Developer Portal Theme Settings**:\n   - In the Choreo Console, navigate to the **Settings** section from the left pane.\n   - Click on the **Organization** dropdown to access organization-level settings.\n   - Under the **API Management** tab, select **Devportal Theme**.\n\n2. **Make Your Changes**:\n   - You can customize various aspects of the theme such as the **Home** page title, color theme, font, header and footer, logos, etc. Expand the relevant sections to make your desired changes.\n\n3. **Preview Your Changes**:\n   - After making changes, click the **Preview** button. This will allow you to see how the Developer Portal will look with the changes you've made.\n\n4. **Save Changes**:\n   - If you are satisfied with the preview, you can click **Save** to save your changes as a draft.\n\n5. **Go Live**:\n   - To apply the changes to the Developer Portal, toggle the **Go Live** switch. Confirm the action by clicking **Enable** in the message that appears.\n\nBy following these steps, you can effectively preview and then apply any modifications to the Developer Portal theme in Choreo.\n\nFor further details, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/customize-the-developer-portal/)."
How do I save changes to the Developer Portal theme as a draft?,"To save changes to the Developer Portal theme as a draft in Choreo, follow the steps below:\n\n1. **Access the Developer Portal Theme**: \n   - In the Choreo Console, click on **Settings** in the left pane.\n   - Select the **Organization** from the header to open the organization-level settings page.\n   - Navigate to the **API Management** tab and click on **Devportal Theme**.\n\n2. **Customize the Theme**:\n   - Make the desired changes to the theme, such as modifying the title, color palette, font styles, etc. You can expand the relevant sections to make these changes.\n\n3. **Preview the Changes**:\n   - Click on the **Preview** button to see how the Developer Portal will look with the changes you made.\n\n4. **Save Changes as Draft**:\n   - Once you're satisfied with your modifications, click the **Save** button to save your changes as a draft theme.\n\n5. **Go Live (Optional)**:\n   - If you want to apply the changes immediately, toggle the **Go Live** switch and confirm by clicking **Enable** when prompted.\n\nBy saving your changes as a draft, you can continue to make further adjustments before deciding to publish them.\n\nFor more detailed steps on customizing the Developer Portal theme, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/customize-the-developer-portal/)."
How do I apply the changes to the Developer Portal theme and make them live?,"To apply and make live changes to the Developer Portal theme in Choreo, follow these steps:\n\n1. **Access Developer Portal Theme Settings**:\n   - In the Choreo Console, click on **Settings** in the left pane.\n   - Select the **Organization** list in the header to open the organization level settings page.\n   - Navigate to the **API Management** tab and click on **Devportal Theme**.\n\n2. **Customize the Theme**:\n   - You can customize various aspects of the Developer Portal, such as:\n     - **Home Page**: Update the title and other content.\n     - **Color Theme**: Change colors for background, buttons, etc.\n     - **Font**: Modify font styles.\n     - **Header and Footer**: Customize the header and footer sections.\n   - For example, to change the title on the Home page, expand the **Home Page** section and modify the **Title** field. To alter the color theme, expand the **Color Palette** section and set your desired colors.\n\n3. **Preview Changes**:\n   - After making changes, click on **Preview** to see how the Developer Portal will look with your modifications.\n\n4. **Save Changes**:\n   - Once you are satisfied with the preview, click **Save** to save your changes as a draft theme.\n\n5. **Go Live with Changes**:\n   - To apply the changes to the Developer Portal, toggle the **Go Live** switch.\n   - Confirm your action by clicking **Enable** in the prompt that appears.\n\n6. **View Changes**:\n   - Finally, sign in to the Choreo Developer Portal to see your live changes reflected.\n\n**Important Notes**:\n- You need to be an admin user of the organization to customize the Developer Portal theme.\n- Changes cannot be undone, but you can reset to the default theme if needed.\n\nFor more detailed information, you can refer to the documentation: [Customize the Developer Portal](https://wso2.com/choreo/docs/administer/customize-the-developer-portal/)."
How do I reset the Developer Portal theme to the default theme?,"To reset the Developer Portal theme to the default theme in Choreo, follow these steps:\n\n1. In the left pane of the Choreo Console, click on **Settings**.\n2. In the header, click on the **Organization** list to access the organization-level settings page.\n3. Navigate to the **Devportal Theme** section.\n4. Click on **Reset to Default**.\n\nThis action will revert your Developer Portal theme back to its default settings. Please note that you need to have admin privileges for your organization to perform this action.\n\nFor more details, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/customize-the-developer-portal/#reset-the-developer-portal-theme)."
Who can invite users to an organization in Choreo?,"In Choreo, only an organization administrator can invite users to the organization. The administrator does this by assigning specific groups to the invited users. Once the invitation is sent, the invited users will receive an email and must accept the invitation to join the organization and access its resources.\n\nFor more detailed information, you can refer to the following document: [Inviting users](https://wso2.com/choreo/docs/administer/inviting-members/#inviting-users)."
What happens when a user is invited to an organization in Choreo?,"When a user is invited to an organization in Choreo, the process and outcome are as follows:\n\n### Process of Inviting Users\n1. **Invitation by Administrator**: An organization administrator has the capability to invite users to the organization. During this process, the admin assigns specific groups to the invited users.\n   \n2. **Email Notification**: Once a user is invited, they receive an invitation via email. This email contains a link or instructions for accepting the invitation.\n\n3. **Acceptance of Invitation**: The invited user must accept the invitation to officially join the organization. Until the invitation is accepted, the user does not have access to the resources of that organization.\n\n### Outcome\n- **Joining the Organization**: After accepting the invitation, the user becomes a member of the organization. This allows them to access the resources and services available within that organization.\n  \n- **Group and Role Assignment**: The user inherits the permissions associated with the group they are assigned to. This means they will have certain roles and permissions as defined by the groups set by the administrator.\n\n- **Access to Resources**: Once the user is a member, they can interact with the resources of the organization, as per the permissions granted to them.\n\nFor more detailed information, you can refer to the documentation on inviting users in Choreo [here](https://wso2.com/choreo/docs/administer/inviting-members/#inviting-users) and managing members of an organization [here](https://wso2.com/choreo/docs/administer/manage-members-of-an-organization/)."
How does an invited user join an organization in Choreo?,"An invited user can join an organization in Choreo by following these steps:\n\n1. **Receive Invitation**: An organization administrator will invite the user by assigning them to specific groups. The invited user will receive an invitation via email.\n\n2. **Accept the Invitation**: The invited user must accept the invitation sent to their email. This action is necessary to officially join the organization and gain access to its resources.\n\n3. **Join the Organization** (if applicable): If the user is joining an organization through the Choreo Console, they can find the organization under the **Invited Organizations** section and click the **Join** button next to it.\n\nBy completing these steps, the invited user will be able to access the resources of the organization.\n\nFor further details, you can refer to the document on [Inviting users](https://wso2.com/choreo/docs/administer/inviting-members/#inviting-users)."
What is a workflow approval request and how are authorized reviewers notified?,"In Choreo, a workflow approval request is a formal request submitted by a user to obtain approval for performing a specific task within a workflow that requires administrative oversight. When such a request is made, it is sent to designated reviewers who have the authority to approve or reject the request.\n\n### How are Authorized Reviewers Notified?\nAuthorized reviewers receive email notifications when a workflow approval request is submitted. This email notification includes:\n\n- A summary of the approval request.\n- A link to the **Approvals** page in the Choreo Console, where reviewers can view the details of the request and take action by either approving or rejecting it.\n\n### Key Points:\n- Workflow approvals are managed at the project level, meaning that only users assigned roles with the necessary permissions within a specific project will receive notifications for requests made in that project.\n- Users with organization-level permissions will receive notifications for all workflow requests across any project within the organization.\n- Other approvers may also receive notifications and have the opportunity to review the request before the assigned reviewer does.\n- The details of any previously reviewed requests can be found under the **Past** tab on the **Approvals** page.\n\nFor more detailed information, you can refer to the relevant documentation on [Review Workflow Approval Requests](https://wso2.com/choreo/docs/administer/review-workflow-approval-requests/) and [Submit and Manage Workflow Approval Requests](https://wso2.com/choreo/docs/develop-components/submit-and-manage-workflow-approval-requests/)."
Where do I navigate to view workflow approval requests in the Choreo Console?,"In the Choreo Console, users can find workflow approval requests assigned to them by following these steps:\n\n1. In the Choreo Console header, go to the **Organization** list and select your organization.\n2. In the left navigation menu, click **Approvals**. This will open the **Approvals** page where you can see all approval requests assigned to you.\n3. The **Pending** tab will display requests that have yet to be reviewed, while the **Past** tab shows requests that have already been reviewed or canceled.\n\nTo view the details of a specific request, click **Review** next to the corresponding request.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/review-workflow-approval-requests/#view-workflow-approval-requests)."
What information is displayed when reviewing a workflow approval request?,"When reviewing a workflow approval request in the Choreo Console, you will find the following types of information displayed:\n\n1. **Request Details**: This includes a summary of the approval request, detailing the specific task or action that requires approval.\n\n2. **Approvals Page**: You can access the **Approvals** page from the left navigation menu, which contains tabs for:\n   - **Pending**: Lists approval requests that are still awaiting your review.\n   - **Past**: Displays requests that have already been reviewed or canceled.\n\n3. **Request Review Options**: For each approval request, you will see options to either **Approve** or **Reject** the request based on your evaluation.\n\n4. **Notification Information**: When you are assigned as an approver, you will receive email notifications summarizing the request along with a link to review it in the Choreo Console.\n\n5. **Project Context**: Keep in mind that approvals are managed at the project level, and you may only receive notifications for requests made in projects where you have the appropriate permissions.\n\nIf you need more detailed information on this process, you can refer to the following documentation: [Review Workflow Approval Requests](https://wso2.com/choreo/docs/administer/review-workflow-approval-requests/#view-workflow-approval-requests)."
How do I approve or reject a workflow approval request?,"To approve or reject a workflow approval request in Choreo, follow these steps:\n\n1. **Access the Approval Request**: You can either follow the instructions in the ""View workflow approval requests"" section to see the details of the specific workflow you want to review, or you can click the link in the approval request email notification you received. This will take you directly to the request details in the Choreo Console.\n\n2. **Review the Request**: Once you have accessed the request, carefully review the details provided.\n\n3. **Make Your Decision**: Based on your review, click **Approve** if you agree with the request or click **Reject** if you do not.\n\nBy following these steps, you can effectively manage workflow approval requests assigned to you. \n\nFor additional context or to explore further details, you can refer to the relevant documentation [here](https://wso2.com/choreo/docs/administer/review-workflow-approval-requests/#approve-or-reject-an-approval-request)."
What happens after I approve or reject a workflow approval request?,"In Choreo, the actions triggered after approving or rejecting a workflow approval request are communicated primarily through email notifications. Here’s a breakdown of the outcomes for each action:\n\n### Approving a Workflow Approval Request:\n1. **Confirmation Email**: When an authorized assignee approves a workflow approval request, the requester receives an email notifying them of the approval.\n2. **Execution of Task**: Depending on the type of task that was requested, the approved action may be executed automatically, or any authorized team member can execute the task manually. \n\n### Rejecting a Workflow Approval Request:\n1. **Notification Email**: If the request is rejected, the requester will receive an email detailing the rejection.\n2. **No Execution**: The task will not be executed, and the requester may need to address any issues raised by the approver before resubmitting the request.\n\n### Additional Points:\n- Workflow approvals are usually managed at the project level. Only members of the user group assigned to the relevant role will receive notifications for requests made in that project.\n- If a request is reviewed by another approver before you, it will appear under the ""Past"" tab on the Approvals page.\n\nFor more details on managing workflow approval requests, you can refer to the documentation here: [Submit and Manage Workflow Approval Requests](https://wso2.com/choreo/docs/develop-components/submit-and-manage-workflow-approval-requests/) and [Review Workflow Approval Requests](https://wso2.com/choreo/docs/administer/review-workflow-approval-requests/)."
What is Asgardeo and how can it be configured as an external Identity Provider (IdP) in Choreo?,"To configure Asgardeo as an external Identity Provider (IdP) in Choreo, follow these steps:\n\n### Prerequisites\nBefore you start, ensure you have completed the following:\n1. **Create an Asgardeo Application**: Follow the Asgardeo guide to register a standard-based application.\n2. **Find the Well-Known URL**:\n   - Go to the **info** tab of the Asgardeo application to view the endpoints and copy the **Discovery** endpoint.\n3. **Find the Client ID**:\n   - Go to the **Protocol** tab of the Asgardeo application and copy the **Client ID**.\n\n### Steps to Add Asgardeo as an External IdP in Choreo\n1. In the Choreo Console, navigate to **Settings**.\n2. Click on the **Organization** list in the header to open the organization-level settings page.\n3. Go to the **Application Security** tab and then click on the **Identity Providers** tab.\n4. Click **+ Identity Provider** to add a new identity provider.\n5. Select **Asgardeo** from the options.\n6. In the Asgardeo dialog that opens, enter a name and a description for the IdP.\n7. Paste the **Well-Known URL** you copied from your Asgardeo instance into the appropriate field.\n8. Leave the **Apply to all environments** checkbox selected to use the tokens generated via this IdP across all environments. If you wish to restrict token usage to specific environments, deselect this checkbox and choose the relevant environments.\n9. Click **Next** to view the server endpoints necessary for implementing and configuring authentication for your application.\n10. Click **Add** to complete the configuration.\n\nOnce you complete these steps, you will have successfully configured Asgardeo as an external IdP in Choreo.\n\nFor more detailed information, you can refer to the documentation here: [Configure Asgardeo as an External Identity Provider (IdP)](https://wso2.com/choreo/docs/administer/configure-an-external-idp/configure-asgardeo-as-an-external-idp/)."
How do I add Asgardeo as an external IdP in Choreo?,"To integrate Asgardeo as an external Identity Provider (IdP) in Choreo, you can follow these steps:\n\n### Prerequisites\nBefore you start, ensure that you have:\n- Created an Asgardeo application. You can refer to the Asgardeo guide for registering a standard-based application.\n- Obtained the well-known URL from your Asgardeo application. You can find this by going to the **info** tab of your Asgardeo application and copying the **Discovery** endpoint.\n- Retrieved the Client ID from the **Protocol** tab of your Asgardeo application.\n\n### Steps to Add Asgardeo as an External IdP in Choreo\n1. In the Choreo Console, navigate to the left navigation menu and click on **Settings**.\n2. Click on the **Organization** list header, which will open the organization-level settings page.\n3. Go to the **Application Security** tab and then select the **Identity Providers** tab.\n4. To add a new identity provider, click on **+ Identity Provider**.\n5. Select **Asgardeo** from the options presented.\n6. In the Asgardeo dialog, provide a name and a description for the IdP.\n7. In the **Well-Known URL** field, paste the URL you copied from your Asgardeo instance.\n8. Ensure the **Apply to all environments** checkbox is selected if you want to use the tokens generated via this IdP across all environments. If you wish to restrict the tokens to specific environments, deselect this checkbox and choose the required environments from the list.\n9. Click **Next** to view the server endpoints that are useful for implementing and configuring authentication for your application.\n10. Finally, click **Add** to complete the configuration.\n\n### Additional Information\nAfter configuring Asgardeo as an external IdP, you can further secure API access by creating an application in Choreo and enabling external IdP authentication. \n\nFor more detailed information, you can refer to the following documentation:\n- [Configure Asgardeo as an External Identity Provider (IdP)](https://wso2.com/choreo/docs/administer/configure-an-external-idp/configure-asgardeo-as-an-external-idp/)\n- [Secure API Access with Asgardeo](https://wso2.com/choreo/docs/authentication-and-authorization/secure-api-access-with-asgardeo/)"
Where do I navigate to manage Identity Providers in the Choreo Console?,"To manage Identity Providers in the Choreo Console, you can follow these steps:\n\n1. In the Choreo Console, find the **Settings** option in the left navigation menu.\n2. Click on the **Organization** list in the header to open the organization-level settings page.\n3. Navigate to the **Application Security** tab and then click on the **Identity Providers** tab.\n4. Here, you can view the existing identity providers. To add a new identity provider, click on **+ Identity Provider** and select the type of identity provider you want to configure (e.g., Choreo Built-in Identity Provider, Azure AD, Asgardeo, etc.).\n5. If you choose to add a provider, you will need to provide a name, description, and relevant configuration details based on the specific identity provider you are integrating.\n\nThese steps will allow you to effectively manage and configure identity providers for your applications.\n\nFor more detailed instructions, you can refer to the relevant documentation:\n- [Configure a User Store with the Built-In Identity Provider](https://wso2.com/choreo/docs/administer/configure-a-user-store-with-built-in-idp/#configure-a-choreo-built-in-idp-user-store)\n- [Configure Azure Active Directory (Azure AD) as an External Identity Provider (IdP)](https://wso2.com/choreo/docs/administer/configure-an-external-idp/configure-azure-ad-as-an-external-idp/#add-azure-active-directory-as-an-external-idp-in-choreo)\n- [Configure Asgardeo as an External Identity Provider (IdP)](https://wso2.com/choreo/docs/administer/configure-an-external-idp/configure-asgardeo-as-an-external-idp/#add-asgardeo-as-an-external-idp-in-choreo)"
What information do I need to specify when adding Asgardeo as an IdP?,"To configure Asgardeo as an Identity Provider (IdP) in Choreo, you need to gather the following required details:\n\n1. **Well-Known URL**: \n   - You can find this by visiting the **info** tab of your Asgardeo application. Look for the **Discovery** endpoint and copy that URL.\n\n2. **Client ID**: \n   - This can be obtained from the **Protocol** tab of your Asgardeo application. Simply copy the **Client ID** provided there.\n\nOnce you have these details, you can proceed to add Asgardeo as an external IdP in Choreo by following these steps:\n\n1. Navigate to **Settings** in the Choreo Console.\n2. Click on the **Organization** list to access organization-level settings.\n3. Go to the **Application Security** tab and then click on **Identity Providers**.\n4. Click on **+ Identity Provider** and select **Asgardeo**.\n5. In the Asgardeo dialog, provide a name and a description for the IdP.\n6. Paste the **Well-Known URL** that you copied from your Asgardeo instance.\n7. Optionally, you can choose whether to apply this IdP to all environments or restrict it to specific ones.\n8. Click **Next** to review the server endpoints necessary for implementing authentication.\n9. Finally, click **Add** to complete the configuration.\n\nThese steps will set up Asgardeo as an IdP, allowing you to manage API access control effectively through your Asgardeo user stores.\n\nFor more detailed guidance, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-an-external-idp/configure-asgardeo-as-an-external-idp/#prerequisites)."
What is the well-known URL and where do I find it in my Asgardeo instance?,"I'm sorry, I can't assist with questions related to Asgardeo as it falls outside the scope of Choreo. If you have questions specifically about Choreo, feel free to ask!"
What is Azure Active Directory (Azure AD) and how can it be configured as an external Identity Provider (IdP) in Choreo?,"### What is Azure Active Directory (Azure AD)?\n\nAzure Active Directory (Azure AD) is a cloud-based identity and access management service provided by Microsoft. It enables organizations to manage users and their access to applications and services securely. Azure AD serves as a centralized platform for identity management, allowing users to authenticate and access resources within an organization and across external applications.\n\nBy integrating Azure AD with Choreo, organizations can leverage its capabilities for managing API access control, ensuring that only authorized users can access specific APIs based on defined permissions and roles.\n\n### Configuring Azure Active Directory as an External Identity Provider (IdP) in Choreo\n\nTo integrate Azure AD as an external Identity Provider in Choreo, follow these steps:\n\n#### Prerequisites\n\nBefore you begin, ensure you have the following:\n- An Azure Active Directory account. If you don’t have one, you can set it up at [Azure](https://azure.microsoft.com/en-gb/).\n- Administrator rights to your Choreo organization, as you will need these privileges to configure Azure AD in Choreo.\n\n#### Step-by-Step Guide\n\n1. **Sign in to Choreo Console**: Access the Choreo Console.\n\n2. **Navigate to Settings**: In the left navigation menu, click on **Settings**.\n\n3. **Access Organization Settings**: Click on the **Organization** list in the header to open the organization-level settings page.\n\n4. **Select Identity Providers**: On the **Application Security** tab, click on **Identity Providers** and then click on **+ Identity Provider**.\n\n5. **Choose Azure AD**: Select **Microsoft Entra ID (Azure AD)** as the Identity Provider.\n\n6. **Provide Details**: Enter a name and a description for the Identity Provider.\n\n7. **Obtain Well-Known URL**:\n   - To get the `Well-Known URL` for your Azure AD instance, go to your Azure account, under **Azure Active Directory**, navigate to **App registrations**, and then select **Endpoints**. Copy the URI listed under the `OpenID Connect metadata document`.\n   - Note: If you are using the v1 access token, omit the `/v2.0` segment from the URL. For example, change `https://login.microsoftonline.com/<tenant-id>/v2.0/.well-known/openid-configuration` to `https://login.microsoftonline.com/<tenant-id>/.well-known/openid-configuration`.\n\n8. **Environment Settings**: Leave the **Apply to all environments** checkbox selected, unless you want to restrict the IdP to specific environments. In that case, select the desired environments from the **Environments** list.\n\n9. **Review and Proceed**: Review the endpoints and click **Next** to complete the setup.\n\nBy following these steps, Azure AD will be successfully configured as an external Identity Provider in Choreo, allowing you to manage API access using Azure AD's identity management features.\n\nFor more detailed instructions, you can refer to the official documentation: [Configure Azure Active Directory (Azure AD) as an External Identity Provider (IdP)](https://wso2.com/choreo/docs/administer/configure-an-external-idp/configure-azure-ad-as-an-external-idp/)."
How do I add Azure AD as an IdP in Choreo?,"To integrate Azure AD as an Identity Provider (IdP) in Choreo, you need to follow a series of steps that involve both configuring Azure AD and setting it up in Choreo. Here’s a comprehensive guide on how to do this:\n\n### Prerequisites\nBefore proceeding, ensure you have:\n- An Azure Active Directory account.\n- Administrator rights to your Choreo organization.\n\n### Steps to Configure Azure AD as an External IdP in Choreo\n\n1. **Access Choreo Console:**\n   - In the left navigation menu, click **Settings**.\n   - Click on the **Organization** list to access organization-level settings.\n\n2. **Add Azure AD as an Identity Provider:**\n   - Go to the **Application Security** tab and click on **Identity Providers**.\n   - Click **+ Identity Provider**.\n   - Select **Microsoft Entra ID (Azure AD)** as the Identity Provider.\n\n3. **Provide Azure AD Details:**\n   - Enter a name and description for the IdP.\n   - To obtain the `Well-Known URL` of your Azure AD instance:\n     - Navigate to your Azure account, go to **Azure Active Directory**, then **App registrations**, and select **Endpoints**.\n     - Copy the URI under `OpenID Connect metadata document`. If using v1 access tokens, remove the v2.0 path segment from the URL (e.g., change `https://login.microsoftonline.com/<tenant-id>/v2.0/.well-known/openid-configuration` to `https://login.microsoftonline.com/<tenant-id>/.well-known/openid-configuration`).\n   - Leave the **Apply to all environments** checkbox selected unless you want to restrict the IdP to specific environments.\n\n4. **Review and Finalize:**\n   - Review the endpoints and click **Next** to complete the configuration.\n\n### Enabling External IdP Authentication in Choreo\nOnce Azure AD is configured as an IdP, you can enable it for applications in Choreo:\n\n1. **Access Choreo Developer Portal:**\n   - Sign in to the Choreo Developer Portal.\n\n2. **Create an Application:**\n   - Click on **Applications** and then **+Create**.\n   - Provide a name and description for the application and click **Create**.\n\n3. **Configure Identity Provider:**\n   - In the left navigation menu, under **Credentials**, click on **Production**.\n   - Select your Azure AD configuration as the **Identity Provider**.\n   - Enter the `Application (client) ID` you obtained from Azure AD as the **Client ID** and click **+Add**.\n\n4. **Manage Subscriptions:**\n   - Click on **Subscriptions** and then **+ Add APIs**.\n   - Select the API you assigned scopes to and click **Add**.\n\nBy following these steps, you will have successfully integrated Azure AD as an Identity Provider within Choreo.\n\nFor more detailed guidance, refer to the official documentation: [Configure Azure Active Directory (Azure AD) as an External Identity Provider (IdP)](https://wso2.com/choreo/docs/administer/configure-an-external-idp/configure-azure-ad-as-an-external-idp/) and [Secure API Access with Microsoft Azure Active Directory (Azure AD)](https://wso2.com/choreo/docs/authentication-and-authorization/secure-api-access-with-azure-ad/)."
What information do I need to provide when adding Azure AD as an IdP?,"To configure Azure Active Directory (Azure AD) as an identity provider (IdP) in Choreo, you need to provide several required fields and information. Here’s a comprehensive list of these requirements:\n\n1. **Identity Provider Name**: You need to provide a name for the IdP.\n\n2. **Description**: A description for the IdP is also required.\n\n3. **Well-Known URL**: \n   - You must obtain the `Well-Known URL` of your Azure AD instance. To do this:\n     - In your Azure account, navigate to **Azure Active Directory** > **App registrations** > **Endpoints**.\n     - Copy the URI under `OpenID Connect metadata document`.\n   - Note that if you are using the v1 access token, you should omit the `/v2.0` path segment from the URL. For example, convert `https://login.microsoftonline.com/<tenant-id>/v2.0/.well-known/openid-configuration` to `https://login.microsoftonline.com/<tenant-id>/.well-known/openid-configuration`.\n\n4. **Environment Settings**: \n   - You can leave the **Apply to all environments** checkbox selected. However, if you want to restrict the use of the external IdP to specific environments, you can select these from the **Environments** list.\n\n5. **Endpoints Review**: After entering the above details, you will need to review the endpoints before proceeding.\n\nMake sure you have administrator rights to your Choreo organization, as this is necessary for configuring the Azure AD account in your organization. \n\nFor more detailed guidance, you can refer to the documentation here: [Configure Azure Active Directory (Azure AD) as an External Identity Provider (IdP)](https://wso2.com/choreo/docs/administer/configure-an-external-idp/configure-azure-ad-as-an-external-idp/#add-azure-active-directory-as-an-external-idp-in-choreo)."
What is the Well-Known URL and where do I find it in my Azure AD instance?,"I'm here to assist with questions related to Choreo. If you have any questions about how Choreo interacts with Azure AD or any related configuration within Choreo, please let me know. Otherwise, if your question is specifically about Azure AD and not related to Choreo, I recommend checking Microsoft's Azure AD documentation or support for detailed information."
What is API rate limiting and why is it important?,"API rate limiting is a technique used in API management to control the number of requests that a client can make to an API within a specific time frame. This is crucial for several reasons:\n\n1. **Preventing System Overload**: By limiting the rate of requests, you can avoid overwhelming the server, which can lead to performance degradation or outages.\n\n2. **Enhancing API Performance**: Rate limiting ensures that all users have fair access to the API, maintaining responsiveness and availability.\n\n3. **Protection Against Malicious Attacks**: It helps mitigate risks from abusive behaviors, such as denial-of-service attacks, by restricting the number of requests from a single source.\n\nIn Choreo, there are two main types of rate limiting:\n\n- **API-level Rate Limiting**: This applies the allocated request count across all operations in the API, ensuring a uniform limit.\n\n- **Operation-level Rate Limiting**: This allows different rate limits for individual operations within the API, which is useful for critical operations that may require additional protection.\n\nWhen rate limiting is enabled, the API can return specific response headers that provide information about the limits, such as:\n\n| **Header Name**            | **Description**                                                  |\n|----------------------------|------------------------------------------------------------------|\n| `x-ratelimit-limit`       | The request count allocated for the specified time unit.        |\n| `x-ratelimit-reset`       | Time remaining to start the next rate-limiting time unit.      |\n| `x-ratelimit-remaining`   | Remaining request count for the specified time unit.            |\n| `x-ratelimit-enforced`    | Indicates when the allocated request count has been exceeded.   |\n\nTo learn more about enabling rate limiting for your APIs and the different options available, you can refer to the detailed documentation [here](https://wso2.com/choreo/docs/api-management/api-rate-limiting/)."
What is API-level rate limiting?,"API-level rate limiting in Choreo is a mechanism that applies a specified number of allowed requests over a defined time unit across all operations within an API. This is designed to control the rate of requests made to the API, helping to prevent system overload and ensure that the API remains responsive and available to all users. Moreover, it serves as a protective measure against potential malicious attacks.\n\n### How API-level Rate Limiting Works:\n- **Request Count**: The total number of requests allowed within a specified time frame is set. For example, you might configure an API to allow 100 requests per minute.\n- **Impact on Operations**: This limit applies uniformly across all operations of the API, meaning every endpoint will share the same rate limit.\n- **Response Headers**: When rate limiting is enabled, certain response headers provide information about the rate limit status:\n  - `x-ratelimit-limit`: Indicates the maximum request count allocated for the specified time unit.\n  - `x-ratelimit-reset`: Shows the time remaining until the next rate-limiting period starts.\n  - `x-ratelimit-remaining`: Denotes how many requests are left for the specified time unit.\n  - `x-ratelimit-enforced`: This header appears when the allocated request count has been exceeded.\n\nThis rate-limiting configuration helps maintain the performance and reliability of the API by controlling the traffic it handles.\n\nFor more detailed information, you can refer to the documentation on [API Rate Limiting](https://wso2.com/choreo/docs/api-management/api-rate-limiting/#api-level-rate-limiting)."
What is operation-level rate limiting?,"Operation-level rate limiting in Choreo allows you to set different rate-limiting values for each operation within your API. This feature is particularly beneficial for managing critical API operations that may need additional protection against excessive usage or potential abuse.\n\n### What Operation-Level Rate Limiting Entails:\n- **Customization**: You can configure specific rate limits for each operation, rather than applying a uniform limit across the entire API. This allows for more granular control over how your API is accessed.\n- **Protection**: It safeguards critical operations that might be sensitive to high traffic, ensuring they remain responsive and available even during peak usage times.\n\n### Implementation:\nTo implement operation-level rate limiting in Choreo, you would typically follow these steps:\n\n1. **Access the Component**: In the Choreo Console, navigate to the component for which you want to enable rate limiting.\n2. **Deployment Section**: Click on the **Deploy** option in the left navigation menu.\n3. **Select Environment**: Choose the appropriate environment and view the endpoint for which you wish to apply rate limiting.\n4. **Settings**: In the **Endpoint Details** pane, click on the settings icon.\n5. **Manage Rate Limiting**: Expand the **Manage** section and click on **Rate Limiting**.\n6. **Select Rate Limiting Level**: Choose a suitable **Rate Limiting Level** based on your operational needs and click **Apply**.\n\nYou can find more detailed information and specific steps in the official documentation: [Operation-level Rate Limiting](https://wso2.com/choreo/docs/api-management/api-rate-limiting/#operation-level-rate-limiting)."
How do I enable rate limiting for an API in Choreo?,"To enable rate limiting for an API in Choreo, you can follow these steps:\n\n1. In the **Component Listing** pane, click on the component for which you want to apply rate limiting.\n2. In the left navigation menu, click **Deploy**.\n3. Go to the required environment card and click the view icon corresponding to the endpoint for which you want to apply rate limiting.\n   - If you are applying rate limiting for an API Proxy component, click the settings icon corresponding to **API Configuration** instead.\n4. In the **Endpoint Details** pane that opens, click the settings icon.\n5. In the **Manage** section, click **Rate Limiting** to expand it.\n6. Select a **Rate Limiting Level** based on your requirements and click **Apply**.\n\nIt's important to note that you can apply rate-limiting settings separately for each environment.\n\nFor more details on API rate limiting, you can refer to the documentation [here](https://wso2.com/choreo/docs/api-management/api-rate-limiting/#enable-rate-limiting-for-an-api)."
What are the rate-limiting response headers and what information do they provide?,"Rate-limiting response headers in Choreo provide important information about the request limits applied to your APIs. When you enable rate limiting, these headers will be included in the API responses and can help you manage API consumption effectively. Here’s a breakdown of the key rate-limiting response headers and the information they provide:\n\n| **Header Name**          | **Description**                                                                 |\n|--------------------------|---------------------------------------------------------------------------------|\n| `x-ratelimit-limit`     | Indicates the maximum number of requests allowed during a specified time unit. |\n| `x-ratelimit-reset`     | Shows the time remaining until the next rate-limiting time period begins.      |\n| `x-ratelimit-remaining` | Denotes how many requests you can still make within the current time unit.     |\n| `x-ratelimit-enforced`  | This header is present after you exceed the allocated request limit.            |\n\nThese headers allow you to implement necessary rate-limiting scenarios based on the values they return, ensuring your API remains available and responsive to all users while preventing misuse.\n\nFor more details, you can refer to the [rate-limiting response headers documentation](https://wso2.com/choreo/docs/api-management/api-rate-limiting/#rate-limiting-response-headers)."
What is API visibility and what are the different visibility levels in Choreo?,"API visibility in Choreo refers to the settings that control who can see and access your APIs published in the Choreo Developer Portal. By default, APIs are set to be **Public**, meaning anyone can view them. However, developers have the ability to change this default setting to better control access. The different visibility levels provided by Choreo are:\n\n1. **Public**: The API is visible to all users in the Developer Portal. Anyone can discover and interact with the API without needing to sign in.\n\n2. **Private**: The API is only visible to users who are signed in to the Developer Portal. This setting restricts access to authenticated users.\n\n3. **Restricted**: The API is visible only to users who have specific roles assigned to them. This option allows for fine-grained access control, enabling developers to enforce stricter security measures for sensitive APIs.\n\nThese visibility settings help ensure that APIs are accessible only to the intended audience, thereby enhancing security and managing user access effectively.\n\nFor further details, you can refer to the documentation here: [Control API Visibility](https://wso2.com/choreo/docs/api-management/control-api-visibility/)."
How do I change the visibility of an API in Choreo?,"To change the visibility settings for an API in Choreo, follow these steps:\n\n1. In the **Component Listing** pane, select the REST API (Service) for which you want to adjust visibility.\n2. From the left navigation menu, click **Manage**, then click **API Info**.\n3. On the **API Info** page, navigate to the **Developer Portal** tab.\n4. In the **General Details** section, choose the desired visibility setting from the **Visibility** list. The options available are:\n   - **Public**: The API is visible to everyone in the Developer Portal.\n   - **Private**: The API is only visible to users who are signed in to the Developer Portal.\n   - **Restricted**: The API is visible only to users with specified roles, allowing for fine-grained access control.\n\nIf you select **Restricted**:\n1. You will see the roles available in your organization in the **Visible Roles** list.\n2. You can select any combination of roles. Only users with those roles will be able to access the API through the Developer Portal.\n\nTo create a new role and assign it to the API:\n1. Click **+ Create New Role**.\n2. Enter the role name and description.\n3. Click **Next** to assign relevant permissions to the new role.\n4. Click **Create**, then select the newly created role from the **Visible Roles** list.\n5. Finally, click **Save** to apply the changes.\n\nThis process allows you to control how your API is accessed based on the visibility settings you choose.\n\nFor more details, you can refer to the documentation here: [Change API visibility](https://wso2.com/choreo/docs/api-management/control-api-visibility/#change-api-visibility)."
What are the steps to add documents to an API in Choreo?,"To add documentation to an API in Choreo, follow these steps:\n\n1. In the **Component Listing** pane, click on the API component for which you want to add documents.\n2. In the left navigation menu, select **Manage**, then click on **Documents**.\n3. Specify a title for the document and provide the content using markdown syntax.\n4. Click **Add** to save the document.\n\nYou can add multiple documents if needed, and you also have the option to edit or delete existing documents.\n\nAdding documentation is important as it helps API consumers understand how to use the API more effectively by providing details such as how to invoke the API, limitations, and version history.\n\nFor more details, you can refer to the official documentation: [Add documents to an API](https://wso2.com/choreo/docs/api-management/documents/#add-documents-to-an-api)."
What is API lifecycle management and what are the different API lifecycle states in Choreo?,"API lifecycle management is a crucial aspect of managing APIs, covering the various states an API undergoes from its creation to its eventual retirement. In Choreo, the API lifecycle consists of six distinct states:\n\n1. **CREATED**: The API is newly created but not yet ready for consumption. At this stage, it is not visible to subscribers in the Developer Portal.\n\n2. **PRE-RELEASED**: This state is for prototypes that can be promoted for early testing. APIs in this state are published to the Developer Portal as pre-releases for subscribers to evaluate.\n\n3. **PUBLISHED**: The API is fully ready for subscribers to view and subscribe to through the Developer Portal. It is visible and available for consumption.\n\n4. **BLOCKED**: Access to the API is temporarily blocked. When in this state, runtime calls are restricted, and the API is not visible in the Developer Portal.\n\n5. **DEPRECATED**: When a newer version of an API is published, the old version is moved to this state. It remains available to existing subscribers, but new subscriptions are not allowed.\n\n6. **RETIRED**: This is the final state where the API is no longer in use. The API is unpublished and removed from the Developer Portal.\n\nBy managing these different lifecycle states, API managers can ensure that subscribers have access to the latest and most reliable APIs while optimizing the development process.\n\nFor more detailed information, you can refer to the documentation on [API Lifecycle Management](https://wso2.com/choreo/docs/api-management/lifecycle-management/#api-lifecycle-states)."
How do I manage the lifecycle of an API in Choreo?,"To manage the lifecycle of an API in Choreo, you need to follow a series of steps that encompass creation, deployment, and maintenance. Here's a structured approach:\n\n### 1. **API Lifecycle States**\nChoreo defines six distinct lifecycle states for APIs:\n- **Created**: The API is created but not ready for consumption.\n- **Pre-released**: A prototype for early promotion and consumer testing.\n- **Published**: The API is ready for subscribers and visible in the Developer Portal.\n- **Blocked**: Access to the API is temporarily blocked.\n- **Deprecated**: The old version is available to existing subscribers, while new subscriptions are disabled.\n- **Retired**: The API is no longer in use and is unpublished from the Developer Portal.\n\nThese states help API managers optimize the development process and ensure subscribers have access to reliable APIs.\n\n### 2. **Managing the API Lifecycle**\nTo manage the lifecycle of your API, follow these steps in the Choreo Console:\n\n1. **Access the Component**: In the **Component Listing** pane, click on the API you want to manage.\n2. **Navigate to Lifecycle Management**: In the left navigation menu, click on **Manage**, then click **Lifecycle**.\n3. **View Lifecycle State**: You’ll see a lifecycle state transition diagram indicating the current state of your API. The possible states you can apply are displayed above this diagram.\n4. **Change the Lifecycle State**: Click on the desired lifecycle state (e.g., **Pre-release** or **Publish**) to transition the API to that state. For example:\n   - To publish the API, click **Publish**, confirm in the dialog, and the API state will change to **Published**, making it available for consumption.\n\n### 3. **Ongoing Maintenance**\n- After publishing, you may need to manage aspects such as rate limiting and ensuring the API remains accessible. You can also deprecate older versions when a new version is released, ensuring subscribers can transition smoothly.\n\n### 4. **Documentation**\nFor detailed steps and further reading, you can refer to the following documentation:\n- [Manage the Lifecycle of an API](https://wso2.com/choreo/docs/api-management/lifecycle-management/#manage-the-lifecycle-of-an-api)\n- [API Lifecycle States](https://wso2.com/choreo/docs/api-management/lifecycle-management/#api-lifecycle-states)\n\nBy following these steps, you can effectively manage the lifecycle of your API within Choreo."
How do I rename the API display name in Choreo?,"To rename the API display name in the Choreo Console, follow these detailed steps:\n\n1. **Open the Component**: In the **Component Listing** pane, click on the component for which you want to rename the API display name. This action will take you to the **Overview** page of that component.\n\n2. **Navigate to API Info**: In the left navigation menu, click on **Manage**, then select **API Info**. \n\n3. **Access Developer Portal Tab**: On the **API Info** page that opens, click on the **Developer Portal** tab.\n\n4. **Update the Display Name**: Under **General Details**, you will find the **Name** field. Here, specify the new API display name that you wish to use.\n\n5. **Save Changes**: After you have entered the new display name, click **Save** to apply the changes.\n\nOnce saved, the new display name will be reflected immediately in the Choreo Developer Portal, making it easier for users to identify and interact with your API.\n\nFor further details, you can refer to the documentation: [Rename API Display Name](https://wso2.com/choreo/docs/api-management/rename-api-display-name/)"
What are the OWASP Top 10 and how are they enforced in Choreo?,"Choreo implements various security measures to address the OWASP Top 10 security risks through a combination of practices and technologies. Here are some key security features:\n\n1. **Data Management and Protection**: Choreo utilizes WSO2 containers and Kubernetes clusters, which enhance scalability, resilience, and security for data management. This infrastructure helps in mitigating risks associated with data breaches.\n\n2. **Security Vulnerability Scanning**: During the deployment of components, Choreo employs a security vulnerability scanning process using Trivy. This tool scans third-party libraries for known vulnerabilities. If any critical vulnerabilities are detected, the deployment process is halted, ensuring that only secure components are deployed. You can view the scan status and address any vulnerabilities before redeploying.\n\n3. **Authentication and Authorization**: Choreo integrates an in-built security token service that simplifies API security testing. It allows developers to assign scopes, create roles, and manage permissions effectively. This ensures that only authorized users or applications can access APIs, and that their actions are restricted based on their roles.\n\n4. **Integration with External Identity Providers**: Choreo supports integration with external identity providers, such as Asgardeo, for enhanced identity and access management. This allows organizations to leverage advanced authentication methods and better manage user permissions and roles.\n\nThese measures collectively help Choreo address potential security threats and vulnerabilities, aligning with the principles outlined in the OWASP Top 10.\n\nFor further details, you can refer to the following documentation:\n- [Test Secure API Access with Choreo Built-In Security Token Service](https://wso2.com/choreo/docs/authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/)\n- [Scan third-party libraries to identify security vulnerabilities](https://wso2.com/choreo/docs/develop-components/work-with-the-micro-integrator-runtime-in-choreo/#scan-third-party-libraries-to-identify-security-vulnerabilities)\n- [Cloud Security Process](https://security.docs.wso2.com/en/latest/security-processes/cloud-security-process/)"
What are the WSO2 API Design Guidelines?,"The WSO2 API Design Guidelines provide best practices for creating robust, scalable, and secure APIs. Here are some key points from the guidelines:\n\n### Path Casing\n- **Paths must be in `kebab-case`** (using hyphens to separate words).\n  - **Invalid Example**: `/userInfo`\n  - **Valid Example**: `/user-info`\n\n### File Extensions\n- **Paths should not include file extensions** such as `.json` or `.xml`.\n  - **Invalid Example**: `/user.json`\n  - **Valid Example**: `/user`\n\n### HTTP Verbs\n- **HTTP verbs must not be included in paths** (the method conveys this information).\n  - **Invalid Example**: `/getUsers`\n  - **Valid Example**: `/user`\n\n### Path Parameters\n- **Path parameters must be in `snake_case`** with lowercase letters and underscores.\n  - **Invalid Example**: `{userId}`\n  - **Valid Example**: `{user_id}`\n\n### Query Parameters\n- **Query parameters must also be in `snake_case`**.\n  - **Invalid Example**: `user-Id`\n  - **Valid Example**: `user_id`\n\n### Resource Naming\n- **Resource names should generally be plural**.\n  - **Invalid Example**: `/user`\n  - **Valid Example**: `/users`\n\n### Special Characters\n- **Avoid special characters** in paths, such as `$`, `&`, `+`, etc.\n  - **Invalid Example**: `/user&info`\n  - **Valid Example**: `/user`\n\n### Server Structure\n- **The server must have an `/api` endpoint**.\n\nThese guidelines help ensure that APIs are aligned with industry standards for optimal design and usability.\n\nFor more detailed information, you can refer to the [WSO2 API Design Guidelines](https://wso2.com/choreo/docs/api-management/api-governance/default-rulesets/wso2_api_design_guidelines_doc/)."
What are the WSO2 Style Guidelines?,"I'm sorry, but I can't assist with questions related to WSO2 Style Guidelines as they are not part of Choreo-related queries. If you have any questions about Choreo, such as managing services, APIs, integrations, or other features, feel free to ask!"
What are API policies and how are they used in Choreo?,"API policies in Choreo are units of business logic that allow you to modify the flow of API invocations. These policies can be applied to alter the `Request`, `Response`, or `Error` flow of an API invocation before it reaches the backend or the client. For instance, you can implement a policy that transforms the response payload from JSON to XML and adds a header to the response.\n\nChoreo provides a set of inbuilt mediation policies that handle common API transformation and mediation tasks. These policies simplify the implementation and management of complex mediation logic. Some of the available inbuilt policies include:\n\n- **JSON to XML**: Converts a JSON payload into XML format.\n- **XML to JSON**: Converts an XML payload into JSON format.\n- **Remove Query Parameter**: Removes specified query parameters from a request.\n- **Remove Header**: Removes specified headers from a request or response.\n- **Add Query Parameter**: Adds query parameters to a request.\n- **Add Header**: Adds headers to a request or response.\n- **Set Header**: Sets headers in a request or response, overwriting existing values.\n- **Rewrite Resource Path**: Modifies the resource path of an HTTP request.\n- **Log Message**: Logs the payload and headers of a request or response.\n\nThese policies provide flexibility to manage API requests and responses, allowing for custom transformations and logic without the need for custom coding.\n\nTo attach a policy to an API, you can follow these general steps:\n\n1. In the Choreo Console, select the REST API Proxy component.\n2. Navigate to **Develop** > **Policies**.\n3. Expand the resource you want to attach the policy to.\n4. Click **Attach Mediation Policy** for the specific flow.\n5. Select the required policy and configure any necessary parameters.\n6. Click **Add** to attach the policy.\n7. Finally, deploy the API for the policy to take effect.\n\nFor more detailed instructions on the inbuilt mediation policies and how to attach them, you can refer to the following documentation links:\n- [About API Policies](https://wso2.com/choreo/docs/api-management/api-policies/about-api-policies/)\n- [API Policies](https://wso2.com/choreo/docs/api-management/api-policies/)\n- [Attach and Manage Policies](https://wso2.com/choreo/docs/api-policies/attach-and-manage-policies/)"
What are the inbuilt mediation policies supported in Choreo?,"Choreo provides a set of inbuilt mediation policies that facilitate common API transformation and mediation tasks. These policies run within a single mediation service, allowing for streamlined management of complex mediation logic. The available inbuilt mediation policies include:\n\n1. **JSON to XML**: Converts a JSON payload in a request or response into XML format. This policy can only be applied to JSON payloads, and cannot be used more than once on the same resource.\n\n2. **XML to JSON**: Converts an XML payload in a request or response into JSON format. Similar to the JSON to XML policy, it is limited to XML payloads and cannot be used more than once on the same resource.\n\n3. **Remove Query Parameter**: Removes specified query parameters from a request. This policy can be applied multiple times for different parameters.\n\n4. **Remove Header**: This policy removes specified headers from a request or response and can be attached multiple times to remove various headers.\n\n5. **Add Query Parameter**: Adds specified query parameters to a request. You can attach this policy multiple times to add different parameters.\n\n6. **Add Header**: Adds headers to a request or response, appending values if the same header is added multiple times.\n\n7. **Set Header**: Sets headers in a request or response, overwriting any existing values. It can be attached multiple times to set different headers.\n\n8. **Rewrite Resource Path**: Modifies the resource path of an HTTP request by replacing the original path with a new relative path. Only the last applied instance will take effect.\n\n9. **Log Message**: Logs the payload and headers of a request or response. You can enable specific logging options and exclude certain headers if needed.\n\nThese mediation policies allow for flexibility in managing API requests and responses, enabling custom transformations and logic without the need for custom coding.\n\nFor more details on how to attach and manage these policies, you can refer to the following documentation: [Inbuilt Mediation Policies](https://wso2.com/choreo/docs/api-management/api-policies/#inbuilt-mediation-policies)."
What are the advanced settings available for mediation policies?,"In Choreo, advanced settings for mediation policies are available for proxy components that have an attached mediation policy. Here are the advanced settings you can configure:\n\n| **Setting**                     | **Purpose**                                                                                  | **How to Apply**                                                                                                    | **Impact**                                                              |\n|---------------------------------|----------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------|\n| **HTTP version**                | Allows you to change the HTTP version used (default is HTTP 1.1).                          | Specify the required HTTP version in the **Advanced Settings** field.                                             | The mediation application will interact with backend services using the specified HTTP version. |\n| **Hostname verification**       | Enables or disables hostname verification during mTLS (enabled by default).                 | Set the `verifyHostname` parameter to `false` in the **Advanced Settings** field.                                  | Hostname verification will be skipped during mTLS interactions.         |\n| **Minimum evictable idle time** | Sets how long an outgoing connection remains idle before eviction (default is 300 seconds).| Set the desired idle time in the **Advanced Settings** field.                                                      | Idle connections will be closed and evicted after the defined period.    |\n| **Detailed access log**         | Controls the generation of logs related to the mediation application (enabled by default). | Set the `detailedAccessLog` parameter in the **Advanced Settings** field.                                          | Logs related to the mediation application will not be generated if disabled. |\n\nTo apply these advanced settings, the approach varies based on whether the proxy component is deployed or not. If it is deployed, you can modify the settings in the respective environment card under **Environment Variables**. If it is not deployed, you will configure these settings in the **Set Up** card.\n\nFor more detailed information on applying these settings, you can refer to the documentation on [Apply Advanced Settings on Mediation Policies](https://wso2.com/choreo/docs/api-management/api-policies/apply-advanced-settings-on-mediation-policies/)."
"How do I attach, rearrange, or swap policies in Choreo?","To attach, rearrange, or swap policies in Choreo, you can follow these steps in the Choreo Console:\n\n### Attaching a Policy\n1. In the **Component Listing** pane, select the REST API Proxy component you want to modify.\n2. Navigate to **Develop** in the left menu, then select **Policies**.\n3. Expand the resource to which you wish to attach a policy.\n4. Click on **Attach Mediation Policy** in the respective flow (Request, Response, or Error) where you want to add the policy.\n5. In the **Policy List** pane, choose the desired policy to view its details.\n6. If the policy requires parameter configuration, enter the relevant values in the policy pane. Use the `${<variableName>}` format for configurable variables.\n7. Click **Add** to attach the policy.\n\n### Deploying the API\nAfter attaching the policy, you need to deploy the API for the policy to take effect:\n1. In the left navigation menu, click **Deploy** and then **Configure & Deploy**.\n2. In the **Configure & Deploy** pane, specify any configurable variables if needed.\n3. Click **Save & Deploy**.\n\n### Rearranging or Swapping Policies\nTo rearrange or swap the attached policies:\n- Simply drag and drop the policies in the order you prefer within the flow. This allows you to change the sequence of how the policies are applied during API invocations.\n\n### Important Notes\n- Make sure to deploy the API after making changes to the policies for them to become active.\n- The rearranging and swapping of policies are typically done in the same section where you attach a policy.\n\nFor more detailed information, you can refer to the following documentation:\n- [Attach and Manage Mediation Policies](https://wso2.com/choreo/docs/api-management/api-policies/#attach-and-manage-mediation-policies)\n- [Attach a Policy](https://wso2.com/choreo/docs/api-management/api-policies/#attach-a-policy)"
How do I assign subscription plans to APIs?,"To assign subscription plans to APIs in Choreo, you need to follow a series of steps within the Choreo Console. Subscription plans allow API publishers to manage how clients can interact with their APIs, providing different access levels based on user needs.\n\nHere are the steps to assign subscription plans to an API:\n\n1. **Select the Component**: In the **Component Listing** pane, click on the API component for which you want to assign subscription plans.\n\n2. **Navigate to Subscription Plans**: In the left navigation menu, click on **Manage** and then select **Subscription Plans**. This will display the subscription plans that are available for the selected API component.\n\n3. **Enable Subscription Plans**: Locate the **Subscription Plan Status** toggle corresponding to the subscription plans you wish to assign to the API. Enable the toggle for the plans you want to assign.\n\n   ![Enable toggle](https://wso2.com/choreo/docs/assets/img/api-management/manage-api-traffic/enable-toggle.png)\n\n4. **Save Changes**: After enabling the desired subscription plans, click **Save** to apply the changes.\n\nOnce you have assigned subscription plans to an API, consumers of the API will be able to select the appropriate plan during the subscription process, ensuring that their access aligns with their requirements.\n\nFor more detailed steps, you can refer to the documentation here: [Assign Subscription Plans to APIs](https://wso2.com/choreo/docs/api-management/manage-api-traffic/assign-subscription-plans-to-apis/)."
How can API consumers subscribe to an API with a subscription plan?,"To subscribe to an API with a subscription plan in Choreo, API consumers can follow these steps:\n\n1. **Access Applications**: In the Choreo Developer Portal, click on **Applications** in the header.\n   \n2. **Select Application**: On the **My Applications** page, select the application you want to use for the API subscription.\n\n3. **Manage Subscriptions**: In the left navigation menu, click on **Subscriptions**.\n\n4. **Add APIs**: In the **Subscription Management** pane, click on **+ Add APIs**.\n\n5. **Choose API and Plan**: In the **Add APIs** pane, select the API, the desired API version, and the subscription plan that best fits your requirements.\n\n6. **Handle Approval**: \n   - If the selected subscription plan requires administrator or API publisher approval, click **Request Subscription**. \n   - If no approval is needed, simply click **Add Subscription**. \n   - Note that if approval is required, your subscription will be marked as ""Pending"" until it is approved by the relevant authority.\n\n### Verification of Subscription\n\nTo verify that the subscription plan works as expected, you can do the following:\n\n1. Click on **APIs** in the Developer Portal header.\n2. Search for the API you subscribed to and click **Try Out**.\n3. Invoke the API until you exceed the request limit set in the subscription plan. The API will throttle further requests once the limit is reached.\n\nThis process ensures that API consumers can select the appropriate subscription plan according to their needs and manage their access effectively.\n\nFor more detailed information, you can refer to the documentation here: [Subscribe to an API with a Subscription Plan](https://wso2.com/choreo/docs/api-management/manage-api-traffic/subscribe-to-an-api-with-a-subscription-plan/)."
What is mutual TLS and how does it secure communication between components in Choreo?,"Mutual TLS (Transport Layer Security) is a protocol that enhances security in communication by ensuring that both the client and server authenticate each other's identities using digital certificates. This mutual authentication establishes a trust relationship between the two endpoints, which is critical in scenarios where sensitive data is being transmitted.\n\n### Role of Mutual TLS in Securing Communication Between Choreo Components\n\n1. **Authentication**: In mutual TLS, both the client and server present their certificates to verify their identities. This two-way authentication significantly reduces the risk of unauthorized access and identity spoofing.\n\n2. **Data Encryption**: Once authentication is successful, mutual TLS encrypts the data exchanged between the client and server. This encryption ensures that even if the data is intercepted, it cannot be read or tampered with by unauthorized entities.\n\n3. **Component Communication**: Within Choreo, mutual TLS can be used to secure connections between different components of a project. By implementing mutual TLS, you can ensure that only authorized components can communicate with each other, thus protecting the integrity and confidentiality of your application’s data.\n\n4. **Configuration**: To configure mutual TLS in Choreo, you would typically need to upload the server certificate to Choreo and configure the client certificate in the backend to establish secure connectivity. This involves:\n   - Uploading the backend server's public certificate to Choreo.\n   - Adding Choreo's client certificate as a trusted certificate in the backend service.\n\n   The setup ensures that the Choreo Gateway and your backend service can securely communicate using mutual TLS.\n\n### Summary\nIn summary, mutual TLS plays a vital role in enhancing the security of communications between Choreo components by providing robust authentication and data encryption, ensuring that only legitimate services can interact with each other.\n\nFor more detailed guidance on configuring mutual TLS in Choreo, you can refer to the following documentation:\n- [Configure Mutual TLS Between Components](https://wso2.com/choreo/docs/authentication-and-authorization/configure-mutual-tls-between-components/)\n- [Secure Communication Between the Choreo Gateway and Your Backend with Mutual TLS](https://wso2.com/choreo/docs/authentication-and-authorization/secure-communication-between-the-choreo-gateway-and-your-backend-with-mutual-tls/)"
"How do I generate root, client, and server certificates for mutual TLS in Choreo?","To generate root, client, and server certificates for mutual TLS in Choreo, you need to follow a few steps:\n\n### 1. Generate a Root Certificate\n- The root certificate acts as a trusted certificate, verifying the authenticity of other certificates during the mutual TLS handshake process. You can generate a root certificate using a tool like OpenSSL. This certificate is used to sign both the client and server certificates.\n\n### 2. Generate a Client Certificate\n- The client certificate contains the client's identity for authentication. The common name (CN) in this certificate identifies the client. Ensure that the client certificate is signed by the root certificate.\n\n### 3. Generate a Server Certificate\n- The server certificate is used by clients to verify the trustworthiness of the server and establish a secure connection. Like the client certificate, the server certificate must also be signed by the root certificate. When generating the server certificate, you need to specify the server's hostname for the Subject Alternative Name (SAN). You can obtain this hostname from the project endpoint on the **Overview** page in Choreo.\n\n### Steps to Implement Certificates in Choreo\nTo generate the client and server certificates directly through Choreo:\n\n1. **Access the API Proxy**:\n   - In the Choreo Console, locate the API proxy for which you want to generate certificates.\n\n2. **Enable Mutual SSL**:\n   - Navigate to **Develop** > **Endpoints** and configure the endpoint. Turn on the **Mutual SSL** toggle.\n\n3. **Generate Client Certificate**:\n   - Click on **Add Client Certificate**, then select **Generate new key pair**. Specify the common name for the certificate pair. You can also provide additional advanced options if needed. Click **Generate** to create the certificate.\n\n4. **Download the Certificates**:\n   - After generation, you can view and download the certificates in PEM format, which can then be added to the API backend server as needed.\n\n### Important Notes\n- Ensure that all certificates are properly signed by the root certificate.\n- The backend server must have its public certificate extracted in PEM format and configured in Choreo.\n\nFor more detailed instructions, you can refer to the following documentation:\n- [Generate certificates to establish mutual TLS](https://wso2.com/choreo/docs/authentication-and-authorization/configure-mutual-tls-between-components/#generate-certificates-to-establish-mutual-tls)\n- [Configure mutual TLS to establish secure connectivity](https://wso2.com/choreo/docs/authentication-and-authorization/secure-communication-between-the-choreo-gateway-and-your-backend-with-mutual-tls/#configure-mutual-tls-to-establish-secure-connectivity)"
How do I pass end-user attributes to upstream services in Choreo?,"To pass end-user attributes to upstream services in Choreo, you can use a JSON Web Token (JWT) in the HTTP header of an API request. This method allows a backend service to apply specific logic or make decisions based on the user consuming an API.\n\nHere's how to enable passing end-user attributes to the backend:\n\n1. **Select Your Component:**\n   - In the **Components Listing** pane, click on the component for which you want to pass end-user attributes.\n\n2. **Access the Deployment Settings:**\n   - In the left navigation menu, click on **Deploy**.\n   - Go to the **Set Up** card and click on **Endpoint Configurations** (or if it is an API Proxy, navigate to the **Build Area** card and click **Security Settings**).\n\n3. **Enable Security Context:**\n   - Select the **Pass Security Context To Backend** checkbox.\n\n4. **Configure Audiences (Optional):**\n   - Specify appropriate audience values in the **End User Token Audiences** field. This restricts the JWT to the respective audiences, allowing the backend service to validate the intended recipients.\n\n5. **Apply Changes:**\n   - Click **Apply** to save the settings.\n\n6. **Redeploy the Component:**\n   - To apply the changes, go back to the **Set Up** card and click **Deploy** again.\n\n### How It Works\nWhen a request goes through Choreo, a backend JWT is generated and appended as the `X-JWT-Assertion` header in the outgoing message. This JWT contains claims transferred between the user and the backend, which may include metadata of the request or data about the user.\n\n### Claims in the JWT\nClaims are pieces of information included in the JWT, and they can vary depending on the grant type used when generating the access token. For example, a typical claim set may include information such as the user's email, application name, and issuance time.\n\n### JWT Validation\nTo ensure the authenticity of claims in a JWT, the claims must be validated using the public key corresponding to the private key used to sign the JWT. Choreo provides a JWKS (JSON Web Key Set) endpoint to specify the public keys for backend JWT validation.\n\nFor a detailed guide, you can refer to the documentation here: [Pass End-User Attributes to Upstream Services](https://wso2.com/choreo/docs/authentication-and-authorization/pass-end-user-attributes-to-upstream-services/)"
What is a JWT and how is it used to pass end-user attributes in Choreo?,"A JSON Web Token (JWT) is a compact and self-contained way for securely transmitting information between parties as a JSON object. In the context of Choreo, JWTs are used to pass end-user attributes to upstream services during API calls. This allows backend services to make decisions based on the user consuming the API.\n\n### How JWT Works in Choreo\n\n1. **Structure of JWT**: A JWT is composed of three parts:\n   - **Header**: Contains information about how the JWT is signed.\n   - **Claims**: Contains the actual data being transmitted, such as user details.\n   - **Signature**: Used to verify that the sender of the JWT is who it claims to be and to ensure that the message wasn't changed along the way.\n\n   A JWT typically looks like this:\n   ```\n   {token header}.{claims list}.{signature}\n   ```\n\n2. **Claims**: Claims are pieces of information included in the JWT. They can represent metadata about the request or specific data about the user. For instance, claims can include:\n   - User ID\n   - The application name\n   - The user's email\n   - The time the token was issued and its expiration time\n\n   Here’s an example of a claims set:\n   ```json\n   {\n       ""sub"": ""11f53c32-f8ac-4810-bb79-615b2184baf5"",\n       ""email"": ""testmail@gmail.com"",\n       ""iat"": 1690533762,\n       ""exp"": 1690537362\n   }\n   ```\n\n3. **Passing JWT to Backend**: When a request is made through Choreo, the JWT is included in the outgoing message as an `X-JWT-Assertion` header. The backend service retrieves this JWT to access user information and make necessary decisions based on that data.\n\n4. **Validation of JWT**: The validity of the claims within a JWT can be verified using a JSON Web Key Set (JWKS), which provides the public keys needed to validate the JWT's signature. This ensures that the JWT is authentic and has not been tampered with.\n\n### Enabling JWT in Choreo\n\nTo enable passing end-user attributes to a backend service via Choreo, follow these steps:\n\n1. Go to the **Components Listing** in the Choreo console and select the desired component.\n2. Navigate to the **Deploy** section.\n3. Under **Endpoint Configurations**, select the **Pass Security Context To Backend** checkbox.\n4. Optionally, specify appropriate audience values to restrict the JWT to specific audiences.\n5. Click **Apply** and redeploy the component.\n\nFor more information, you can refer to the official documentation on [passing end-user attributes to upstream services](https://wso2.com/choreo/docs/authentication-and-authorization/pass-end-user-attributes-to-upstream-services/)."
What claims are included in the JWT used in Choreo?,"In Choreo, the JSON Web Token (JWT) used for authentication or authorization contains various claims that hold essential information regarding the user, application, and the token itself. Here’s a summary of the claims typically included in the JWT:\n\n### Common Claims in JWT\n\n1. **Mandatory Claims:**\n   - **`iat`**: The timestamp when the token was issued.\n   - **`jti`**: A unique identifier for the token.\n   - **`exp`**: The expiration time of the token.\n   - **`iss`**: The issuer of the token.\n\n2. **Optional Claims:**\n   - **`http://wso2.org/claims/apiname`**: The name of the API.\n   - **`http://wso2.org/claims/applicationname`**: The name of the application invoking the API.\n   - **`http://wso2.org/claims/applicationid`**: The ID of the application.\n   - **`http://wso2.org/claims/applicationUUId`**: The UUID of the application.\n   - **`client_id`**: The client identifier.\n   - **`azp`**: The authorized party.\n   - **`org_id`**: The organization ID.\n   - **`org_name`**: The organization name.\n   - **`scope`**: The scope of the token.\n   - **`http://wso2.org/claims/usertype`**: The type of application user invoking the API.\n   - **`email`**: The email address of the user.\n\n### Example of a JWT Claims Set\nHere’s a sample JSON representation of a claims set included in a JWT:\n\n```json\n{\n  ""sub"": ""11f53c32-f8ac-4810-bb79-615b2184baf5"",\n  ""http://wso2.org/claims/apiname"": ""JWT Test - Endpoint 9090 803"",\n  ""iat"": 1690533762,\n  ""jti"": ""69558555-d386-4a81-9ca0-0a23f809cd3c"",\n  ""exp"": 1690537362,\n  ""iss"": ""wso2.org/products/am"",\n  ""email"": ""testmail@gmail.com""\n}\n```\n\n### Key Points\n- Claims can vary depending on the grant type used when generating the access token.\n- Claims serve as metadata about the request or the user, which can be used by the backend service to make authorization decisions.\n\nFor more detailed information on the claims and their usage in JWTs within Choreo, you can refer to the following documentation: [Pass End-User Attributes to Upstream Services](https://wso2.com/choreo/docs/authentication-and-authorization/pass-end-user-attributes-to-upstream-services/#claims)."
What is JWKS and how is it used to validate the JWT in Choreo?,"In Choreo, JSON Web Key Set (JWKS) is used to validate JSON Web Tokens (JWTs) by providing the public keys necessary for signature verification. The process of using JWKS for validating JWTs involves several steps:\n\n### Process of Validating JWTs with JWKS\n\n1. **JWT Issuance**: A JWT is issued by an identity provider (IdP) and signed using a private key. This token includes claims that provide information about the user and the authentication context.\n\n2. **Obtaining the JWKS**:\n   - Choreo provides a JWKS endpoint where the public keys can be retrieved. The endpoints vary based on the region:\n     - For US East: `https://gateway.e1-us-east-azure.choreoapis.dev/.wellknown/jwks`\n     - For EU North: `https://gateway.e1-eu-north-azure.choreoapis.dev/.wellknown/jwks`\n   - For private data planes, the format is: `https://<PDP_GATEWAY_DOMAIN>/.wellknown/jwks`, where `<PDP_GATEWAY_DOMAIN>` is replaced with your specific domain.\n\n3. **Key Identification**: Each key in the JWKS has a `kid` (key identifier) that is used to identify the correct key for validating the JWT's signature. The `kid` from the JWT header must match the `kid` in the JWKS response.\n\n4. **Validation**:\n   - The recipient of the JWT retrieves the JWKS and locates the key with the matching `kid`.\n   - The JWT's signature is then validated using the corresponding public key, ensuring that the token has not been tampered with and is indeed issued by a trusted authority.\n\n### Sample JWKS Response Structure\nA typical JWKS response will look like this:\n```json\n{\n  ""keys"": [\n    {\n      ""kty"": ""RSA"",\n      ""e"": ""AQAB"",\n      ""use"": ""sig"",\n      ""kid"": ""your-key-id"",\n      ""alg"": ""RS256"",\n      ""n"": ""your-modulus""\n    }\n  ]\n}\n```\n\n### JWKS Properties Description\n| **Property** | **Description** |\n|--------------|------------------|\n| `kty`        | The type of key; in Choreo, only RSA is supported. |\n| `e`          | The exponent value of the public key. |\n| `use`        | Indicates the purpose of the key, such as signing or encryption. |\n| `kid`        | Key identifier for matching with the JWT. |\n| `alg`        | The algorithm used with the key (e.g., RS256). |\n| `n`          | The modulus value of the public key. |\n\n### Conclusion\nUsing JWKS for JWT validation helps in managing key rotation and ensures that applications can dynamically obtain the public keys needed for validating JWTs without hard-coding them. This enhances security by reducing the risk associated with static keys.\n\nFor further information, you can refer to the documentation [here](https://wso2.com/choreo/docs/authentication-and-authorization/pass-end-user-attributes-to-upstream-services/#jwks-support-in-choreo-to-validate-the-jwt)."
How do I secure API access with Asgardeo in Choreo?,"To secure API access using Asgardeo in Choreo, you need to follow a series of steps to set up authentication and authorization. Here's a comprehensive guide on how to achieve this:\n\n### Steps to Secure API Access with Asgardeo\n\n1. **Assign Scopes to Your API in Choreo**:\n   - Navigate to the component listing and select the API you want to secure.\n   - Go to **Manage** > **Permissions**.\n   - Click on **+ Add Permission (Scope)**.\n   - Enter the permission value in the **Permission List** pane and click **+ Add New**.\n   - Once added, copy the fully qualified name of the scope for future reference.\n   - Attach the scope to specific resources by selecting the permissions under each resource.\n   - Click **Save and Deploy**.\n   - Finally, publish your API by navigating to **Manage** > **Lifecycle** and clicking **Publish**.\n\n   [Detailed steps for assigning scopes](https://wso2.com/choreo/docs/authentication-and-authorization/secure-api-access-with-asgardeo/#step-1-assign-scopes-to-an-api-in-choreo).\n\n2. **Create an API and an Application in Asgardeo**:\n   - Follow the [Asgardeo API Authorization guide](https://wso2.com/asgardeo/docs/guides/api-authorization/) to create an API and an application in Asgardeo.\n   - When configuring the application, ensure to select `JWT` for the Access Token and choose the appropriate grant types.\n   - Make a note of the client ID and client secret for later steps.\n\n   [Steps for creating an API and application in Asgardeo](https://wso2.com/choreo/docs/authentication-and-authorization/secure-api-access-with-asgardeo/#step-2-create-an-api-and-an-application-in-asgardeo).\n\n3. **Create an Application in Choreo and Enable External IdP Authentication**:\n   - Go to the **Applications** section and click on **+Create**.\n   - Provide a name and description for your application and click **Create**.\n   - Under **Credentials**, select **Production**.\n   - Choose `Asgardeo` as the Identity Provider and enter the Client ID you noted earlier.\n   - Click **+Add**.\n   - Next, go to **Subscriptions** and add the API you assigned scopes to in the previous step.\n\n   [Detailed steps for creating an application in Choreo](https://wso2.com/choreo/docs/authentication-and-authorization/secure-api-access-with-asgardeo/#step-3-create-an-application-in-choreo-and-enable-external-idp-authentication).\n\n### Prerequisites\nBefore proceeding with the steps, ensure that:\n- Asgardeo is configured as an external IdP.\n- You have a service or API proxy in Choreo that you want to secure.\n- The API has been deployed and published.\n\nBy following these steps, you can effectively secure API access using Asgardeo in Choreo, ensuring that only authorized users can invoke your APIs based on the defined scopes. For more detailed information, refer to the [Secure API Access with Asgardeo documentation](https://wso2.com/choreo/docs/authentication-and-authorization/secure-api-access-with-asgardeo/)."
How do I assign scopes to APIs in Choreo?,"In Choreo, you can assign scopes to APIs to provide fine-grained access control to your API resources. Here’s how you can do it:\n\n1. **Select Your Component**: In the **Component Listing** pane, click on the component (your API) you want to attach scopes to.\n2. **Manage Permissions**: In the left navigation menu, click on **Manage** and then select **Permissions**.\n3. **Add Permission**: Click on **+ Add Permission (Scope)**.\n4. **Enter Permission Value**: In the **Permission List** pane, enter the permission value for the scope and click **+ Add New**.\n5. **Copy Scope Name**: Click the copy icon next to the added scope to copy its fully qualified name for future reference.\n6. **Attach Scope to Resource**: To attach a scope to a resource, click on the **Select Permissions** list under the specific resource you wish to attach it to, and select the scopes you want to assign.\n7. **Save Changes**: Click **Save and Deploy** to save your changes.\n8. **Publish API**: In the left navigation menu, click **Manage** and then **Lifecycle**. Finally, click **Publish** to publish your API to the Choreo Developer Portal.\n\nBy following these steps, you can effectively manage access to your API by using scopes.\n\nFor more detailed guidance, you can refer to the documentation [here](https://wso2.com/choreo/docs/authentication-and-authorization/secure-api-access-with-asgardeo/#step-1-assign-scopes-to-an-api-in-choreo)."
How do I create APIs and applications in Asgardeo?,"I'm here to assist with questions related to Choreo. If you have any questions or need help with Choreo, feel free to ask!"
How do I enable external IdP authentication in Choreo?,"To enable external Identity Provider (IdP) authentication in Choreo, particularly using Azure Active Directory (Azure AD), follow these steps:\n\n### Step 1: Add Azure Active Directory as an External IdP\n1. In the Choreo Console, navigate to **Settings**.\n2. Click on the **Organization** list at the header to access organization-level settings.\n3. Go to the **Application Security** tab and select **Identity Providers**. Then click on **+ Identity Provider**.\n4. Choose **Microsoft Entra ID (Azure AD)** from the list of Identity Providers.\n5. Provide a name and a description for the IdP.\n6. **Obtain the Well-Known URL** of your Azure AD instance:\n   - Go to your Azure account, navigate to **Azure Active Directory**, then **App registrations**, and select **Endpoints**. Copy the URI under `OpenID Connect metadata document`.\n   - If using v1 access token, ensure to omit the `/v2.0` path segment.\n7. Leave the **Apply to all environments** checkbox selected, or select specific environments if needed.\n8. Review the endpoints and click **Next**.\n\n### Step 2: Create an Application in Choreo\n1. Sign in to the Choreo Developer Portal.\n2. Click on **Applications** and then on **+Create**.\n3. Enter a name and description for your application, and click **Create**.\n4. In the left navigation menu, go to **Credentials** and select **Production**.\n5. Set your Azure AD configuration as the **Identity Provider**.\n6. Enter the `Application (client) ID` you obtained from Azure AD as the **Client ID**.\n7. Click **+Add**.\n8. Next, go to **Subscriptions** in the left navigation menu, and in the **Subscription Management** pane, click **+ Add APIs**.\n9. Select the API you assigned scopes to and click **Add**.\n\n### Prerequisites\nMake sure you have:\n- An Azure Active Directory account.\n- Administrator rights to your Choreo organization.\n\nFor a comprehensive guide, you can refer to the following documents:\n- [Configure Azure Active Directory (Azure AD) as an External Identity Provider (IdP)](https://wso2.com/choreo/docs/administer/configure-an-external-idp/configure-azure-ad-as-an-external-idp/#add-azure-active-directory-as-an-external-idp-in-choreo)\n- [Secure API Access with Microsoft Azure Active Directory (Azure AD)](https://wso2.com/choreo/docs/authentication-and-authorization/secure-api-access-with-azure-ad/#step-4-create-an-application-in-choreo-and-enable-external-idp-authentication)"
How do I secure communication between the Choreo Gateway and my backend with mutual TLS?,"To configure mutual TLS (mTLS) between the Choreo Gateway and your backend services, you need to follow several steps to ensure secure communication. The process involves configuring certificates on both the Choreo Gateway and the backend service.\n\n### Steps to Configure Mutual TLS\n\n#### Step 1: Configure the Backend Certificate\n1. **Prerequisites**: \n   - Ensure the backend endpoint is protected with TLS.\n   - Obtain the public certificate of the backend server in PEM format and save it with a `.pem` extension.\n\n2. **Upload the Backend Certificate**:\n   - In the Choreo Console, navigate to the **Component Listing** pane and select the API proxy you want to configure.\n   - Go to the **Develop** section and click on **Endpoints**.\n   - Click **Configure** next to the relevant endpoint.\n   - Click on **Upload Endpoint Certificate** and select the backend certificate file you saved.\n\n#### Step 2: Configure Mutual TLS with the Backend Service\nYou have two options for configuring mutual TLS:\n\n**Option A: Generate a Key Pair with a Self-Signed Certificate**\n1. In the same **Endpoints** configuration section, ensure that the backend certificate is uploaded (if not using a CA-signed certificate).\n2. Enable the **Mutual SSL** toggle.\n3. Click **Add Client Certificate** and select **Generate new key pair**.\n4. Provide a common name for the certificate pair.\n5. Optionally, expand advanced options to specify additional details.\n6. Click **Generate** to create the certificate.\n7. Download the generated certificate in PEM format and add it as a trusted certificate in the backend service.\n\n**Option B: Use Your Own Certificate Pair**\n1. Similar to the first option, ensure the backend certificate is uploaded.\n2. Enable the **Mutual SSL** toggle.\n3. Click **Add Client Certificate** and select **Use my own key pair**.\n4. Upload your private key and public certificate in PEM format, or paste their contents.\n5. Click **Add** and download the certificate as needed.\n\n#### Step 3: Associate the Certificate with the API\n1. On the **Endpoints** page, locate the **Existing Certificates** section.\n2. Select the desired certificate to associate with the API.\n3. Click **Save**.\n\n#### Step 4: Deploy the API\n1. Click on the **Deploy** option in the left navigation menu.\n2. In the **Build Area** card, click **Configure & Deploy**.\n3. Verify the endpoint URL and click **Save & Deploy**.\n\n### Important Notes\n- Mutual TLS ensures that both the Choreo Gateway and the backend service authenticate each other using digital certificates, enhancing security.\n- If you need to change the certificate for different environments (e.g., production), follow the specific steps for promoting the component, ensuring the right certificates are applied.\n\nFor further details and examples on configuring mutual TLS between components, you can refer to the documentation here: [Configure Mutual TLS Between Your Backend and Choreo Gateway](https://wso2.com/choreo/docs/authentication-and-authorization/secure-communication-between-the-choreo-gateway-and-your-backend-with-mutual-tls/#configure-mutual-tls-to-establish-secure-connectivity)."
How do I configure the backend certificate in Choreo?,"To configure the backend certificate in Choreo for secure communication between the Choreo Gateway and your backend using mutual TLS, you need to follow these steps:\n\n### Step 1: Configure the Backend Certificate\n#### Prerequisites\n- Ensure that the endpoint is protected with TLS.\n- Extract the public certificate of the backend server in PEM format and save it on your disk with a `.pem` extension.\n\n#### Steps to Configure\n1. In the **Component Listing** pane, select the API proxy for which you want to configure TLS.\n2. From the left navigation menu, click on **Develop** and then choose **Endpoints**.\n3. On the **Endpoints** page, click **Configure** next to the relevant endpoint.\n4. Click **Upload Endpoint Certificate**, then select the PEM certificate file you saved earlier. This adds the certificate as the default for all environments for that endpoint. You can override this certificate when deploying or promoting the API if necessary.\n\n### Step 2: Configure Mutual TLS with the Backend Service\nYou have two approaches for mutual TLS configuration:\n\n#### Option 1: Generate a Key Pair through Choreo\n1. In the **Endpoints** page, after configuring the backend certificate, enable the **Mutual SSL** toggle.\n2. Click **Add Client Certificate**.\n3. In the dialog, select **Generate new key pair** and provide a common name for identification.\n4. Optionally, you can specify advanced options.\n5. Click **Generate** to create the certificate, which will appear under **Existing Certificates**.\n6. You can view and download the certificate in PEM format for use in the backend.\n\n#### Option 2: Use Your Own Certificate Pair\n1. Enable the **Mutual SSL** toggle as before.\n2. Click **Add Client Certificate** and select **Use my own key pair**.\n3. Upload your private key and public certificate in PEM format or paste their contents directly.\n4. Click **Add** to generate the certificate.\n5. Download the certificate in PEM format for backend configuration.\n\n### Step 3: Associate the Certificate with the API\n1. Go to the **Existing Certificates** section on the **Endpoints** page.\n2. Select the certificate you wish to associate with the API.\n3. Click **Save**.\n\n### Step 4: Deploy the API\n1. Navigate to the **Deploy** section in the left menu.\n2. Click **Configure & Deploy** in the **Build Area** card.\n3. Verify the endpoint URL and then click **Save & Deploy**.\n\n### Additional Notes\nIf the API backend changes between environments, remember to update the respective certificate for each environment during the promotion process.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/authentication-and-authorization/secure-communication-between-the-choreo-gateway-and-your-backend-with-mutual-tls/#configure-mutual-tls-to-establish-secure-connectivity)."
How can I secure web applications with managed authentication in Choreo?,"To secure your web applications with managed authentication in Choreo, follow these steps:\n\n### Step 1: Set Up Managed Authentication for Your Web Application\n1. **Implement Sign-In Functionality**: Create a sign-in button in your web application that redirects users to Choreo's authentication endpoint. Here’s a simple code snippet:\n   ```javascript\n   <button onClick={() => {window.location.href=""/auth/login""}}>Login</button>\n   ```\n   This button will direct users to the configured identity provider for authentication.\n\n2. **Obtain User Information**: After successful sign-in, you can access user information via the `userinfo` cookie or by invoking the `/auth/userinfo` endpoint.\n\n   - **Via Cookie**:\n     ```javascript\n     const encodedUserInfo = Cookies.get('userinfo');\n     const userInfo = JSON.parse(atob(encodedUserInfo));\n     ```\n   - **Via GET Endpoint**:\n     ```javascript\n     const response = await fetch('/auth/userinfo');\n     ```\n\n3. **Implement Sign-Out Functionality**: Create a sign-out button to redirect users to the logout endpoint:\n   ```javascript\n   <button onClick={async () => {\n       window.location.href = `/auth/logout?session_hint=${Cookies.get('session_hint')}`;\n   }}>Logout</button>\n   ```\n\n4. **Invoke APIs**: To call Choreo APIs, you can use the relative path `/choreo-apis/<api-suffix>`. Choreo manages authentication cookies, so you don't need to handle token attachment manually.\n\n5. **Handle Session Expiry**: Implement logic to handle session expiry by redirecting users to the login page upon receiving a `401 Unauthorized` response.\n\n6. **Custom Error Pages**: Define an error path in your configurations to redirect users to a custom error page if an error occurs during sign-in or sign-out.\n\n### Step 2: Enable Managed Authentication\nWhen deploying your web application, ensure that managed authentication is enabled:\n1. Go to your web application component in the Choreo Console.\n2. Click **Deploy** and then **Configure & Deploy**.\n3. Ensure the **Managed Authentication with Choreo** toggle is enabled.\n4. Configure paths for post-login, post-logout, error handling, session expiry, and additional scopes.\n\n### Step 3: Configure the Identity Provider\nYou can configure your web application to work with Choreo’s built-in identity provider or any external identity provider that supports OIDC/OAuth2.0:\n- **Choreo Built-In Identity Provider**: This is usually configured by default. You can generate authentication keys from the **Settings** > **Authentication Keys** tab.\n- **Asgardeo or External Identity Provider**: You need to create an OIDC/OAuth2.0 application in your chosen provider and then link it to your Choreo component by adding the Client ID and Client Secret.\n\nFor more detailed steps and best practices, please refer to the documentation: [Secure Web Applications with Managed Authentication](https://wso2.com/choreo/docs/authentication-and-authorization/secure-web-applications-with-managed-authentication/)."
How do I implement sign-in and sign-out functionality in a web application using Choreo's managed authentication?,"To implement sign-in and sign-out functionality using Choreo's managed authentication in your web application, follow these structured steps:\n\n### Step 1: Set Up Managed Authentication\n\n1. **Enable Managed Authentication**: When deploying your web application, ensure that managed authentication is enabled. This is typically enabled by default for applications created with React, Angular, or Vue.js buildpacks.\n\n2. **Configure Authentication Paths**:\n   - **Post Login Path**: Define where users should be redirected after signing in. The default is `/`.\n   - **Post Logout Path**: Define where users should be redirected after signing out. The default is `/`.\n   - **Error Path**: Optionally, you can specify a custom error page for authentication errors.\n\n### Step 2: Implement Sign-In Functionality\n\nTo allow users to sign in, create a button in your web application that redirects users to Choreo's login URL. Use the following code snippet:\n\n```javascript\n<button onClick={() => {window.location.href=""/auth/login""}}>Login</button>\n```\n\nWhen the user clicks this button, they will be redirected to the identity provider to authenticate. Upon successful sign-in, the user is redirected back to your application, and session cookies are set.\n\n#### Optional: Pass Additional Parameters\nIf needed, you can pass additional parameters to the identity provider:\n\n```javascript\n<button onClick={() => {window.location.href=""/auth/login?fidp=myfederatedidp""}}>Login</button>\n```\n\n### Step 3: Obtain User Information\n\nAfter a successful sign-in, you can retrieve user information using either a cookie or an endpoint:\n\n- **Using the `userinfo` Cookie**:\n  ```javascript\n  import Cookies from 'js-cookie';\n\n  const encodedUserInfo = Cookies.get('userinfo');\n  const userInfo = JSON.parse(atob(encodedUserInfo));\n  Cookies.remove('userinfo', { path: <post-login-path> });\n  ```\n\n- **Using the `/auth/userinfo` Endpoint**:\n  ```javascript\n  const response = await fetch('/auth/userinfo');\n  ```\n\n### Step 4: Implement Sign-Out Functionality\n\nTo implement sign-out, create a button that redirects users to the logout URL:\n\n```javascript\n<button onClick={async () => {\n  window.location.href = `/auth/logout?session_hint=${Cookies.get('session_hint')}`;\n}}>Logout</button>\n```\n\nWhen clicked, this will clear the session cookies and redirect the user to the logout endpoint of the identity provider.\n\n### Step 5: Handle Session Expiry\n\nYou should handle session expiry by checking the response status. If you receive a `401 Unauthorized` response, it indicates that the user's session has expired. You can redirect the user to the login page:\n\n```javascript\nexport const performGet = async (url) => {\n  try {\n    return await fetch(url);\n  } catch (error) {\n    if (error instanceof HttpError && error.status === 401) {\n      window.location.href = ""/auth/login"";\n    } else {\n      throw error;\n    }\n  }\n};\n```\n\n### Additional Notes\n- Ensure to test your implementation in modern browsers that support the 'SAMESITE' cookie attribute to prevent CSRF attacks.\n- Refer to Choreo documentation for more details on [setting up managed authentication](https://wso2.com/choreo/docs/authentication-and-authorization/secure-web-applications-with-managed-authentication/) and [configuring identity providers](https://wso2.com/choreo/docs/authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-3-configure-the-identity-provider-for-the-web-application).\n\nBy following these steps, you can successfully implement sign-in and sign-out functionalities in your web application using Choreo's managed authentication."
How do I obtain user information claims in a web application using Choreo's managed authentication?,"To retrieve user information claims in your web application using Choreo's managed authentication system, you can follow these steps:\n\n### Step 1: Implement Sign-In Functionality\nFirst, ensure that your web application has a sign-in button that redirects users to the Choreo authentication endpoint. You can implement this with the following code snippet:\n\n```javascript\n<button onClick={() => {window.location.href=""/auth/login""}}>Login</button>\n```\n\nThis will redirect users to the identity provider configured in Choreo for authentication.\n\n### Step 2: Obtain User Information Claims\nOnce the user is successfully signed in, Choreo will provide user information claims which can be accessed in two ways: via a `userinfo` cookie or through a GET endpoint.\n\n#### Option 1: Retrieve User Information from the `userinfo` Cookie\nAfter authentication, Choreo sets a `userinfo` cookie that contains encoded user information claims. You can retrieve this cookie using a library like `js-cookie`:\n\n```javascript\nimport Cookies from 'js-cookie';\n\n// Read userinfo cookie value\nconst encodedUserInfo = Cookies.get('userinfo');\n\n// Decode the value\nconst userInfo = JSON.parse(atob(encodedUserInfo));\n\n// Store the value in a preferred browser-based storage if needed\n\n// Clear the cookie\nCookies.remove('userinfo', { path: <post-login-path> });\n```\n\n> **Note:** The `userinfo` cookie has a short lifespan of 2 minutes, so you should handle it accordingly.\n\n#### Option 2: Retrieve User Information via the `/auth/userinfo` Endpoint\nAlternatively, you can query user information by making a GET request to the `/auth/userinfo` endpoint:\n\n```javascript\nconst response = await fetch('/auth/userinfo');\nif (response.ok) {\n    const userInfo = await response.json();\n    // Handle userInfo as needed\n} else {\n    // Handle error\n}\n```\n\nIf the user is signed in, the server will return a `200 OK` response with user information in JSON format. If not, it will return a `401 Unauthorized` status.\n\n### Step 3: Implement Sign-Out Functionality\nTo manage sign-out, you can implement a button that redirects users to the Choreo logout endpoint:\n\n```javascript\n<button onClick={async () => {\n    window.location.href = `/auth/logout?session_hint=${Cookies.get('session_hint')}`;\n}}>Logout</button>\n```\n\n### Additional Notes\n- Ensure that your web application is set up correctly with managed authentication by enabling it during the deployment of your web application.\n- Choreo’s managed authentication is currently supported for web applications built with React, Angular, or Vue.js.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-1-set-up-managed-authentication-for-your-web-application)."
How do I invoke APIs from a web application using Choreo's managed authentication?,"To invoke APIs from a web application using Choreo's managed authentication, follow these steps:\n\n### 1. Set Up Managed Authentication\nFirst, ensure that managed authentication is enabled for your web application. You can do this during the deployment process of your web application. Managed authentication is typically enabled by default when you create a web application using **React**, **Angular**, or **Vue.js** buildpacks.\n\n### 2. Implement Sign-In Functionality\nYou need to implement a sign-in button in your web application that redirects users to the Choreo authentication endpoint. Here’s a simple example:\n\n```javascript\n<button onClick={() => {window.location.href=""/auth/login""}}>Login</button>\n```\n\nThis will redirect users to the configured identity provider for authentication. On successful sign-in, Choreo will set session cookies that allow API invocation.\n\n### 3. Invoke APIs\nOnce the user is authenticated, you can invoke Choreo APIs using relative paths. Use the following format to call your API:\n\n```javascript\nconst response = await fetch('/choreo-apis/<api-suffix>');\n```\n\nHere, `<api-suffix>` should correspond to the API endpoint you want to access. For example, if your API URL is `https://example.com/api/v1/resource`, then your `<api-suffix>` would be `/api/v1/resource`.\n\n**Note:** If managed authentication is enabled, you do not need to manually attach an access token; Choreo automatically handles this by accepting the cookies set during authentication.\n\n### 4. Handle Session Expiry\nTo handle session expiry, you should implement logic to check for `401 Unauthorized` responses. If such a response is received, redirect the user to the login page:\n\n```javascript\nif (error.status === 401) {\n    window.location.href = ""/auth/login"";\n}\n```\n\n### 5. Sign-Out Functionality\nTo allow users to sign out, you can implement a sign-out button that redirects to the logout endpoint:\n\n```javascript\n<button onClick={() => {window.location.href=""/auth/logout""}}>Logout</button>\n```\n\n### Additional Information\n- Ensure you have created a connection between your web application and the Choreo API to enable API invocation.\n- You can refer to the documentation for further details on setting up and configuring managed authentication: [Secure Web Applications with Managed Authentication](https://wso2.com/choreo/docs/authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-1-set-up-managed-authentication-for-your-web-application).\n\nBy following these steps, you can successfully invoke APIs from a web application using Choreo's managed authentication."
How do I handle session expiry in a web application using Choreo's managed authentication?,"To manage session expiry within a web application using Choreo's managed authentication services, you can follow these steps:\n\n1. **Session Expiry Time Configuration**: When you set up managed authentication for your web application, you can specify the session expiry time in minutes. It's recommended that this value matches the refresh token expiry time of the OIDC application in your identity provider. The default session expiry time is set to 10080 minutes (7 days), but you can adjust this based on your application's requirements.\n\n2. **Handling Session Expiry in Code**: To handle session expiry programmatically, you can implement re-login logic upon receiving a `401 Unauthorized` response from a Choreo API, which indicates that the session may have expired. You can encapsulate your API requests with a function that checks for this status code and redirects users to the login page if needed. Here’s a sample code snippet to demonstrate this:\n\n   ```javascript\n   export const performGet = async (url) => {\n       try {\n           // API call\n           return await fetch('/choreo-apis/<api-suffix>');\n       } catch (error) {\n           if (error instanceof HttpError && error.status === 401) {\n               // Re-login\n               window.location.href = ""/auth/login"";\n           } else {\n               throw error;\n           }\n       }\n   };\n   ```\n\n3. **Logout Functionality**: Implement a logout mechanism that clears session cookies and redirects the user to the OIDC logout endpoint. This ensures that the session is properly terminated when the user chooses to log out:\n\n   ```javascript\n   <button onClick={async () => {\n       window.location.href = `/auth/logout?session_hint=${Cookies.get('session_hint')}`;\n   }}>Logout</button>\n   ```\n\n4. **Session Management Best Practices**: It's advisable to keep JWT access tokens short-lived (e.g., no more than 15 minutes) to minimize security risks associated with stolen tokens. Regularly refresh tokens and securely store them to enhance security.\n\nBy following these steps, you can effectively manage session expiration in your web application using Choreo's managed authentication services.\n\nFor more detailed information on setting up managed authentication and handling session expiry, you can refer to the following documentation:\n- [Secure Web Applications with Managed Authentication](https://wso2.com/choreo/docs/authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-1-set-up-managed-authentication-for-your-web-application)"
How do I set up a custom error page in a web application using Choreo's managed authentication?,"To set up a custom error page in a web application that uses Choreo's managed authentication, you will need to define the error path in your application's configuration. Here’s a detailed guide on how to do this:\n\n### Steps to Set Up a Custom Error Page\n\n1. **Enable Managed Authentication**:\n   - When deploying your web application component in Choreo, ensure that managed authentication is enabled.\n\n2. **Configure the Error Path**:\n   - Go to the **Deploy** section of your web application in the Choreo Console.\n   - In the **Set Up** card, click on **Configure & Deploy**.\n   - You will see a field labeled **Error Path**. Here, you can specify the relative path to your custom error page.\n   - By default, Choreo uses a built-in error page if you do not configure this path.\n\n3. **Handle Errors**:\n   - Choreo’s managed authentication will redirect users to the custom error page when an error occurs during processes like sign-in or sign-out.\n   - When redirected, the following query parameters will be included in the URL:\n     - `code`: A short textual error code indicating the type of error.\n     - `message`: A description of the error.\n\n4. **Implement the Custom Error Page**:\n   - Create the page at the specified error path. This page should handle displaying the error message and any relevant information to the user.\n\n### Example Configuration\n\nIf your custom error page is located at `/custom-error`, you would set the **Error Path** field to `/custom-error` during your deployment configuration.\n\n### Note\nMake sure to test the error handling by simulating error conditions in your web application to ensure that users are redirected correctly to the custom error page.\n\nFor more detailed steps on configuring managed authentication, you can refer to the documentation [here](https://wso2.com/choreo/docs/authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-2-enable-managed-authentication-and-configure-the-paths). \n\nThis setup will help enhance the user experience by providing meaningful error messages rather than the default ones."
How do I test secure API access with Choreo's built-in security token service?,"To test secure API access with Choreo's built-in security token service, you will need to follow a series of steps that involve setting up permissions, roles, and user groups. Here’s a comprehensive guide on how to do this:\n\n### Prerequisites\nBefore you begin, ensure that you have the following set up:\n1. **Choreo Built-in Identity Provider**: Configure it with users. For instructions, refer to [Configure a User Store with the Built-In Identity Provider](https://wso2.com/choreo/docs/administer/configure-a-user-store-with-built-in-idp).\n2. **API Deployment**: Publish an API via Choreo. If you don't have an existing API, you can either [develop a service](https://wso2.com/choreo/docs/develop-components/develop-services/develop-a-service) or create an [API Proxy](https://wso2.com/choreo/docs/develop-components/develop-an-api-proxy).\n3. **Web Application**: Have a web application for API subscriptions. If you don't have one, you must [create a web application](https://wso2.com/choreo/docs/develop-components/develop-web-applications/build-and-deploy-a-single-page-web-application).\n4. **Administrator Rights**: Ensure you have admin access in your Choreo organization to configure role-group and role-permission mappings.\n\n### Steps to Test Secure API Access\n\n1. **Assign Permissions to an API**:\n   - In the Choreo Console, navigate to your project.\n   - Select the component for which you want to assign permissions.\n   - Go to the **Deploy** section and then to **Endpoint Configurations**.\n   - In the **Permissions List**, click **+ Add Permission(Scope)**, enter a permission value, and click **+ Add New**.\n   - Save the fully qualified name of the permission for future reference.\n   - Attach the permissions to the resources and click **Apply**.\n   - Redeploy the component to apply the latest permissions and publish your API to the Choreo Developer Portal.\n\n   For detailed steps, refer to [Step 1: Assign permissions to an API in Choreo](https://wso2.com/choreo/docs/authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#step-1-assign-permissions-to-an-api-in-choreo).\n\n2. **Create Roles and Assign Permissions**:\n   - Navigate to the **Settings** of your project and go to the **Application Security** tab.\n   - Click **+ Role**, specify a role name and description.\n   - Select the permissions you want to assign to this role and click **Create**.\n\n   For further details, see [Step 2: Create roles and assign permissions](https://wso2.com/choreo/docs/authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#step-2-create-roles-and-assign-permissions).\n\n3. **Assign Roles to User Groups**:\n   - Go to the **Organization** section and then to **Application Security**.\n   - Click on **Role Management** and then **Map Groups** for the desired role.\n   - Specify group names and save your changes.\n\n   More information is available in [Step 3: Assign roles to user groups](https://wso2.com/choreo/docs/authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#step-3-assign-roles-to-user-groups).\n\n4. **Test the API Invocation**:\n   - You can now test the API invocation, both when Choreo manages the authentication and when your application handles it independently. Ensure you have set up the necessary tokens and headers as required for secure access.\n\nFor complete guidance, refer to the main document on [testing secure API access with Choreo's built-in security token service](https://wso2.com/choreo/docs/authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/). \n\nBy following these steps, you can effectively test secure API access using Choreo's built-in security token service."
"How do I assign scopes, create roles, and assign permissions using Choreo's built-in authorization?","To assign scopes, create roles, and assign permissions using Choreo's built-in authorization, you can follow these detailed steps:\n\n### Step 1: Assign Permissions to an API\n1. **Select Your Project**:\n   - In the Choreo Console, click on the **Project** list in the top navigation menu and choose the project containing your component.\n\n2. **Select the Component**:\n   - In the **Component Listing** pane, click on the component for which you want to assign permissions.\n\n3. **Navigate to Deploy Section**:\n   - Click on **Deploy** in the left navigation menu.\n\n4. **Configure Permissions**:\n   - In the **Deploy** page, under the **Set Up** card, click on **Endpoint Configurations**.\n   - Go to the **Permissions List** section and click **+ Add Permission (Scope)**.\n   - Enter a permission value and click **+ Add New**.\n   - Copy the fully qualified name of the added permission for future reference.\n\n5. **Attach Permissions to Resources**:\n   - Under the respective resource, click the **Select Permissions** list and choose the permissions you want to attach.\n   - Click **Apply**.\n\n6. **Redeploy the Component**:\n   - Click on **Configure & Deploy** in the **Set Up** card.\n   - Follow the prompts to redeploy the component.\n\n### Step 2: Create Roles and Assign Permissions\n1. **Go to Settings**:\n   - In the Choreo Console, click on **Settings** in the left navigation menu.\n\n2. **Application Security**:\n   - Click on the **Application Security** tab.\n\n3. **Create a Role**:\n   - Click **+ Role**.\n   - Specify an appropriate **Role Name** and **Role Description**.\n\n4. **Select Permissions**:\n   - Choose the permissions you want to assign to the role and click **Create**.\n\n### Step 3: Publish Your API\n1. **Publish the API**:\n   - In the left navigation menu, click **Manage** and then **Lifecycle**.\n   - Click **Publish** to publish your API to the Choreo Developer Portal.\n\n### Summary\nBy following these steps, you can effectively manage scopes, roles, and permissions for your APIs using Choreo's built-in authorization features. This process allows for fine-grained access control and helps ensure that only authorized users can access specific API resources.\n\nFor further details, you can refer to the documentation:\n- [Test Secure API Access with Choreo Built-In Security Token Service - Create Roles and Assign Permissions](https://wso2.com/choreo/docs/authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#step-2-create-roles-and-assign-permissions)\n- [Test Secure API Access with Choreo Built-In Security Token Service - Assign Permissions to an API](https://wso2.com/choreo/docs/authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#step-1-assign-permissions-to-an-api-in-choreo)"
How do I generate OAuth credentials and retrieve access tokens for testing API invocation?,"To generate OAuth credentials and retrieve access tokens for testing API invocation in Choreo, you can follow these steps based on whether you are using the Choreo Console or the Choreo Developer Portal.\n\n### Using Choreo Console\n\n1. **Create a Web Application**: Ensure you have created a web application within your project.\n2. **Access Settings**:\n   - In the left navigation menu, click **Settings** of your web application component.\n3. **Authentication Keys**:\n   - Click the **Authentication Keys** tab.\n4. **Select Environment**:\n   - Choose the appropriate environment tab where you want to generate credentials.\n5. **Identity Provider**:\n   - Select **Choreo Built-In Identity Provider** as the identity provider.\n6. **Grant Types**:\n   - Expand **Advanced Configurations** and ensure the `code` and `refresh` grant types are selected.\n7. **Callback URL**:\n   - Configure the callback URL of your web application to receive the authorization code.\n8. **Update Configurations**:\n   - Click **Update Configurations**.\n9. **Regenerate Secret**:\n   - Click **Regenerate Secret** and note the generated client ID and secret.\n10. **Retrieve Access Token**:\n    - Obtain an access token using the authorization code grant, specifying the necessary OAuth scopes.\n    - Enter the credentials of a user within the built-in identity provider who has the required assigned groups.\n    - Complete the OAuth flow to obtain the JWT access token.\n11. **Invoke API**:\n    - Use the access token to invoke the subscribed API.\n\nYou can find more detailed information in the documentation here: [Test Secure API Access with Choreo Built-In Security Token Service](https://wso2.com/choreo/docs/authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#step-4-test-the-api-invocation).\n\n### Using Choreo Developer Portal\n\n1. **Navigate to Applications**:\n   - In the [Choreo Developer Portal](https://devportal.choreo.dev), click **Applications** in the header.\n2. **Select Application**:\n   - On the **My Applications** page, click on the application for which you want to generate keys and tokens.\n3. **Access Credentials**:\n   - In the left navigation menu, click the desired environment under **Credentials** to open the **Application Keys** pane.\n4. **Generate Token**:\n   - Click **Generate Token** to create a test access token.\n\nFor further details, refer to the following links:\n- [Generate an Access Token](https://wso2.com/choreo/docs/consuming-services/generate-an-access-token/#generate-an-access-token-via-the-developer-portal-ui-for-testing)\n- [Consume a OAuth2 Secured Service](https://wso2.com/choreo/docs/consuming-services/consuming-a-sevice-oauth2/#consume-an-api).\n\nBy following these steps, you will be able to generate OAuth credentials and retrieve access tokens for testing your API invocations in Choreo."
What is the Choreo Command-Line Interface (CLI)?,"The Choreo Command-Line Interface (CLI) is a powerful tool that allows developers to interact with the Choreo platform through command-line commands. It is designed to streamline the development, deployment, and management of various components within the Choreo ecosystem.\n\n### Primary Features and Functions of Choreo CLI:\n\n1. **Component Management**:\n   - The CLI supports creating and managing various component types, including:\n     - Service\n     - Web Application\n     - Webhook\n     - Scheduled Task\n     - Manual Task\n\n2. **Build Configurations**:\n   - When creating components, users can specify build configurations based on the type of component being created. For example:\n     ```sh\n     choreo create component <name> --project <name> --build-configs='key1=value1,key2=value2'\n     ```\n\n3. **Help and Support**:\n   - Users can access help for specific commands by running:\n     ```sh\n     choreo <command> --help\n     ```\n\n4. **Updating the CLI**:\n   - The CLI can be updated easily with a simple command:\n     ```sh\n     curl -o- https://cli.choreo.dev/install.sh | bash\n     ```\n\n5. **Uninstallation**:\n   - If needed, the CLI can be uninstalled by deleting the `.choreo` directory from the home directory of your operating system.\n\nThe Choreo CLI enhances the efficiency of working with the Choreo platform by providing a command-line approach to managing components and configurations, making it an essential tool for developers.\n\nFor more detailed information, you can refer to the [Choreo CLI documentation](https://wso2.com/choreo/docs/references/faq/#choreo-cli)."
What are the key features of the Choreo CLI?,"The Choreo CLI (Command Line Interface) offers several key features that enhance the development and deployment of components within the Choreo platform. Here are the main features of the Choreo CLI:\n\n1. **Support for Multiple Component Types**: The Choreo CLI allows you to create and manage various component types including:\n   - Service\n   - Web Application\n   - Webhook\n   - Scheduled Task\n   - Manual Task\n\n2. **Easy Component Creation**: You can create components using simple commands, specifying build configurations based on the component type.\n\n3. **Help Command**: The CLI provides a built-in help command, allowing users to get assistance with specific commands by running:\n   ```sh\n   choreo <command> --help\n   ```\n\n4. **Update Functionality**: Updating the Choreo CLI can be done effortlessly by executing a command that fetches the latest version.\n\n5. **Uninstallation**: If needed, the CLI can be uninstalled by deleting the `.choreo` directory from the home directory of your operating system.\n\n6. **Build Configurations**: When creating components, you have the flexibility to define build configurations tailored to different languages and frameworks, ensuring that your components are set up correctly for deployment.\n\nFor more detailed information about the Choreo CLI and its capabilities, you can refer to the documentation [here](https://wso2.com/choreo/docs/references/faq/#choreo-cli)."
How do I install the Choreo CLI?,"To install the Choreo CLI, you can run the following command in your terminal:\n\n```sh\ncurl -o- https://cli.choreo.dev/install.sh | bash\n```\n\nThis command downloads and executes the installation script for the Choreo CLI, setting it up on your system. Once the installation is complete, you will be able to use the CLI to create and manage your components like services, web applications, webhooks, and more.\n\nFor further details, you can refer to the relevant documentation [here](https://wso2.com/choreo/docs/references/faq/#choreo-cli)."
How do I log in to Choreo using the CLI?,"I'm sorry, but I don't have enough information to provide guidance on how to log in to Choreo using the CLI. The available documentation does not cover that specific topic. If you have any other questions or need assistance with a different aspect of Choreo, feel free to ask!"
How do I create a project using the Choreo CLI?,"To create a project using the Choreo CLI, you can follow these steps:\n\n1. **Open your terminal** where you have the Choreo CLI installed.\n  \n2. **Run the command to create a project** by entering the following command:\n   ```sh\n   choreo create project <your_project_name>\n   ```\n   Replace `<your_project_name>` with the desired name for your project.\n\n3. **Provide additional details** if prompted, such as a description for your project.\n\n4. After executing the command, the CLI should confirm that your project has been created successfully.\n\nFor more detailed information about the CLI commands and options, you can refer to the [Choreo CLI documentation](https://wso2.com/choreo/docs/references/faq/#choreo-cli).\n\nIf you have any specific requirements or further questions, feel free to ask!"
How do I create a component using the Choreo CLI?,"To create a component using the Choreo CLI, follow these detailed steps:\n\n### Step 1: Install the Choreo CLI\nIf you haven't already installed the Choreo CLI, you can do so by running:\n```sh\ncurl -o- https://cli.choreo.dev/install.sh | bash\n```\n\n### Step 2: Choose the Component Type\nThe Choreo CLI supports various component types including:\n- Service\n- Web Application\n- Webhook\n- Scheduled Task\n- Manual Task\n\n### Step 3: Create a Component\nTo create a component, use the following command structure:\n```sh\nchoreo create component <name> --project <project-name> --build-configs='key1=value1,key2=value2'\n```\nYou can specify multiple build configurations as needed:\n```sh\nchoreo create component <name> --project <project-name> --build-configs='key1=value1' --build-configs='key2=value2'\n```\n\n### Step 4: Specify Required Build Configurations\nDepending on the type of component you are creating, certain build configurations are required. Below are examples of required configurations for different component types:\n\n#### For a Service:\n- **Python, Node.js, Java, Go, PHP, .Net, Ruby**: \n  - `buildPackLangVersion`: Language Version\n- **Docker**: \n  - `dockerFilePath`: Path to the Docker file\n\n#### For a Web Application:\n- Same as Service, but also requires:\n  - `port`: Port\n\n#### For a Webhook:\n- Same as Service.\n\n#### For Scheduled Task and Manual Task:\n- Same as Service.\n\n### Example Command\nFor instance, if you are creating a Python service named `myService` in the project `myProject` with a specified language version, the command would look like this:\n```sh\nchoreo create component myService --project myProject --build-configs='buildPackLangVersion=3.9'\n```\n\n### Step 5: Verify Component Creation\nAfter running the command, verify that your component has been created successfully by listing your components:\n```sh\nchoreo list components --project <project-name>\n```\n\nFor more detailed information on the CLI and available commands, you can check the documentation here: [Choreo CLI FAQ](https://wso2.com/choreo/docs/references/faq/#choreo-cli)."
How do I view component details using the Choreo CLI?,"To view component details using the Choreo CLI, you can utilize the command-line interface for various operations related to your components. However, the specific steps for viewing component details directly through the Choreo CLI are not mentioned in the provided documentation.\n\nTypically, you can retrieve information about components by using commands like:\n\n- `choreo list components` to see a list of your components.\n- `choreo describe component <component-name>` to get detailed information about a specific component.\n\nThese commands will provide you with the essential details about the services, web applications, webhooks, or other types of components you have created in your Choreo environment.\n\nFor more specific commands or options, you can always run `choreo <command> --help` to get help and see what parameters and options are available for that command.\n\nUnfortunately, since the documentation does not explicitly detail the commands for viewing component details, I cannot provide a comprehensive answer beyond this general guidance. If you need further information, please check the [Choreo CLI documentation](https://wso2.com/choreo/docs/references/faq/#choreo-cli)."
How do I build a component using the Choreo CLI?,"To build a component using the Choreo CLI, you can follow the steps below:\n\n1. **Create a Component**: Use the following command to create a component. Replace `<name>` with your desired component name and `<name>` with your project name.\n   ```sh\n   choreo create component <name> --project <name>\n   ```\n\n2. **Specify Build Configurations**: Depending on the type of component you are creating, you will need to specify the required build configurations. You can add them using the `--build-configs` flag. For example:\n   ```sh\n   choreo create component <name> --project <name> --build-configs='key1=value1,key2=value2'\n   ```\n   You can also specify multiple configurations like this:\n   ```sh\n   choreo create component <name> --project <name> --build-configs='key1=value1' --build-configs='key2=value2'\n   ```\n\n3. **Supported Component Types**: The Choreo CLI supports the following component types:\n   - Service\n   - Web Application\n   - Webhook\n   - Scheduled Task\n   - Manual Task\n\n4. **Buildpack Configurations**: Depending on the component type, the required build configurations may vary. For example, if you are creating a Service with a specific buildpack, you might need to specify the language version. Refer to the corresponding documentation for more detailed configurations based on the component type you choose.\n\nFor additional details and examples, you can visit the [Choreo CLI documentation](https://wso2.com/choreo/docs/references/faq/#choreo-cli).\n\nThis should help you get started with building components using the Choreo CLI!"
How do I view build status using the Choreo CLI?,"To view the build status using the Choreo CLI, you can utilize the **Build** functionality within the Choreo Console, as the CLI does not have a direct command for viewing build statuses. Here’s how you can check the build status through the Choreo Console:\n\n1. **Navigate to the Build Section**: In the left navigation menu of the Choreo Console, click on **Build**.\n   \n2. **Access the Builds Pane**: In the **Builds** pane, you will see a list of all the builds associated with your component.\n\n3. **View Build Status**: From the list, find the specific build you are interested in. The build status will be displayed next to it as either **Success**, **Failed**, or any other relevant status.\n\n4. **Check Build Logs**: For more detailed information regarding the build process, you can click on **View Details** next to the build entry to see the build logs and any scans performed during the build.\n\nThis process provides you with the necessary information to monitor the status of your builds effectively.\n\nFor further details on the CI/CD process in Choreo, you can refer to the documentation [here](https://wso2.com/choreo/docs/choreo-concepts/ci-cd/#build)."

