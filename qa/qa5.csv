question,answer
How do I configure a custom error page for managed authentication?,"To configure a custom error page for managed authentication in Choreo, you need to define the error path in the configuration of your web application component. This custom error page will be displayed in the event of an error during processes like sign-in or sign-out. Here's how to do it:\n\n1. **Enable Managed Authentication**: Ensure that managed authentication is enabled for your web application component. This is typically done at the time of component deployment.\n\n2. **Configure Error Path**:\n   - Navigate to the **Deploy** section of your web application in the Choreo Console.\n   - In the **Set Up** card, look for the **Error Path** field. \n   - Specify the relative path to your custom error page. If you do not set this path, Choreo will use its built-in error page by default.\n\n3. **Query Parameters**: When Choreo redirects to your custom error page, it will include the following query parameters in the URL:\n   - `code`: A short textual error code indicating the error.\n   - `message`: A description of the error.\n\nBy setting up a custom error page, you can provide a better user experience by guiding users appropriately in case of authentication errors.\n\nFor more detailed instructions, you can refer to the documentation here: [Secure Web Applications with Managed Authentication](https://wso2.com/choreo/docs/authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-1-set-up-managed-authentication-for-your-web-application)."
How can I access user claims information in a Choreo web application?,"To access user claims information in a Choreo web application, you have two primary methods after a user successfully signs in: via the `userinfo` cookie or by invoking a GET endpoint.\n\n### 1. Obtain User Information via the `userinfo` Cookie\nAfter a successful sign-in, Choreo sets a `userinfo` cookie that contains encoded user information claims. Here’s how you can access this information:\n\n- **Read the `userinfo` Cookie**: You can use a cookie-parsing library like `js-cookie` to read the cookie.\n- **Decode the Cookie Value**: The value of the cookie is encoded, so you need to decode it.\n- **Store or Utilize the Information**: You can store the information in browser-based storage if needed.\n- **Clear the Cookie**: It's a good practice to clear the cookie after you read it.\n\nHere’s a sample code snippet for this process:\n\n```javascript\nimport Cookies from 'js-cookie';\n\n// Read userinfo cookie value.\nconst encodedUserInfo = Cookies.get('userinfo')\n\n// Decode the value.\nconst userInfo = JSON.parse(atob(encodedUserInfo))\n\n// Store the value in a preferred browser-based storage if needed.\n\n// Clear the cookie.\nCookies.remove('userinfo', { path: <post-login-path> })\n```\n\n### 2. Obtain User Information via the `/auth/userinfo` Endpoint\nChoreo also provides a GET endpoint `/auth/userinfo` to retrieve user information claims. This can be useful if you prefer to fetch the data programmatically.\n\nHere’s how to do it:\n\n```javascript\nconst response = await fetch('/auth/userinfo')\n\nif (response.ok) {\n    const userInfo = await response.json();\n    // Use the userInfo object as needed\n} else {\n    // Handle the case where the user is not signed in\n}\n```\n\n### Important Notes:\n- The `userinfo` cookie is designed to have a short lifespan (2 minutes), so make sure to handle it promptly.\n- If the user is not signed in, the `/auth/userinfo` endpoint will return a `401 Unauthorized` response.\n\nFor more details on implementing managed authentication and accessing user claims, you can refer to the official documentation: [Secure Web Applications with Managed Authentication](https://wso2.com/choreo/docs/authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-1-set-up-managed-authentication-for-your-web-application)."
What is the purpose of the session_hint parameter in the sign-out process?,"The `session_hint` parameter in the sign-out process is used to enhance the logout experience by providing information about the user's session to the identity provider. When a user clicks the sign-out button in your web application, you can redirect them to the `/auth/logout` path while passing the `session_hint` cookie value in the request. This helps the identity provider identify the session to be terminated.\n\nHere’s a brief overview of how it works:\n\n1. **Implementing Sign-Out**: When the sign-out button is clicked, the application constructs a URL for the logout endpoint, including the `session_hint` parameter, which is retrieved from the `session_hint` cookie.\n   \n   Example code snippet for sign-out:\n   ```javascript\n   <button onClick={async () => {\n       window.location.href = `/auth/logout?session_hint=${Cookies.get('session_hint')}`;\n   }}>Logout</button>\n   ```\n\n2. **Session Termination**: Choreo will then clear the relevant session cookies and redirect the user to the OIDC logout endpoint of the configured identity provider (if available). This process ensures a proper logout across all services linked to that session.\n\nUsing the `session_hint` parameter is important as it provides context about the session being terminated, which can help in scenarios where multiple sessions are managed, or when single sign-out (SSO) functionality is implemented across multiple applications.\n\nFor further details, you can refer to the relevant section in the documentation: [Secure Web Applications with Managed Authentication](https://wso2.com/choreo/docs/authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-1-set-up-managed-authentication-for-your-web-application)."
How can I test the custom domain configuration in Choreo?,"To test the custom domain configuration in Choreo after setting it up, you can follow these steps:\n\n1. **Verify CNAME Mapping**: After you have added your custom domain and created the necessary DNS records, the first step is to verify the CNAME mapping. In the Choreo Console, go to the **URL Settings** tab under **Active Domains** and click **Verify** next to your custom domain. If the CNAME mapping is correct, the verification process will complete successfully. Keep in mind that it may take some time for the CNAME mapping to be globally available.\n\n2. **Access the Custom Domain**: If you have set up a custom domain for the Developer Portal, you can immediately access it via the added domain. For other types of components, ensure that the custom URL mapping has been created and approved by an organization administrator.\n\n3. **Invoke Your Component**: If you have configured a custom URL for a specific component, make sure that the component is deployed in the environment you specified. Use the custom URL to invoke the component and check if it is working as expected.\n\n4. **Check for Errors**: If you encounter any issues while accessing your custom domain or invoking your component, review the settings and DNS configurations to ensure everything is set up correctly.\n\nBy following these steps, you can effectively test the custom domain configuration made in Choreo. For further details, you may refer to the documentation on configuring a custom domain for your organization [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-your-organization)."
What are the entity types available for custom domain configuration?,"In Choreo, when configuring a custom domain, there are specific entity types available for which the custom domain can be applied. The available entity types are:\n\n1. **API**: This entity type represents Choreo components that are exposed via an endpoint. It includes API Proxy, Service, and Webhook components.\n\n2. **Web App**: This entity type represents the Web Application component.\n\n3. **Developer Portal**: This type is specific to the Developer Portal, and when selected, the environment is not applicable for the custom domain configuration.\n\nThese entity types allow you to effectively configure custom URLs for your components, enhancing branding and discoverability.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-an-organization)."
What happens if the custom domain verification fails?,"If a custom domain verification fails in Choreo, the following consequences and next steps can be anticipated:\n\n1. **Verification Failure**: The primary consequence of a failed verification is that the custom domain will not be successfully added to your organization. This means that you will not be able to use the custom domain for any of your components.\n\n2. **Check CNAME Record**: You should confirm that the CNAME record you created with your DNS provider is correctly pointing to the CNAME target value generated by Choreo. If the mapping is incorrect, you will need to update it.\n\n3. **Propagation Time**: Note that DNS changes can take some time to propagate globally. If you have just made the DNS changes, you may need to wait a bit longer before attempting to verify again.\n\n4. **Retry Verification**: Once you have confirmed that the CNAME record is set up correctly and enough time has passed for DNS propagation, you can go back to the Choreo Console and click the **Verify** button again.\n\n5. **Consult Documentation**: If issues persist after ensuring the CNAME record is correct and allowing for propagation, you might want to refer to the documentation for troubleshooting tips.\n\nFor more detailed steps on setting up and verifying a custom domain, you can check the specific section of the documentation [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-your-organization)."
How long does it take for Developer Portal customizations to apply after adding a custom domain?,"When you add a custom domain for the Developer Portal, the customization is applied immediately. This means that once the custom domain is successfully added, you can access your organization’s Developer Portal via the newly added domain without any delay.\n\nFor more details, you can refer to the documentation on configuring a custom domain for your organization [here](https://wso2.com/choreo/docs/administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-an-organization)."
What is the difference between a ConfigMap and a Secret in Choreo?,"In Choreo, both ConfigMaps (Configurations) and Secrets are used to manage sensitive content, but they serve different purposes and have distinct security implications.\n\n### ConfigMap (Configuration)\n- **Visibility**: Configurations can be read and updated via the Choreo Console after creation. This means that the content is accessible and can be modified as needed.\n- **Use Cases**: You might use a ConfigMap for non-sensitive configuration data, such as application settings or environment variables that do not require stringent security measures.\n- **Security Implications**: Since Configurations can be read, they are not suitable for storing sensitive information. \n\n### Secret\n- **Visibility**: Secrets are write-only, meaning once you create a secret, you cannot retrieve or view its content through the Choreo Console. You can overwrite the existing content but cannot access the original data.\n- **Use Cases**: Secrets are ideal for storing sensitive information such as database passwords, cloud credentials, or service account details. This ensures that such sensitive data is not exposed or visible during operation.\n- **Security Implications**: By design, Secrets provide a higher level of security as they prevent unauthorized access to sensitive content.\n\n### Summary\n- Use **Secrets** for sensitive data that must be kept confidential.\n- Use **Configurations** for non-sensitive configuration data that may need to be read or updated frequently.\n\nBoth Configurations and Secrets are stored in an encrypted vault to ensure security, and if you are using a private data plane, they can be stored in an Azure Key Vault or AWS Secret Manager.\n\nFor more detailed information, you can refer to the documentation: [Manage Configurations and Secrets](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-configurations-and-secrets/#the-difference-between-configurations-and-secrets)."
How can I manage Ballerina configurables in Choreo?,"In Choreo, managing Ballerina configurables is essential for configuring your Ballerina components effectively. Here’s how you can manage them:\n\n1. **Accessing the Deploy Page**: When you deploy or promote a Ballerina application, you can modify the configurables through the **Deploy** page.\n\n2. **Configuring Values**:\n   - Navigate to the **Set Up** card and click on **Configure & Deploy**.\n   - In the **Configurations** pane, you can specify the values for the configurable variables that are defined in your Ballerina project.\n   - For example, you might see fields like `apiKey`, `latitude`, `longitude`, and `email`. Enter the appropriate values for these fields.\n\n3. **Marking Secrets**: If you want to set a configurable variable as a secret (for instance, if it holds sensitive information like an API key), you can click the lock icon next to the variable. This will conceal the input value. If you need to update the secret later, you can click on **Update Secret Content** to specify a new value.\n\n4. **Deploying the Application**: Once you have configured the required values, click **Deploy** to apply the changes and deploy your Ballerina component.\n\n5. **Using Configurables**: It’s useful to note that you can use configurables instead of environment variables to add file mounts to a Ballerina component. This is especially beneficial as environment variables are mainly for components written in other languages.\n\nFor detailed steps and additional information, you can refer to the documentation [here](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-configurations-and-secrets/#manage-ballerina-configurables).\n\nThis process helps ensure that the necessary configurations for your Ballerina components are set accurately and securely."
What are the required permissions for environment promotion approvals?,"To review and respond to environment promotion approval requests in Choreo, a user must have the following permissions:\n\n1. **WORKFLOW-MANAGEMENT**:\n   - **Approve component promotion requests**: This permission allows the user to review and approve the promotion of components to critical environments.\n\n2. **PROJECT-MANAGEMENT**:\n   - Grants access to view and approve workflow requests. This permission is also used to update or delete projects.\n\nIt is essential for administrators to ensure that users designated to review and respond to approval requests possess these permissions.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/configure-approvals-for-choreo-workflows/#permissions-to-review-and-respond-to-approval-requests)."
How do I configure Asgardeo as an external IdP for my Developer Portal?,"To configure Asgardeo as an external Identity Provider (IdP) for the Choreo Developer Portal, follow these steps:\n\n### Prerequisites\n1. **Create an Asgardeo Application**: Ensure you have registered a standard-based application in Asgardeo. You can follow the Asgardeo guide to [register a standard-based application](https://wso2.com/asgardeo/docs/guides/applications/register-standard-based-app/#register-an-application).\n   \n2. **Find the Well-known URL**: Go to the **info** tab of your Asgardeo application and copy the **Discovery** endpoint.\n\n3. **Find the Client ID**: Go to the **Protocol** tab of your Asgardeo application and copy the **Client ID**.\n\n### Steps to Configure Asgardeo as an External IdP in Choreo\n1. In the Choreo Console, navigate to the left menu and click on **Settings**.\n   \n2. Click on the **Organization** dropdown to access the organization-level settings.\n\n3. Select the **Application Security** tab and then click on the **Identity Providers** tab.\n\n4. Click on **+ Identity Provider** to add a new identity provider.\n\n5. Choose **Asgardeo** from the list.\n\n6. In the Asgardeo dialog that appears:\n   - Enter a name and a description for your IdP.\n   - In the **Well-Known URL** field, paste the well-known URL you copied from Asgardeo.\n\n7. Keep the **Apply to all environments** checkbox selected to allow the tokens generated via this IdP to invoke APIs across all environments. If you want to restrict token usage to specific environments, clear this checkbox and select the necessary environments.\n\n8. Click **Next** to see the server endpoints useful for implementing and configuring authentication for your application.\n\n9. Finally, click **Add** to complete the configuration.\n\nNow that you have configured Asgardeo as an external IdP in Choreo, you can use it for authentication in the Developer Portal.\n\nFor more detailed guidance, you can refer to the full documentation here: [Configure Asgardeo as an External Identity Provider (IdP)](https://wso2.com/choreo/docs/administer/configure-an-external-idp/configure-asgardeo-as-an-external-idp/)."
How can I enable auto-approval for self-sign-up users?,"To enable auto-approval for self-sign-up users in Choreo, you can follow these steps within the Choreo Console:\n\n1. Click your username in the top right corner of the console.\n2. From the drop-down menu, select **Settings**. This will open the **Organization** pane where you can modify organization settings.\n3. In the **Organization** pane, select **Self Signups**.\n4. To enable auto-approval, toggle the switch to the ""on"" position.\n\nOnce you enable auto-approval, any user who creates an account on your Developer Portal will automatically have access without needing manual approval. This allows users to sign in and start using the services immediately after registration.\n\nFor more detailed information, you can refer to the documentation here: [Manage new users](https://wso2.com/choreo/docs/administer/configure-self-sign-up/#manage-new-users)."
What are the different mapping levels in Choreo's access control?,"In Choreo, access control is managed through three main concepts: Roles, Groups, and Mapping levels. The mapping levels specifically define the extent to which a role-group mapping can be applied. There are two defined mapping levels in Choreo:\n\n1. **Organization Level**: \n   - At this level, a role can be assigned to a group across the entire organization. This means that users in the group will inherit the permissions granted by that role for all resources within the organization. \n   - For example, if a user has the `edit_project` permission at the organization level, that user can edit all projects in the organization.\n\n2. **Project Level**: \n   - This level allows a role to be assigned to a group within the context of a specific project. Users in the group will inherit the permissions granted by that role only for the designated project. \n   - For instance, if a user has the `edit_project` permission at the project mapping level, that user can only edit the specified project.\n\nIt is important to note that organization-level permissions take precedence over project-level permissions. Therefore, careful consideration should be given when assigning roles to avoid unintentional access.\n\nFor more detailed information on access control in the Choreo Console, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/control-access-in-the-choreo-console/)."
How can I override the organization-level egress policy at the project level?,"To override the organization-level egress policy at the project level in Choreo, follow these steps:\n\n1. In the Choreo Console header, go to the **Project** list and select your project.\n2. In the left navigation menu, click **Settings** to open the project-level settings page.\n3. Click the **Egress Control** tab. Here, you will see that the organization-level egress policy is enforced by default.\n4. You can now add project-level rules to further restrict egress traffic:\n   - If the **Allow All** egress control type is selected at the organization level, you can add project-level deny rules to restrict traffic.\n   - If the **Deny All** egress control type is selected at the organization level, you can remove allow rules inherited from the organization to further restrict traffic.\n\nThis allows you to customize egress traffic management according to your project's requirements.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/control-egress-traffic-for-your-organization/#override-the-organization-level-egress-policy-at-the-project-level)."
What is the purpose of burst control in API subscription plans?,"Burst control in API subscription plans is designed to manage sudden spikes in requests to your API, thereby protecting your backend systems. This feature is particularly useful when the request count is monitored over longer periods, such as hourly or daily limits. By implementing burst control, you can ensure that consumers do not exhaust their entire quota of requests too quickly, which can lead to performance degradation or outages.\n\nWhen creating a subscription plan in Choreo, you have the option to select the **Burst Control** checkbox. This is recommended when the **Request Count Time Unit** is set to **Hour** or **Day**. By enabling burst control, you can allow for some flexibility in how requests are made within the specified time frame, preventing overwhelming traffic during peak usage times while still adhering to the overall rate limits.\n\nFor more details on creating subscription plans and utilizing burst control, you can refer to the documentation here: [Create API Subscription Plans](https://wso2.com/choreo/docs/administer/create-api-subscription-plans/)."
How do I preview changes to the Developer Portal theme?,"To preview changes to the Developer Portal theme in Choreo, follow these steps:\n\n1. **Access Developer Portal Theme Settings**:\n   - In the Choreo Console, click on **Settings** in the left pane.\n   - In the header, select the **Organization** list to open the organization level settings page.\n   - Navigate to the **API Management** tab and click on **Devportal Theme**.\n\n2. **Customize the Theme**:\n   - You can customize various aspects of the theme, including the **Home** page title, color theme, font, header and footer, and logos.\n   - For example, to change the title on the Home page, expand the **Home Page** section and modify the **Title** field.\n   - To adjust the color scheme, expand the **Color Palette** section and update the colors as needed.\n\n3. **Preview the Changes**:\n   - After making your changes, click the **Preview** button. This will allow you to see how the Developer Portal will look with the modifications you made.\n\n4. **Save and Apply Changes**:\n   - If you are satisfied with the preview, click **Save** to save your changes as a draft theme.\n   - To apply these changes to the Developer Portal, toggle the **Go Live** switch and confirm by clicking **Enable** when prompted.\n\n5. **View in Developer Portal**:\n   - Finally, sign in to the Choreo Developer Portal to see the updated Home page as it appears in the preview.\n\nThese steps will help you effectively preview and apply changes to the Developer Portal theme.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/customize-the-developer-portal/)."
How do I reset the Developer Portal theme to the default settings?,"To reset the Developer Portal theme to its default settings in Choreo, you can follow these steps:\n\n1. In the left pane of the Choreo Console, click on **Settings**.\n2. In the header, click on the **Organization** list. This will open the organization level settings page.\n3. Navigate to the **Devportal Theme** section.\n4. Click on the **Reset to Default** option.\n\nThis action will restore the theme of your Developer Portal back to the original default settings.\n\nFor more details, you can refer to the documentation [here](https://wso2.com/choreo/docs/administer/customize-the-developer-portal/#reset-the-developer-portal-theme)."
What happens when an invited user does not accept the organization invitation?,"When an invited user does not accept an organization invitation in Choreo, the following outcomes are likely:\n\n1. **No Access to Resources**: The invited user will not be able to access any resources within the organization since they have not accepted the invitation to join. Access to resources is contingent upon the user accepting the invitation.\n\n2. **Invitation Validity**: Although the specific duration for which the invitation remains valid is not mentioned in the provided documentation, typically, invitations may have a time limit. If the user does not accept the invitation within a specific timeframe, the invitation may expire.\n\n3. **Re-invitation**: If needed, an organization administrator can resend the invitation to the user at a later time if they initially do not accept it.\n\nIt is essential for invited users to accept the invitation to gain access to the resources and functionalities associated with the organization.\n\nFor more detailed information, you can refer to the following documentation: \n- [Inviting Users](https://wso2.com/choreo/docs/administer/inviting-members/#inviting-users)\n- [Manage Members of an Organization](https://wso2.com/choreo/docs/administer/manage-members-of-an-organization/)"
What is the difference between a Role and a Group in Choreo?,"In Choreo, **Roles** and **Groups** serve distinct purposes in managing user permissions and access control:\n\n### Role\n- A **Role** is essentially a collection of permissions. It defines what actions a user can perform within the Choreo Console. Choreo provides a predefined set of roles, each with specific permissions assigned. For example, roles can include permissions like creating, publishing, or managing APIs.\n\n### Group\n- A **Group**, on the other hand, is a collection of users. Each group must have one or more roles assigned to it, which allows the users within that group to inherit the permissions associated with those roles. For instance, if a group is designated as an ""API Publisher,"" all users in that group will automatically receive the permissions associated with the API Publisher role.\n\n### Summary of Differences\n- **Nature**: Roles are about permissions; Groups are about users.\n- **Function**: Roles determine what users can do; Groups allow multiple users to share the same permissions by assigning them roles.\n- **Assignment**: Users are grouped into Groups, which are then assigned Roles to control access level.\n\nThis structure allows for flexible and scalable management of permissions in the Choreo Console, ensuring that users can perform their tasks based on their roles while being organized into groups for easier management.\n\nFor more detailed information, you can refer to the following documents:\n- [Roles in Choreo](https://wso2.com/choreo/docs/choreo-concepts/organization#roles)\n- [Groups in Choreo](https://wso2.com/choreo/docs/choreo-concepts/organization#groups)"
How do I configure health checks for my Choreo components?,"To configure health checks for components in Choreo, you need to set up liveness and readiness probes. Here’s a step-by-step guide on how to do this:\n\n### Steps to Configure Health Checks\n\n1. **Select Your Component**: In the **Component Listing** pane, click on the component for which you want to configure health checks.\n\n2. **Access Health Checks**:\n   - In the left navigation menu, click on **DevOps**.\n   - Then, click on **Health Checks**.\n\n3. **Create Health Checks**:\n   - On the **Health Checks** page, click **+ Create**.\n   - **Configure Liveness Probe**: Set up the liveness probe based on your requirements. Liveness probes run periodically on your container and will restart the container if the probe fails, allowing the container to recover from issues such as crashing or becoming unresponsive.\n   - Click **Save** after configuring the liveness probe.\n\n4. **Configure Readiness Probe**: \n   - Set up the readiness probe according to your needs. The readiness probe determines whether the container is ready to handle requests.\n   - Click **Save** once configured.\n\n5. **Verify Container Status**: \n   - To ensure that the container is functioning correctly, click on **Runtime** under **DevOps** in the left navigation menu.\n   - Check the details on the **Runtime** page to confirm the container is working as expected. If the container does not start, review the **events and conditions** to see if any of the probes are causing the failure.\n\n### Probe Types\nYou can configure the following types of probes for your health checks:\n- **HTTP `GET` Request**: Sends an HTTP `GET` request to a specified port and path. A response status code in the range of 200-399 indicates success. It is recommended to create a `/healthz` or `/health` endpoint for this purpose.\n- **TCP Connection Probe**: Attempts to open a socket to the container on a specified port. If it fails to establish a connection, it is considered a failure.\n- **Execute a Command**: Executes a script within the container. A non-zero return from the command indicates a failure (e.g., checking for the existence of a file).\n\nThese health checks are vital for ensuring that the container is healthy and ready to serve traffic, contributing to the overall reliability of your services.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/devops-and-ci-cd/set-up-health-checks/#configure-liveness-and-readiness-probes)."
What is the purpose of a liveness probe?,"In the context of Choreo, the purpose of a liveness probe is to determine whether a container is running and healthy. It helps in monitoring the application's health by allowing the system to check if the application is alive. If the liveness probe fails, the container may be restarted to ensure that the application continues to operate smoothly.\n\nChoreo supports different types of probes for both liveness and readiness checks:\n\n1. **HTTP GET Request**: This probe sends an HTTP GET request to a specified port and path on the container. A successful response status code (200-399) indicates that the application is healthy. It is recommended to create a `/healthz` or `/health` endpoint for this purpose.\n\n2. **TCP Connection Probe**: This probe attempts to establish a TCP connection to the specified port on the container. If the connection cannot be established, the probe fails.\n\n3. **Execute a Command**: This probe runs a specified command inside the container. A non-zero return value indicates a failure. For instance, checking for the existence of a file can serve as a health indicator.\n\nTo set up a liveness probe in Choreo, you would follow steps to configure it based on your requirements, which includes selecting the type of probe and configuring the necessary parameters.\n\nFor further details on setting up health checks, including liveness probes, you can refer to the documentation [here](https://wso2.com/choreo/docs/devops-and-ci-cd/set-up-health-checks/#probe-types) and [here](https://wso2.com/choreo/docs/devops-and-ci-cd/set-up-health-checks/#configure-liveness-and-readiness-probes)."
What is the purpose of a readiness probe?,"A **readiness probe** is a crucial component in the context of Choreo’s deployment and service management, as it determines whether a container is ready to handle requests. This probe runs periodically throughout the lifecycle of a container. However, unlike liveness probes, which restart the container when they fail, readiness probes do not cause a container to restart. Instead, they prevent the container from receiving network traffic if the probe fails.\n\nThe primary purpose of a readiness probe is to ensure that your service is only accessible when it is ready and able to handle requests. This is particularly important in scenarios involving a single replica of an application. If the readiness probe fails in such cases, the application will stop receiving traffic, and it may not recover unless a liveness probe fails and restarts the container.\n\nYou can configure readiness probes using various methods, such as:\n\n1. **HTTP GET request**: Sending an HTTP GET request to a specified port and path on the container. A successful response (status code 200-399) indicates that the container is ready. It's recommended to create a `/healthz` or `/health` endpoint in your service for this purpose.\n\n2. **TCP connection probe**: Attempting to open a socket to the container on a specified port. If the connection cannot be established, it is considered a failure.\n\n3. **Execute a command**: Running a command inside the container. A non-zero return from the command signifies a failure.\n\nBy configuring the readiness probe appropriately, you can fine-tune its behavior to match your application's needs, thereby enhancing the reliability and availability of your services.\n\nFor more details on configuring readiness probes in Choreo, you can refer to the following documentation:\n- [Set Up Health Checks](https://wso2.com/choreo/docs/devops-and-ci-cd/set-up-health-checks/#configure-liveness-and-readiness-probes)\n- [Readiness probes](https://wso2.com/choreo/docs/devops-and-ci-cd/set-up-health-checks/#readiness-probes)"
What are the different probe types available in Choreo?,"In Choreo, there are three different probe types available for monitoring or health checks that you can configure for both readiness and liveness probes:\n\n1. **HTTP GET Request**: \n   - This probe sends an HTTP `GET` request to a specified port and path on the container. \n   - A successful response status code is in the range of 200-399.\n   - It is recommended to create a `/healthz` or `/health` endpoint in your service for this purpose.\n   - You can also configure additional HTTP headers if needed.\n   ![HTTP GET probe](https://wso2.com/choreo/docs/assets/img/devops-and-ci-cd/healthchecks/http-get-probe.png)\n\n2. **TCP Connection Probe**: \n   - This probe attempts to establish a TCP connection to the container on a specified port.\n   - If it cannot establish a connection, it is considered a failure.\n\n3. **Execute a Command**: \n   - This probe executes a specified script inside the container.\n   - A non-zero return from the command indicates a failure. For instance, a command like `[""cat"", ""/tmp/healthy""]` would be considered healthy if the file `/tmp/healthy` exists.\n\nThese probes help ensure that your container is running correctly and can recover when issues arise. For more details, you can check the documentation on [Probe Types](https://wso2.com/choreo/docs/devops-and-ci-cd/set-up-health-checks/#probe-types)."
How do I observe real-time container logs in Choreo?,"To access and observe real-time container logs within the Choreo Console, follow these steps:\n\n1. **Navigate to the Runtime Page**:\n   - Go to the **Runtime** page of your component.\n\n2. **View Running Instances**:\n   - Here, you will see a list of active replicas of your component. Each replica provides insights such as real-time CPU and memory usage, status, restarts, and the time of the last activity.\n\n3. **Access Real-time Logs**:\n   - Click on the menu icon next to the replica you want to inspect.\n   - Select **Real-time Logs** from the dropdown menu. This will allow you to view logs that are fetched in real-time from the data plane. You will be able to see logs of active containers and the last shutdown container.\n\n4. **Options for Viewing Logs**:\n   - You can customize your log view by:\n     - **Display Previous Logs**: Enable this option to retrieve logs from the last shutdown/crashed/restarted container.\n     - **Since Seconds**: Specify the duration in seconds to fetch corresponding logs.\n     - **Filter Logs**: Enable to filter and display matching log lines based on a fuzzy string search.\n\n5. **View Container Conditions and Events**:\n   - If you need more information to troubleshoot issues, you can also click on the menu icon and select **Conditions & Events**. This section provides valuable debugging information, such as failing health checks, configuration issues, and scheduling problems.\n\nFor more detailed instructions and visuals, you can refer to the relevant documentation: [View Runtime Details](https://wso2.com/choreo/docs/devops-and-ci-cd/view-runtime-details/#view-running-instances). \n\nThis setup allows you to effectively monitor and debug your service's performance and issues in real-time."
How do I view container conditions and events in Choreo?,"To view container conditions and events in Choreo, you need to follow these steps:\n\n1. Navigate to the **Runtime** page of your component. You can do this by clicking on the component in the **Component Listing** pane, then selecting **DevOps**, and finally clicking on **Runtime**.\n\n2. On the **Runtime** page, you will see the details of the running instances of your component. Each active replica will have an associated menu icon.\n\n3. Click the menu icon of the replica whose conditions and events you want to view.\n\n4. From the dropdown menu, select **Conditions & Events**. This option will provide you with necessary debugging information that can help troubleshoot any issues with the deployment.\n\nThe conditions and events can indicate various issues such as:\n- Failing health checks (liveness and readiness probes).\n- Missing or invalid configuration/secret mounts.\n- Missing or invalid storage volume mounts.\n- Scheduling issues in the underlying data plane.\n\nThese insights are essential for diagnosing why a component might not be functioning as expected.\n\nFor more detailed guidance, you can refer to the documentation [here](https://wso2.com/choreo/docs/devops-and-ci-cd/view-runtime-details/#view-running-instances)."
What are the benefits of autoscaling component replicas?,"Autoscaling component replicas in Choreo offers several benefits, particularly in the areas of resource management, performance optimization, and cost efficiency:\n\n### 1. Resource Management\n- **Dynamic Scaling**: Choreo allows automatic scaling of component replicas based on resource consumption, specifically CPU and memory thresholds. This means that when the average CPU or memory usage across replicas reaches a defined threshold, Choreo will automatically increase the number of active replicas to meet demand.\n- **Minimum and Maximum Replicas**: Users can set a minimum and maximum number of replicas. The minimum ensures that there is always a baseline level of availability, while the maximum prevents over-provisioning, allowing for controlled resource management.\n\n### 2. Performance Optimization\n- **High Availability**: By automatically adjusting the number of replicas, Choreo ensures that your application can handle varying loads efficiently. This leads to improved response times and reduced latency, as there are always enough instances available to handle incoming requests.\n- **Scale-to-Zero Feature**: For HTTP applications, Choreo provides a scale-to-zero capability, which allows components to scale down to zero replicas when not in use, thus optimizing resource allocation. When traffic resumes, the service scales back up to handle requests, ensuring optimal performance without wasting resources during idle times.\n\n### 3. Cost Efficiency\n- **Reduced Infrastructure Costs**: By scaling down to zero during periods of low demand, Choreo helps to significantly reduce infrastructure costs, particularly in lower environments. This is advantageous for organizations looking to minimize operational expenses while maintaining the flexibility to scale resources when needed.\n- **Controlled Scaling**: The ability to set both minimum and maximum replicas allows organizations to control costs by preventing over-allocation of resources, ensuring that users only pay for what they need.\n\nIn summary, autoscaling component replicas in Choreo enhances resource management and performance while also promoting cost efficiency, making it a valuable feature for managing deployed components effectively.\n\nFor more detailed information, you can refer to the documentation on [Autoscale Component Replicas](https://wso2.com/choreo/docs/devops-and-ci-cd/autoscale/autoscale-component-replicas/) and [Autoscale Components with Scale-to-Zero](https://wso2.com/choreo/docs/devops-and-ci-cd/autoscale/autoscale-components-with-scale-to-zero/)."
What is scale-to-zero and how does it work in Choreo?,"**Scale-to-Zero in Choreo**\n\nScale-to-zero is a feature in Choreo that allows HTTP applications to automatically scale down to zero when they are idle, helping to reduce infrastructure costs. This capability is particularly beneficial in lower environments, but it can also be utilized in production settings depending on the application's behavior.\n\n### How Scale-to-Zero Works\n\n1. **Automatic Scaling**: When your application is inactive (i.e., not receiving any HTTP traffic), it will automatically scale down to zero after a default idle time of approximately 5 minutes.\n2. **Request Handling**: If an incoming HTTP request is made while the application is scaled to zero, an intermediary proxy service intercepts the request:\n   - The proxy holds the request in a queue until the application scales up.\n   - Once the application is active, the proxy forwards the queued requests to it.\n3. **Scaling Up**: Upon receiving a new request, the deployment scales up to one replica to handle the workload. If there is a surge in traffic, Choreo can further scale the application by adding replicas, up to the maximum limit specified by the user.\n4. **Pending Requests**: If the number of queued requests exceeds a predefined threshold (default is 100), Choreo will automatically add new replicas to manage the load effectively.\n\n### Considerations and Limitations\n\n- **Supported Components**: Scale-to-zero is applicable only to HTTP services and web applications. It does not support TCP and HTTPS services.\n- **Specified Ports**: To utilize the scale-to-zero feature, your HTTP service must run on specific ports (e.g., 5000, 6000, 7000, etc.). Services running on other ports will not automatically scale to zero.\n- **Scheduled Tasks**: Scheduled tasks and manually triggered components cannot connect to services under a project scope if scale-to-zero is enabled, resulting in an error when attempted.\n\n### Troubleshooting\n\nIn cases where you experience a 503 status code on the first request after a long period of inactivity, it may be necessary to adjust the readiness probe settings to better align with your application's requirements.\n\nFor more detailed information, you can refer to the documentation here: [Autoscale Components with Scale-to-Zero](https://wso2.com/choreo/docs/devops-and-ci-cd/autoscale/autoscale-components-with-scale-to-zero/)"
What are the limitations of scale-to-zero in Choreo?,"The scale-to-zero feature in Choreo allows HTTP applications to automatically scale down to zero when idle, significantly reducing infrastructure costs, especially in lower environments. However, there are several limitations to this feature:\n\n1. **Supported Component Types**: The scale-to-zero feature currently only supports web applications and HTTP services. It does not support TCP and HTTPS services for scaling to zero.\n\n2. **Port Restrictions**: For an HTTP service to utilize the scale-to-zero feature, it must be running on one of the following specified ports:\n   - 5000\n   - 6000\n   - 7000\n   - 8000\n   - 9000\n   - 7070 to 7079\n   - 8080 to 8089\n   - 9090 to 9099\n   - 8290\n   \n   If an endpoint in your component is running on any other port, it will not automatically scale to zero during deployment or promotion. Attempts to enable the “scale-to-zero” option in the DevOps → Scaling view will also fail.\n\n3. **Scheduled Tasks and Manual Triggers**: Scheduled tasks and manually triggered components cannot connect to a service on a project scope if scale-to-zero is enabled. If such a connection is attempted, the following error will occur:\n   ```\n   Host not found, not forwarding request.\n   ```\n   To enable a task-type component to invoke a project-level service, you must set it to HPA (Horizontal Pod Autoscaler) mode if you are on a paid plan, or to no scaling if you are using the Developer plan.\n\nThese limitations are important to consider when planning to use the scale-to-zero functionality for your services.\n\nFor more details, you can refer to the [Choreo documentation on scale-to-zero limitations](https://wso2.com/choreo/docs/devops-and-ci-cd/autoscale/autoscale-components-with-scale-to-zero/#limitations)."
How do I troubleshoot issues with scale-to-zero?,"To troubleshoot issues related to the scale-to-zero feature in Choreo, here are some common problems and their solutions:\n\n### Common Issues and Solutions\n\n1. **503 Status Code on First Request**:\n   - **Problem**: You might observe that the first request to your application responds with a 503 status code after scaling to zero.\n   - **Solution**: Fine-tune the readiness probe settings to better match your application's needs. This can be done in the **DevOps** → **Health Checks** view.\n\n2. **HTTP Service Port Restrictions**:\n   - **Problem**: Your HTTP service must run on specific ports to enable scale-to-zero. If your service is on an unsupported port, it will not scale to zero.\n   - **Solution**: Ensure that your HTTP service is running on one of the allowed ports (e.g., 5000, 6000, 7000, etc.).\n\n3. **Scheduled Tasks and Manual Invocations**:\n   - **Problem**: If scale-to-zero is enabled, scheduled tasks and manually triggered components cannot connect to a service at the project scope, leading to errors like `Host not found, not forwarding request.` \n   - **Solution**: Set the task-type components to HPA mode if you are on a paid plan or to no scaling if you are on the Developer plan.\n\n4. **Initial Delay for Inactive Applications**:\n   - **Problem**: After a period of inactivity (default idle time is 5 minutes), your application scales down to zero, which can lead to delays when it scales back up upon receiving requests.\n   - **Solution**: Be aware that the first request after inactivity will take longer to process. If your application is part of a service chain, this delay may be extended further. \n\n5. **Request Queueing and Scaling Thresholds**:\n   - **Problem**: If there are too many queued requests, it may affect how quickly your application can scale up.\n   - **Solution**: Adjust the 'Target Pending Requests' threshold in the user interface to manage how your application handles incoming requests during scaling.\n\nBy addressing these common issues, you can effectively troubleshoot and optimize the scale-to-zero functionality in your Choreo environment.\n\nFor more details, you can refer to the documentation on [Autoscale Components with Scale-to-Zero](https://wso2.com/choreo/docs/devops-and-ci-cd/autoscale/autoscale-components-with-scale-to-zero/#troubleshooting)."
How do I create a configuration group in Choreo?,"To create a configuration group in Choreo, follow these step-by-step instructions:\n\n1. **Select Your Organization**:\n   - In the Choreo Console, go to the top navigation menu. Click on **Organization** and select your organization.\n\n2. **Navigate to Configuration Groups**:\n   - In the left navigation menu, click on **DevOps** and then click on **Configuration Groups**.\n\n3. **Create a New Configuration Group**:\n   - On the **Configuration Groups** page, click **Create**.\n   - Specify the following details for the new configuration group:\n     - **Name**: Enter a unique name for the configuration group within your organization.\n     - **Description**: (Optional) Provide a description for the configuration group.\n     - **Define Keys**: Define unique keys for the configuration group, which will identify values within the group. These keys can be mapped to environment variables or file mounts during deployment. Each key must be unique within the group.\n     - **Assign Values**: Define values for the keys based on different environments. By default, values for all environments are grouped together, but you can separate them as needed.\n\n4. **Finalize Creation**:\n   - Once all details are filled in, click **Create** to create the configuration group.\n\n5. **Link to Components** (optional):\n   - After creating the configuration group, you can link it to any component within your organization for deployment.\n\n**Important Notes**:\n- All configuration group values are encrypted and stored in environment-specific key vaults.\n- The configuration groups you create will be visible in the **Choreo Internal Marketplace** and can be linked during component deployment.\n\nFor more detailed information, you can refer to the official documentation [here](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-configuration-groups/#create-a-configuration-group)."
How can I link a configuration group to a component?,"To link a configuration group to a component in Choreo, you need to follow these steps:\n\n1. **Navigate to the Component**: Go to the component you want to link the configuration group to.\n  \n2. **Open the Deployment Wizard**: On the **Deploy** page, click on **Configure & Deploy**. This action will open the configuration and deployment wizard.\n\n3. **Link Configuration Groups**: In the wizard, you can link the configuration groups as either **Environment Variables** or **File Mounts**, depending on your requirements:\n   - **For Environment Variables**:\n     - Choose the configuration group you want to link.\n     - Click **Link** to associate the configuration group with the component.\n   - **For File Mounts**:\n     - Choose the configuration group you wish to link.\n     - Specify the **Mount Path** where the configuration files should be mounted.\n     - Click **Link** to establish the connection.\n\n4. **Complete the Deployment**: After linking the configuration group, finish the deployment wizard by providing any other required details and click **Deploy** to apply the changes.\n\nBy linking a configuration group, you ensure that the values defined in the group will be injected during deployment, facilitating the management of configurations across different environments.\n\nFor more detailed information, you can refer to the [Manage Configuration Groups documentation](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-configuration-groups/#link-and-use-configuration-groups)."
What is the difference between configurations and secrets in Choreo?,"In Choreo, configurations and secrets are both categorized as sensitive content, but they have distinct characteristics and usage scenarios.\n\n### Differences between Configurations and Secrets:\n\n1. **Visibility and Access**:\n   - **Secrets**: These are write-only, meaning once you create a secret, you cannot view or retrieve its content again through the Choreo Console. However, you can overwrite the existing content at any time.\n   - **Configurations**: These can be read and updated after their creation. You have the ability to view their contents at any time via the Choreo Console.\n\n2. **Recommended Usage**:\n   - It is advisable to use secrets for sensitive data such as database passwords, cloud credentials, and service accounts. This ensures that sensitive information is not exposed.\n\n### Management of Configurations and Secrets:\n\nBoth configurations and secrets can be managed as **file mounts** or **environment variables** within the Choreo platform. They are stored in an encrypted vault, ensuring that all data is secure both at rest and in transit. \n\n- For environments that utilize a private data plane, configurations and secrets can be stored in services like Azure Key Vault or AWS Secret Manager, providing additional layers of security.\n\n### Key Points to Remember:\n- **Secret Management**: You cannot read the content of secrets once created, which is crucial for maintaining confidentiality.\n- **Configuration Management**: You can view and modify configurations, allowing for easier updates as needed.\n\nFor more detailed information on managing configurations and secrets in Choreo, you can refer to the documentation here: [Manage Configurations and Secrets](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-configurations-and-secrets/#the-difference-between-configurations-and-secrets)."
How do I delete a configuration group in Choreo?,"To delete a configuration group in the Choreo Console, follow these steps:\n\n1. Click on **Organization** in the top navigation menu and select your organization.\n2. In the left navigation menu, click on **DevOps** and then select **Configuration Groups**.\n3. In the **Configuration Groups** list, find the configuration group you wish to delete and click the delete icon next to it. This action will prompt a confirmation dialog detailing the implications of the deletion.\n4. Carefully review the deletion details and type the name of the configuration group to confirm the deletion.\n5. Click on **Delete** to complete the process.\n\n**Important Note:** Deleting a configuration group is a permanent and non-reversible action. Ensure that the configuration group is not linked to any component before proceeding with the deletion.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-configuration-groups/#delete-a-configuration-group)."
How do I update an existing configuration or secret?,"To update an existing configuration or secret in Choreo, follow these steps:\n\n1. In the **Component Listing** pane, select the component for which you want to update the configurations or secrets.\n2. Navigate to the left menu and click on **DevOps**, then select **Configs & Secrets**.\n3. Locate the configuration or secret you wish to update and click the edit icon next to it.\n4. Make the necessary changes to the configuration or secret.\n5. Click **Save** to apply the changes.\n\nThis process allows you to effectively manage and modify your component's configurations and secrets within the Choreo Console.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-configurations-and-secrets/#update-an-existing-configuration-or-secret)."
How do I delete an existing configuration or secret?,"To delete an existing configuration or secret in Choreo, you can follow these steps:\n\n1. In the **Component Listing** pane, click on the component for which you want to delete configurations and secrets.\n2. In the left navigation menu, click **DevOps** and then select **Configs & Secrets**.\n3. Locate the configuration or secret you wish to delete and click the delete icon next to it.\n4. You will be prompted to enter the name of the configuration or secret to confirm the deletion.\n5. After entering the name, click **Delete** to proceed.\n\nThis process allows you to manage the configurations and secrets associated with your component effectively. \n\nFor more details, you can refer to the documentation [here](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-configurations-and-secrets/#delete-an-existing-configuration-or-secret)."
Can I create a custom continuous deployment pipeline in Choreo?,"Yes, users can create custom continuous deployment pipelines in Choreo. Here are the steps and requirements to do so:\n\n### Prerequisites\n- To create a new continuous deployment pipeline in your organization, you must have the `ENVIRONMENT-MANAGEMENT` permission. This permission is typically granted to users with the Admin, Choreo Platform Engineer, and Choreo DevOps roles.\n\n### Steps to Create a New Continuous Deployment Pipeline\n1. **Select Your Organization**:\n   - In the Choreo Console, go to the top navigation menu and click on **Organization**. Then select your organization.\n\n2. **Navigate to CD Pipelines**:\n   - In the left navigation menu, click on **DevOps** and then select **CD Pipelines**.\n\n3. **Create a New Pipeline**:\n   - On the **CD Pipelines** page, click on **+ Create Pipeline**.\n   - You will need to specify the following details:\n     - **Name**: Enter a display name for the new pipeline.\n     - **Mark as Default**: Select this option if you want to make this pipeline the default for all new projects.\n\n4. **Add Environments**:\n   - Click on **+ Add Environment** and add the required environments for the pipeline in your preferred sequence.\n\n5. **Create the Pipeline**:\n   - After specifying all the necessary details, click on **Create** to finalize the new continuous deployment pipeline.\n\n### Additional Information\n- By default, all organizations in Choreo are provisioned with a default continuous deployment pipeline. You can customize the sequence in which environments are applied to projects by creating additional pipelines.\n\nFor more detailed information, you can refer to the [Choreo Documentation on Managing Continuous Deployment Pipelines](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-continuous-deployment-pipelines/#create-a-new-continuous-deployment-pipeline)."
How do I add a continuous deployment pipeline to a project?,"To add a continuous deployment pipeline to a project in Choreo, you need to follow these steps:\n\n### Prerequisites\n- Ensure you have either the `ENVIRONMENT-MANAGEMENT` or `PROJECT-MANAGEMENT` permission. These permissions are typically granted to roles such as Admin, Choreo Platform Engineer, Choreo DevOps, and Project Admin.\n\n### Steps to Add a Continuous Deployment Pipeline\n1. In the Choreo Console, navigate to the top navigation menu and click on **Organization**. Select your organization from the dropdown.\n2. Click on the project to which you want to add the pipeline.\n3. In the left navigation menu, click on **DevOps**, and then select **CD Pipelines**.\n4. Click on **+ Add** and choose the pipelines you wish to add to the project from the available options.\n5. Finally, click **Add** to finalize the addition of the pipeline.\n\nThis process allows you to integrate a continuous deployment pipeline into your project, facilitating streamlined deployments.\n\nFor more detailed information, you can refer to the [Choreo documentation on adding a continuous deployment pipeline to a project](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-continuous-deployment-pipelines/#add-a-continuous-deployment-pipeline-to-a-project)."
How do I change the default continuous deployment pipeline of a project?,"To change the default continuous deployment pipeline of a project in Choreo, you need to follow these steps:\n\n### Prerequisites\nEnsure you have either the `ENVIRONMENT-MANAGEMENT` or `PROJECT-MANAGEMENT` permission to make this change. Typically, the `ENVIRONMENT-MANAGEMENT` permission is granted to Admin, Choreo Platform Engineer, and Choreo DevOps roles, while the `PROJECT-MANAGEMENT` permission is granted to Admin, Choreo DevOps, and Project Admin roles.\n\n### Steps to Change the Default Pipeline\n1. In the Choreo Console, go to the top navigation menu and click **Organization**. Then select your organization.\n2. Click on the project for which you want to change the default pipeline.\n3. In the left navigation menu, click **DevOps**, then select **CD Pipelines**.\n4. Find the pipeline you wish to set as the default and click **Set as Default** next to it. This will open a confirmation dialog detailing the implications of this change.\n5. Click **Confirm** to finalize the change.\n\n### Important Note\nThe default continuous deployment pipeline is set separately at both the organization and project levels. When a project is created, it inherits the organization's default pipeline. Changing the project's default pipeline will affect the default promotion order for its components on the Deploy page.\n\nFor further details, you can refer to the [Choreo documentation on managing continuous deployment pipelines](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-continuous-deployment-pipelines/#change-default-continuous-deployment-pipeline-of-a-project)."
How do I delete an environment in Choreo?,"To delete an environment in Choreo, you can follow these steps:\n\n1. In the Choreo Console, go to the top navigation menu and click **Organization**, then select your organization.\n2. In the left navigation menu, click **DevOps** and then click **Environments**.\n3. In the **Environments** list, locate the environment you want to delete and click the delete icon next to it. This will display a confirmation dialog detailing the impact of the deletion.\n4. Review the information provided in the confirmation dialog, then type the name of the environment to confirm the deletion.\n5. Click **Delete** to finalize the deletion.\n\n**Important Note:** Deleting an environment is a permanent, non-reversible operation, so ensure that you are certain about this action before proceeding.\n\nFor more details, you can refer to the documentation [here](https://wso2.com/choreo/docs/devops-and-ci-cd/manage-environments/#delete-an-environment)."
What are the different types of volume mounts available in Choreo?,"In Choreo, there are three types of volume mounts available for your components, each serving different purposes:\n\n1. **Empty Directory (In-Memory)**: \n   - This is a fast, temporary in-memory storage location, which is also referred to as tmpfs. \n   - It is erased when the attached container is restarted or removed.\n   - This type of volume is available on all data planes and is useful for creating a scratch space for temporary file writing.\n\n2. **Empty Directory (Disk)**: \n   - This provides a temporary storage location on disk.\n   - Similar to the in-memory option, it gets destroyed when the attached container is restarted or removed.\n   - However, it is only available on private data planes.\n\n3. **Persistent Volume**: \n   - This is a permanent storage location that persists even if the attached container is restarted or removed.\n   - Persistent volumes are only available on private data planes and are suitable for storing data that needs to be retained across container restarts.\n\n### How to Use Volume Mounts:\n- **Temporary Storage**: You can create temporary storage using either the in-memory or disk empty directory mounts to write files temporarily—like for unzipping files or caching results. This storage is not suitable for long-term data retention since it is lost when the container is restarted.\n  \n- **Persistent Storage**: If you need to store data permanently, you should use a persistent volume. This is especially important for databases or applications where data integrity and availability are crucial.\n\n### Creating Volume Mounts:\nYou can create these volume mounts in the Choreo console by navigating to the **DevOps** section of your component and following the steps based on the type of volume you want to create. \n\nFor detailed steps on creating temporary or persistent storage, you can refer to the following documentation links:\n- [Volume Mount Types](https://wso2.com/choreo/docs/devops-and-ci-cd/configure-storage/#volume-mount-types)\n- [Create a Temporary Storage Space](https://wso2.com/choreo/docs/devops-and-ci-cd/configure-storage/#create-a-temporary-storage-space-for-your-container)\n- [Create a Persistent Storage Space](https://wso2.com/choreo/docs/devops-and-ci-cd/configure-storage/#create-a-persistent-storage-space-for-your-container)"
How do I create a persistent storage space for my container?,"To create a persistent storage space for your container in Choreo, follow these steps:\n\n1. In the **Component Listing** pane, select the component for which you want to create persistent storage.\n2. Navigate to the left menu and click on **DevOps**, then select **Storage**.\n3. Click on **+ Create** to start the creation process.\n4. In the **Create a Volume Mount** pane, specify a name for the volume and choose **Persistent Volume** from the options.\n5. Select a **Storage Class** that fits your needs.\n6. Adjust the **Storage Capacity** slider to set the desired capacity for the volume.\n7. Choose an appropriate **Access Mode**. It's important to check the cloud provider documentation to ensure that the selected access mode is supported by the storage class, as Choreo does not verify this compatibility.\n8. Click **Next** to continue.\n9. To specify where to mount this storage, enter a **Mount Path** and click **Add mount**. Note that you can add multiple mount locations if needed, and the paths must be absolute file paths.\n10. Finally, click **Create** to apply the volume immediately to your container.\n\nPlease note that persistent volume options are only available in private data plane organizations.\n\nFor more detailed information, you can refer to the documentation: [Create a persistent storage space for your container](https://wso2.com/choreo/docs/devops-and-ci-cd/configure-storage/#create-a-persistent-storage-space-for-your-container)."
How do I configure a VPN using Tailscale in Choreo?,"To configure a VPN using Tailscale within Choreo, you can follow these specific steps outlined in the documentation. Choreo provides a prebuilt Tailscale image component that acts as a forward proxy, allowing secure peer-to-peer connections to private networks through Tailscale’s WireGuard network.\n\n### Steps to Configure Tailscale in Choreo\n\n#### 1. **Create a Tailscale Project**\n   - **Create a Project**: In your Choreo console, create a new project that will host your Tailscale proxy.\n     - Click on **+ Create Project**.\n     - Fill in the project details:\n       - **Project Display Name**: Tailscale Proxy Project\n       - **Name**: tailscale-proxy-project\n       - **Project Description**: My Tailscale project\n     - Click **Create**.\n\n#### 2. **Create the Tailscale Proxy Component**\n   - On your project home page, click on **Service** under **Create a Component**.\n   - Select **Container Registry** and choose **Choreo Samples Registry**.\n   - Click on the **Tailscale Proxy** card.\n   - Enter the following details:\n     - **Component Display Name**: Tailscale proxy\n     - **Component Name**: tailscale-proxy\n     - **Description**: Tailscale proxy component\n   - Click **Create**.\n\n#### 3. **Configure and Deploy the Tailscale Proxy**\n   - **Add Required Volume Mounts**: Tailscale requires specific volume mounts:\n     - `/var/run/tailscale`\n     - `/.local`\n   - **Configure Environment Variables**: \n     - Click on **Deploy** and then **Configure & Deploy**.\n     - Add the `TS_AUTH_KEY` environment variable as a secret. Obtain the authentication key from your Tailscale network.\n     - Alternatively, you can set up an OAuth client secret named `OAUTH_CLIENT_SECRET`.\n   - **Mount Configuration File**: Specify `/config.yaml` and define port mappings for TCP traffic.\n   - **Configure Endpoints**: Edit `endpoints.yaml` to expose your Tailscale proxy as a service. For example:\n     ```yaml\n     version: 0.1\n     endpoints:\n     - name: Private HTTP service\n       port: 8080\n       type: REST\n       networkVisibility: Project\n       context: /\n     - name: Private DB service\n       port: 8081\n       type: TCP\n       networkVisibility: Project\n       context: /\n     ```\n   - Click **Save** and then **Deploy**. \n\n#### 4. **Access Private Network Endpoints**\n   - Once the Tailscale proxy is deployed and connected, you can use it to securely access private network endpoints.\n\n### Best Practices\n- **Health Checks**: Configure health checks for the Tailscale proxy.\n- **Use Tailscale ACLs**: Manage permissions using Tailscale ACLs.\n- **Disable Scale-to-Zero**: Avoid service downtime by disabling Scale-to-Zero for the Tailscale proxy.\n- **Run Multiple Replicas**: For high availability, run multiple replicas of the Tailscale proxy.\n\nFor detailed guidance and configurations, you can refer to the full documentation here: [Configure VPNs on the Choreo Cloud Data Plane](https://wso2.com/choreo/docs/devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/)."
How do I handle node key expiry for the Tailscale proxy?,"I'm here to assist with questions related to Choreo. Could you please clarify if your question about handling node key expiry for the Tailscale proxy is related to using Choreo services or functionalities? If not, I may not be able to provide assistance on this topic."
What are the security best practices for using Tailscale in Choreo?,"When using Tailscale in Choreo, it's important to follow certain security best practices to ensure a secure deployment. Here are some key recommendations:\n\n1. **Follow Tailscale's Best Practices**: Before deploying the Tailscale proxy in production environments, adhere to the Tailscale [security best practices](https://tailscale.com/kb/1196/security-hardening) and [production best practices](https://tailscale.com/kb/1300/production-best-practices).\n\n2. **Health Checks**: Configure health checks for your Tailscale proxy. Since it acts as a forward proxy, using one of the open ports of the TCP forwarder as a health endpoint is advisable. For more information on setting up health probes in Choreo, refer to the documentation on [Set up health checks](./set-up-health-checks).\n\n3. **Use Tailscale ACLs**: Implement Tailscale Access Control Lists (ACLs) to manage permissions for users and devices on your Tailnet. This helps in controlling who can access what within your network.\n\n4. **Disable Scale-to-Zero**: It is recommended to disable the Scale-to-Zero feature for the Tailscale proxy. This component should always be running to maintain consistent connections with the Tailscale VPN mesh, as enabling Scale-to-Zero could lead to service downtime.\n\n5. **Run Multiple Replicas**: To enhance high availability and resiliency, run multiple replicas of the Tailscale proxy using Horizontal Pod Autoscaler (HPA). This ensures that your service remains operational even if one instance fails.\n\n6. **Secure Connection**: Choreo blocks incoming connections from other nodes in your Tailnet to the Tailscale proxy. This prevents unauthorized access to your project's namespace in the Choreo cloud data plane.\n\nBy following these best practices, you can mitigate potential security risks and maintain a reliable connection through Tailscale in your Choreo projects.\n\nFor further details, you can refer to the relevant sections in the documentation: \n- [Security best practices](https://wso2.com/choreo/docs/devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#security-best-practices)\n- [Best practices](https://wso2.com/choreo/docs/devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#best-practices)"
How do I generate OAuth credentials for testing APIs?,"To generate OAuth credentials for testing APIs in Choreo, you can follow these steps based on the Choreo Developer Portal UI:\n\n### Generating Access Token for Testing Purposes\n1. **Access Applications**:\n   - In the [Choreo Developer Portal](https://devportal.choreo.dev), click on **Applications** in the header.\n   \n2. **Select Your Application**:\n   - On the **My Applications** page, click on the application for which you want to generate keys and tokens.\n\n3. **Navigate to Credentials**:\n   - In the left navigation menu, click on the desired environment under **Credentials**. This will open the **Application Keys** pane for that environment.\n\n4. **Generate Token**:\n   - Click **Generate Token** to create a test access token. This token can be used for testing API invocations.\n\n### Generating Environment-Specific Keys and Tokens\nIf you need to create keys and tokens for production and non-production endpoints separately, follow these steps:\n\n1. **Access Applications**:\n   - Again, in the [Choreo Developer Portal](https://devportal.choreo.dev), click on **Applications**.\n\n2. **Select Your Application**:\n   - On the **My Applications** page, click on the application for which you want to generate keys and tokens.\n\n3. **Navigate to Credentials**:\n   - In the left navigation menu, click on the desired environment under **Credentials**. \n\n4. **Advanced Configurations**:\n   - Expand **Advanced configurations** to review options like grant types and token expiry times.\n\n5. **Generate Credentials**:\n   - Click **Generate Credentials** to obtain the consumer key and consumer secret. \n\n6. **Generate Test Token**:\n   - Click **Generate Token** to create a test token and copy the displayed token. Alternatively, you can use the cURL command to obtain a test token.\n\n### Important Notes\n- Do not use the test token in your production environment.\n- Ensure you have the necessary permissions to generate keys and tokens for production endpoints.\n\nFor detailed information, you can refer to the relevant documentation links:\n- [Generate an Access Token](https://wso2.com/choreo/docs/consuming-services/generate-an-access-token/#generate-an-access-token-via-the-developer-portal-ui-for-testing)\n- [Create an Application](https://wso2.com/choreo/docs/consuming-services/create-an-application/#step-2-generate-keys)"
How do I obtain an access token for testing APIs?,"To obtain an access token for testing APIs in Choreo, follow these steps in the Choreo Developer Portal UI:\n\n1. In the **Choreo Developer Portal** header, click on **Applications**.\n2. On the **My Applications** page, select the application for which you want to generate keys and tokens.\n3. In the left navigation menu, click on the desired environment under **Credentials**. This will open the **Application Keys** pane for that environment.\n4. Click on **Generate Token** to create a test access token.\n\nThis access token can be used to test API invocations. It's important to note that test tokens should not be used in production environments.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/consuming-services/generate-an-access-token/#generate-an-access-token-via-the-developer-portal-ui-for-testing)."
What is the difference between API-level and operation-level rate limiting?,"In Choreo, there are two main types of rate limiting: **API-level rate limiting** and **operation-level rate limiting**. Here’s a detailed explanation of the differences between the two:\n\n### API-level Rate Limiting\n- **Scope**: This type of rate limiting applies the same request count limit across all operations within the API.\n- **Functionality**: It allocates a specified number of requests that can be made in a defined time unit to the entire API, regardless of the specific operation being called.\n- **Use Case**: This is useful when you want to enforce a uniform limit on the overall usage of your API to prevent overload.\n\nFor more information on API-level rate limiting, you can refer to the documentation [here](https://wso2.com/choreo/docs/api-management/api-rate-limiting/#api-level-rate-limiting).\n\n### Operation-level Rate Limiting\n- **Scope**: In contrast, operation-level rate limiting allows you to set different rate limits for individual operations within the API.\n- **Functionality**: This enables you to define specific rate-limiting values for operations that may require additional protection or have different usage patterns.\n- **Use Case**: It is particularly beneficial for critical API operations where you want to ensure that they are not overwhelmed by excessive requests.\n\nFor more detailed information on operation-level rate limiting, you can check the documentation [here](https://wso2.com/choreo/docs/api-management/api-rate-limiting/#operation-level-rate-limiting).\n\n### Summary\n- **API-level rate limiting** is uniform across all operations, while **operation-level rate limiting** allows for customized limits per operation, thus offering more granular control.\n\nIf you have further questions or need more details, feel free to ask!"
How do I consume an API secured with an API Key?,"To consume an API secured with an API Key in Choreo, you need to follow these steps:\n\n### Step 1: Create an Application in the Choreo Developer Portal\n1. Navigate to the **Choreo Developer Portal** and sign in.\n2. Click on **APIs** in the Developer Portal header.\n3. Select the desired API that requires an API Key for access, which will take you to the API overview page.\n\n### Step 2: Generate an API Key\n1. In the left navigation menu, select the desired environment under **Credentials**.\n2. Click **Generate API Key**. You will need to configure the following options:\n   - **Key Name**: Choose a suitable name for your API key.\n   - **Application**: Select an existing application or create a new one.\n   - **Subscription Policy**: Choose an appropriate subscription policy.\n3. Click **Generate**. Your newly created API Key will be displayed.\n\n### Step 3: Use the API Key to Consume the API\nTo authenticate your API requests, include the API Key in the `api-key` header when invoking the API. Here’s an example of how to do that using `curl`:\n\n```bash\ncurl -H ""api-key: <YOUR_API_KEY>"" -X GET ""https://my-sample-api.choreoapis.dev/greet""\n```\n\nThis will allow you to successfully consume the API secured with the API Key.\n\nFor more detailed instructions, you can refer to the following documentation links:\n- [Creating an API Key](https://wso2.com/choreo/docs/consuming-services/consuming-a-service-apikey/#creating-an-api-key)\n- [Consume an API](https://wso2.com/choreo/docs/consuming-services/consuming-a-service-apikey/#consume-an-api)"
How do I deploy a containerized application in Choreo?,"To deploy a containerized application in Choreo, follow these steps:\n\n1. **Select Component Type**: Choreo supports multiple component types for containerized applications, including Services, Web Applications, Scheduled Tasks, Manual Tasks, Event Handlers, and Test Runners. Choose the appropriate type for your application during the creation process.\n\n2. **Deployment Configuration**: \n   - Choreo will automatically apply deployment configurations based on the component type you select. For example, if you select a Service, it will be deployed as a Kubernetes deployment with appropriate scaling configurations.\n   - You can configure settings such as scaling, resource limits, and health checks from the DevOps page after creating the component.\n\n3. **Application Configurations**:\n   - Provide any necessary configurations in the **Configs & Secrets** section of your component's DevOps page.\n   - You can add configuration types like **ConfigMap** for non-sensitive data and **Secret** for sensitive information. Mount these configurations either as environment variables or files in the container.\n\n4. **Build and Deploy**:\n   - After configuring your application, click the **Deploy Manually** button to initiate the build process. Choreo will build the application using the selected commit in the Build Area.\n   - By default, Choreo scans your Dockerfile for vulnerabilities during the build phase. If no critical vulnerabilities are found, it will proceed with the deployment.\n\n5. **Promoting Builds**: Once the application is built and deployed to the Development environment, you can promote it to higher environments by clicking the **Promote** button.\n\n6. **Vulnerability Management**: If any critical vulnerabilities are found during the build, the pipeline will fail. You can ignore specific vulnerabilities by adding them to a `trivyignore` file in your build context path.\n\nHere is a visual representation of the application configuration and deployment process:\n\n![Application Configuration Page](https://wso2.com/choreo/docs/assets/img/develop-components/deploy/deploy-app-config-page.png)\n\nFor detailed guidance, you can refer to the documentation: [Deploy a Containerized Application](https://wso2.com/choreo/docs/develop-components/deploy-a-containerized-application/)."
How do I connect my repository to Choreo for deploying containerized applications?,"To connect your GitHub repository to Choreo for deploying containerized applications, follow these steps:\n\n### Connecting Your Repository\n\n1. **Authorize Choreo Apps**: Start by authorizing the [Choreo Apps](https://github.com/marketplace/choreo-apps) GitHub application to access your GitHub account or organization. When you connect your GitHub repository via the Component creation page, you will see a Choreo Apps authorization prompt.\n\n2. **Grant Repository Access**: You will need to provide the necessary permissions to the Choreo Apps. The required permissions include:\n   - Read access to issues and metadata\n   - Read and write access to code, pull requests, and repository hooks\n\n3. **Connecting a Public Repository**: If you prefer to connect a public repository, you can do so without requiring authorization. Simply select the **Third-Party GitHub Repository** option and paste the public repository URL in the **Public Repository URL** field during component creation.\n\n4. **Select Repository and Branch**: After granting access, you can choose a repository and an associated branch to connect to your Choreo component.\n\n### Deployment Configuration for Containerized Applications\n\nFor deploying containerized applications, you need to provide specific details during the component creation process:\n\n- **Buildpack**: Select **Dockerfile** as the Buildpack.\n- **Dockerfile Path**: Specify the path to your Dockerfile, which should be relative to the root of your repository (e.g., `/Dockerfile` if it's at the root).\n- **Component Directory**: If you want to include the repository root, you can leave the default value as `/`.\n\n### Important Notes\n\n- Ensure that your Dockerfile explicitly defines a User ID (`UID`) under the `USER` instruction. A valid User ID is a numeric value between 10000-20000.\n- Choreo will automatically apply deployment configurations based on the component type you select, such as scaling configurations for services.\n\nThis process allows you to efficiently manage the deployment of containerized applications using Choreo. For further details, you can refer to the relevant documentation:\n- [Connect your repository to Choreo](https://wso2.com/choreo/docs/develop-components/deploy-a-containerized-application/#connect-your-repository-to-choreo)\n- [Develop Components With Git](https://wso2.com/choreo/docs/develop-components/develop-components-with-git/#connect-a-git-repository-to-choreo)"
How do I provide application configurations for containerized deployments?,"To provide application configurations for containerized deployments in Choreo, you can utilize the **Configs & Secrets** section of the component's **DevOps** page. Here’s a structured approach to manage and apply these configurations effectively:\n\n### Steps to Provide Application Configurations\n\n1. **Access the DevOps Page**:\n   - Navigate to the **DevOps** section of your containerized component.\n\n2. **Configuring Application Settings**:\n   - In the **Configs & Secrets** section, you must provide the necessary configurations required for your application to run.\n\n3. **Create and Mount Configurations**:\n   - After clicking the **Create** button, you can specify the confidentiality of the configuration and how to mount it to your container. The available types include:\n     - **ConfigMap**: For non-sensitive data stored as key-value pairs.\n     - **Secret**: For sensitive information like passwords and tokens.\n\n4. **Mount Types**:\n   - You can choose how to mount these configurations:\n     - **Environment Variables**: Mounts the selected ConfigMap or Secret as an environment variable in the container.\n     - **File Mount**: Mounts the selected ConfigMap or Secret as a file, where the key represents the file name and the value is the file content.\n\n   ![Application Configuration Page](https://wso2.com/choreo/docs/assets/img/develop-components/deploy/deploy-app-config-page.png)\n\n   ![Create Configuration Mount Page](https://wso2.com/choreo/docs/assets/img/develop-components/deploy/deploy-app-config-type-mount-page.png)\n\n5. **Deployment Process**:\n   - Once you have added the configurations, you can build and deploy your application by clicking the **Deploy Manually** button. Choreo will initiate the build process based on the selected commit.\n\n### Additional Notes\n- It is important to securely handle sensitive data and ensure that configurations are encrypted both at rest and in transit.\n- You can also review configurations during a manual deployment via the **Deploy** page.\n\nFor further details, you can explore the document on [Deploy a Containerized Application](https://wso2.com/choreo/docs/develop-components/deploy-a-containerized-application/#deploy-the-containerized-component) to understand more about the process and options available."
How do I configure deployment settings like scaling and resource limits?,"In Choreo, you can configure deployment settings such as scaling and resource limits for your components through the Choreo Console. Here’s how to manage these settings:\n\n### Configuring Resource Limits\n1. **View Container Details**: Each component in Choreo consists of a single main container. You can view detailed information about the container, including its image tag and any imposed resource usage limits.\n   \n2. **Set Resource Limits**: Resource limits are crucial to ensure that a single component does not consume more resources than necessary, which can impact other workloads. If a process exceeds the allocated memory limit, the container will be forcefully shut down and restarted. If it exceeds the CPU limit, it will be throttled, potentially causing performance issues. You can edit the default container configuration to set these limits according to your requirements.\n\n   ![Container Details](https://wso2.com/choreo/docs/assets/img/devops-and-ci-cd/containers/containers-view.png)\n\nFor more details, refer to the documentation on [Configuring Container Resources, Commands, and Arguments](https://wso2.com/choreo/docs/devops-and-ci-cd/configure-container-resources-commands-and-arguments/).\n\n### Configuring Scaling\n1. **Enable Scale-to-Zero**: For service components and web apps created after February 23, 2024, the scale-to-zero feature is enabled by default. This means that the deployment will automatically scale to zero when not in use.\n\n2. **Manual Configuration for Earlier Components**:\n   - Select the component you want to scale-to-zero.\n   - Ensure that the component is deployed and ready to receive traffic.\n   - Navigate to the **DevOps** section in the left menu, then click on **Scaling**.\n   - Click the **scale-to-zero** card to enable this feature.\n\n   ![Free User - Scale to Zero](https://wso2.com/choreo/docs/assets/img/devops-and-ci-cd/scaling/free-user-scaling-view.png)\n\n   Depending on your user tier (free or paid), the views might differ slightly.\n\nFor a comprehensive guide, check out the section on [Autoscaling Components with Scale-to-Zero](https://wso2.com/choreo/docs/devops-and-ci-cd/autoscale/autoscale-components-with-scale-to-zero/#enable-scale-to-zero).\n\nBy following these steps, you can effectively manage the resource limits and scaling settings for your components in Choreo."
How does Choreo support deploying applications with buildpacks?,"Choreo supports deploying applications using buildpacks, which are essential tools that streamline the application deployment process. Here's a detailed overview of how Choreo utilizes buildpacks and the deployment process:\n\n### What are Buildpacks?\nBuildpacks are automated tools that transform your source code into a secure, efficient, production-ready container image without requiring a Dockerfile. They simplify the deployment process by handling configuration and dependencies automatically. Choreo utilizes Google Buildpacks for various programming languages such as Java, Go, NodeJS, Python, PHP, and Ruby, while using its own buildpacks for Ballerina and WSO2 MI.\n\n### Deployment Process Using Buildpacks in Choreo\n1. **Component Types**: Choreo supports deploying applications with buildpacks for various component types, including:\n   - Service\n   - Web Application\n   - Scheduled Task\n   - Manual Task\n   - Webhook\n   - Event Handler\n   - Test Runner\n\n2. **Creating a Web Application**:\n   - Connect a repository containing your web application source code.\n   - Select the appropriate buildpack (for example, if you are using a JavaScript framework, you can choose from available default buildpacks such as React, Angular, or Vue.js).\n   - Specify the build command based on your package manager (like NPM, yarn, or pnpm).\n   - Define the output directory for the build.\n   - Set the required NodeJS version explicitly.\n\n   Once these configurations are set, Choreo automatically generates a build pipeline for your application and deploys it.\n\n3. **CI/CD Pipeline**: \n   - Choreo auto-generates build pipelines that create a container image from the provided source code or a Dockerfile, if specified. \n   - The pipeline also runs security and vulnerability scans, pushes the generated image to a container registry, and updates service endpoints and API specifications as necessary.\n\n4. **Triggering Builds**:\n   - Builds can be triggered manually from the Build page by clicking **Build Latest**. You can also enable **Auto Build on Commit** to automatically trigger builds with each code commit.\n\n5. **Build Logs**: \n   - Users can view build logs for specific builds on the Build page, allowing for easy tracking and troubleshooting.\n\n### Summary\nUsing buildpacks within Choreo simplifies the deployment of applications by automating the build process and reducing the need for manual configuration. This allows developers to focus more on writing code rather than worrying about deployment intricacies.\n\nFor more detailed instructions, you can refer to the documentation [here](https://wso2.com/choreo/docs/develop-components/deploy-an-application-with-buildpacks/)."
How do I configure build-time environment variables for buildpacks?,"To configure build-time environment variables for buildpacks in Choreo, you can follow these steps:\n\n1. **Navigate to the Build Page**: Access the **Build Configurations Editor** on the component's **Build** page.\n\n2. **Configure Environment Variables**: Here, you can specify the environment variables necessary for building your component. These environment variables will be passed to the buildpack during the build process. You can configure both buildpack-specific environment variables and those required for the component build.\n\n   - For instance, if you are using the Java buildpack and wish to override the Maven command, you would set the environment key as `GOOGLE_MAVEN_BUILD_ARGS` and the value as `clean install`.\n\n3. **Limitations**: Note that the ability to configure build-time environment variables is not available for components created using **Ballerina** or **WSO2 MI** buildpacks.\n\nFor a more detailed understanding and examples, you can refer to the [Choreo documentation on developing components](https://wso2.com/choreo/docs/develop-components/deploy-an-application-with-buildpacks/#develop-a-component)."
How do I develop a webhook in Choreo?,"To develop a webhook using Choreo, you will follow a series of steps that include creating the webhook component, deploying it, and connecting it to a GitHub repository. Here’s a comprehensive guide on how to do this:\n\n### Step 1: Create a Webhook Component\n1. In the Choreo Console, click **+ Create**.\n2. Click the **Webhook** card.\n3. Authorize Choreo with your GitHub account:\n   - Click **Authorize with GitHub** to connect Choreo to your GitHub account. If you haven’t connected your GitHub repository to Choreo, enter your credentials and select the repository you forked earlier.\n   - Alternatively, select **Use Public GitHub Repository** and paste the [Choreo samples repository](https://github.com/wso2/choreo-samples) URL.\n4. Fill in the required information:\n   - **GitHub Account**: Your account\n   - **GitHub Repository**: choreo-samples\n   - **Branch**: main\n   - **Component Path**: `github-event-to-email-webhook`\n5. Select **Ballerina** as the build pack.\n6. Provide a display name, a unique name, and a description for the component.\n7. Click **Create** to finalize the creation of the webhook component.\n\nAfter this step, Choreo will create the Webhook component with a sample implementation and open the component **Overview** page.\n\n### Step 2: Deploy the Webhook\n1. In the Choreo Console left navigation menu, click **Deploy**.\n2. In the **Build Area** card, click **Configure & Deploy**.\n3. In the **Configurations** pane, enter the following:\n   - **webhookSecret**: Enter any value (save this value for later use).\n   - **toEmail**: Enter the email address where notification emails will be sent.\n4. Click **Deploy**. You can monitor the deployment progress in the **Console** pane that opens on the right side. Once completed, the **Development** card will indicate the **Deployment Status** as **Active**.\n\n### Step 3: Connect the Webhook to the GitHub Repository\n1. In the Choreo Console left navigation menu, click **Overview**.\n2. Copy the invoke URL from the **Overview** page.\n3. Go to your GitHub account and navigate to the repository you want to set up the webhook for.\n4. Click the **Settings** tab.\n5. In the left navigation menu, click **Webhooks**.\n6. Click **Add webhook** and enter the following:\n   - **Payload URL**: The invoke URL you copied earlier.\n   - **Content Type**: Select `application/json`.\n   - **Secret**: The webhook secret you configured earlier.\n7. Under **Which events would you like to trigger this webhook?**, select **Let me select individual events** and choose the **Issues** checkbox.\n8. Clear the **Pushes** checkbox to prevent triggering the webhook when pushing changes.\n9. Click **Add webhook** to save the configuration.\n\nNow your webhook is created, deployed, and connected to your GitHub repository. \n\nYou can find more details in the documentation: [Develop a Webhook](https://wso2.com/choreo/docs/develop-components/develop-a-webhook/)."
How do I connect a webhook to a GitHub repository?,"To set up a webhook integration with a GitHub repository using Choreo, you need to follow the process outlined below:\n\n### Step 1: Create a Webhook Component\n1. In the Choreo Console, click on **+ Create** if you already have components in your project. If not, proceed to the next step.\n2. Select the **Webhook** card.\n3. Authorize Choreo with your GitHub account by clicking **Authorize with GitHub**. If you haven't connected your GitHub repository to Choreo, input your credentials and select the repository you wish to connect.\n4. Fill in the required information:\n   - **GitHub Account:** Your GitHub account.\n   - **GitHub Repository:** The repository you want to use.\n   - **Branch:** Typically, this is `main`.\n   - **Component Path:** This is where your webhook implementation resides.\n5. Select **Ballerina** as the build pack.\n6. Provide a display name, a unique name, and a description for the component.\n7. Click **Create** to set up the webhook component.\n\n### Step 2: Deploy the Webhook\nOnce the webhook component is created, deploy it to your development environment.\n\n### Step 3: Connect the Webhook to the GitHub Repository\n1. In the Choreo Console, go to the **Overview** page of your webhook component.\n2. Copy the invoke URL from the **URL** field.\n3. Navigate to your GitHub account and open the repository you want to integrate.\n4. Click on the **Settings** tab at the top menu.\n5. In the left navigation menu, select **Webhooks**.\n6. Click on **Add webhook** and fill in the following details:\n   - **Payload URL:** Paste the invoke URL you copied from Choreo.\n   - **Content Type:** Select `application/json`.\n   - **Secret:** Enter the webhook secret you configured during the deployment.\n7. Under **Which events would you like to trigger this webhook?**, select **Let me select individual events** and check the **Issues** checkbox to ensure that GitHub issues trigger the webhook.\n8. Uncheck the **Pushes** checkbox to prevent the webhook from being triggered on push events.\n9. Click **Add webhook** to save the configuration.\n\nNow your webhook is integrated with the GitHub repository, and you can proceed to test it.\n\nFor more detailed instructions, you can refer to the documentation [here](https://wso2.com/choreo/docs/develop-components/develop-a-webhook/#step-3-connect-the-webhook-to-the-github-repository)."
How do I test a webhook in Choreo?,"To test a webhook in Choreo, you need to follow specific steps that ensure the webhook is correctly configured and functioning as intended. Here’s a structured approach on how to do this:\n\n### Steps to Test a Webhook in Choreo\n\n1. **Create the Webhook**: Ensure that you have created and deployed your webhook as per the requirements. This includes connecting it to the appropriate GitHub repository.\n\n2. **Connect the Webhook to GitHub**: \n   - In the Choreo Console, navigate to the **Overview** page and copy the invoke URL of your webhook.\n   - Go to your GitHub repository settings, then to the **Webhooks** section.\n   - Click **Add webhook** and input the following:\n     - **Payload URL**: Paste the invoke URL you copied.\n     - **Content Type**: Select `application/json`.\n     - **Secret**: Use the secret you configured previously.\n   - Choose the events that should trigger the webhook; in this case, select the **Issues** event.\n\n3. **Testing the Webhook**: \n   - To test the webhook, create a GitHub issue in the repository where the webhook is configured, ensuring to label it with `Bug`.\n   - Once the issue is created, you should receive a confirmation email at the address you provided during the webhook setup, indicating that the webhook has been triggered successfully.\n\n### Tools and Features Provided by Choreo for Testing Webhooks\nChoreo provides a user-friendly environment for developing and testing webhooks. While the documentation specifically does not mention additional tools dedicated exclusively for testing webhooks, it does offer general features like:\n\n- **Choreo Console UI**: This allows you to manage and observe your webhook's performance and any interactions it has with external services like GitHub.\n- **Notification Mechanism**: You receive real-time notifications (like emails) based on the configured webhook actions, which helps in validating whether the webhook is firing correctly.\n\nFor a comprehensive guide on developing and testing webhooks, you can refer to the documentation: [Develop a Webhook](https://wso2.com/choreo/docs/develop-components/develop-a-webhook/).\n\nIf you have more specific questions or need further assistance, feel free to ask!"
What is an external consumer in Choreo?,"An external consumer in Choreo refers to any client that interacts with services deployed within the Choreo environment but is hosted outside of Choreo's infrastructure. This can include various types of clients such as mobile applications, web applications, server-to-server integrations, bots, and microservices. The external consumer acts as a bridge, allowing these clients to communicate and utilize the services offered in Choreo.\n\n### Interaction with Choreo Services\nThe interaction between an external consumer and Choreo services involves a few key steps:\n\n1. **Creation of the External Consumer Component**: \n   - Users create an external consumer component in the Choreo console, where they provide necessary details like display name, unique name, and description.\n\n2. **Managing Authentication**: \n   - Authentication is crucial for secure interactions. Users can configure the external consumer to work with either the built-in identity provider of Choreo or an external identity provider that supports OIDC/OAuth 2.0. This configuration involves generating authentication keys or linking an OIDC/OAuth 2.0 application from the external provider.\n\n3. **Connecting to Deployed Services**: \n   - Once the external consumer is authenticated, it can establish connections to the services deployed in Choreo. This allows the external consumer to invoke these services and utilize their functionalities.\n\nFor detailed instructions on creating an external consumer and managing its authentication and connections, you can refer to the documentation here: [Develop an External Consumer](https://wso2.com/choreo/docs/develop-components/develop-an-external-consumer/)."
How do I manage authentication for an external consumer?,"To manage authentication for external consumers using Choreo, you have several options depending on whether you want to use Choreo's built-in identity provider or an external identity provider that supports OIDC/OAuth 2.0. Here's a structured approach to configuring authentication:\n\n### 1. Using Choreo's Built-In Identity Provider\n\nChoreo's built-in identity provider is configured by default, making it easy to manage authentication without additional steps. However, if you wish to generate new keys, you can do so as follows:\n\n1. Go to the **Overview** page of your component within the Choreo Console.\n2. Under **Authentication Configurations**, click **Configure** for the environment you want to set up.\n3. From the **Identity Provider** list, select **Choreo Built-In Identity Provider**.\n4. Click **Generate Keys**. If you see **Regenerate Secret**, it indicates that OAuth keys are already generated for the selected environment.\n\n### 2. Using an External Identity Provider\n\nIf you prefer to use an external identity provider, you will need to follow these steps:\n\n#### Step 2.1: Create and Configure an OIDC/OAuth 2.0 Application\n\n1. Create an OIDC/OAuth 2.0 application in your external identity provider.\n2. Ensure that the access token type is configured as JWT.\n\n#### Step 2.2: Link the OIDC/OAuth 2.0 Application to Your Choreo Component\n\n1. In the **Overview** page of your component, under **Authentication Configurations**, click **Configure** for the desired environment.\n2. In the **Identity Provider** list, select your identity provider.\n3. Paste the **Client ID** of the OIDC/OAuth 2.0 application you created.\n4. Click **Add Keys**.\n\n### Additional Features\n\n- **Managed Authentication**: If you're developing single-page web applications (SPA) with frameworks like React, Angular, or Vue.js, you can use Choreo's managed authentication, which simplifies the integration of authentication while adhering to secure practices.\n- **Backend for Frontend (BFF)** Architecture: This pattern ensures OAuth tokens are secured and minimizes risks from client-side vulnerabilities.\n\n### Important Notes\n\n- Always ensure that the identity provider contains the necessary users for your application.\n- For role-based access control, ensure your users are assigned appropriate roles that match the permissions required for accessing the APIs.\n\nFor more detailed instructions, you can refer to the documentation:\n- [Manage Authentication for External Consumers](https://wso2.com/choreo/docs/develop-components/develop-an-external-consumer/#step-2-manage-authentication-for-the-external-consumer)\n- [Secure Web Applications with Managed Authentication](https://wso2.com/choreo/docs/authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-3-configure-the-identity-provider-for-the-web-application)"
How can I develop components using VS Code with the Choreo extension?,"To use the Choreo extension in Visual Studio Code for developing components, you should follow these steps:\n\n1. **Connect Your Git Repository**:\n   - Start by connecting your GitHub, Bitbucket, or GitLab repository to Choreo. This is essential as Choreo allows you to develop components by integrating with these Git platforms. You can either connect an existing repository or start with a new one.\n   - Ensure that your repository contains the necessary source code for Ballerina or a Docker project, if applicable.\n\n2. **Authorize Your Git Provider**:\n   - You will need to authorize Choreo to access your repository by using a Personal Access Token (PAT). This token will grant Choreo permissions to perform actions like reading and writing to your repository, creating pull requests, and triggering deployments.\n\n3. **Use the Choreo Extension in VS Code**:\n   - With the Git repository connected and authorized, you can leverage the Choreo extension in Visual Studio Code. This integration provides a feature-rich development environment where you can manage your code effectively.\n   - The extension allows for seamless collaboration, code editing, and interaction with your Choreo components directly from the VS Code interface.\n\n4. **Develop Your Components**:\n   - Utilize the capabilities provided by Choreo within VS Code to create and manage your components. This includes writing code, testing, and using CI/CD pipelines for deployment.\n\n5. **Deploy and Manage**:\n   - Once your components are developed, you can build and deploy them directly through Choreo, ensuring that you can manage your applications efficiently.\n\nFor more detailed instructions on connecting your Git repository and managing components with Choreo, you can refer to the following documentation:\n- [Develop Components With Git](https://wso2.com/choreo/docs/develop-components/develop-components-with-git/) \n\nThis resource provides comprehensive guidance on how to set everything up and make the most out of the Choreo extension in VS Code."
What is the purpose of the .choreo/context.yaml file?,"The `.choreo/context.yaml` file is not explicitly mentioned in the provided documentation. However, I can provide some context about related configuration files that are used in Choreo.\n\nIn Choreo, configuration files like `component-config.yaml` and `endpoints.yaml` are used to manage source configurations for components. These files help define how your service components connect to external services and how they expose their endpoints.\n\n### Key Points about Configuration Files:\n\n1. **Location**: These configuration files should be located in the `.choreo` directory at the root of your project repository. This allows for version control and easy management alongside your code.\n\n2. **Component Configuration**:\n   - The `component-config.yaml` file allows you to define inbound and outbound connection configurations. \n   - Inbound configurations specify how your service handles incoming requests, including endpoint names, ports, traffic types, and network visibility.\n   - Outbound configurations define how your service connects to external services, including service references and environment variables.\n\n3. **Endpoints Configuration**:\n   - The `endpoints.yaml` file is specifically used to configure multiple service endpoints, detailing attributes such as endpoint names, ports, types of traffic, and network visibility.\n\n4. **Future Updates**: It is noted that the `component-config.yaml` and `endpoints.yaml` files will eventually be deprecated in favor of a unified `component.yaml` file, which will take precedence over the others.\n\nFor further details, you may refer to the documentation on managing component source configurations: [Manage Component Source Configurations](https://wso2.com/choreo/docs/develop-components/manage-component-source-configurations/).\n\nIf you have specific questions about the `.choreo/context.yaml` file, I would need more detailed documentation to provide accurate guidance."
How do I troubleshoot issues with the Choreo VS Code extension?,"To troubleshoot issues with the Choreo VS Code extension, the documentation provides guidance on common problems encountered when building and deploying components. Here are some key areas to focus on:\n\n1. **Component Deployment Errors**:\n   - Ensure that the `config.js` file is properly integrated during deployment. This can cause rendering issues if not done correctly. Reference the `config.js` file in the `index.html` of your application as follows:\n     ```html\n     <script src=""public/config.js""></script>\n     ```\n   - Verify that the path in the script tag matches the location of the `config.js` file in your repository and that it is placed within the `<body>` tag.\n\n2. **Build Command Issues**:\n   - If you used an incorrect build command when creating your web application, navigate to the build page of your component in Choreo and update the build command in the build configurations section.\n\n3. **Web Application Issues**:\n   - If the Nginx welcome page displays instead of your application's homepage, this may be due to an incorrect output directory specified during component creation. Check your Docker build logs to ensure the correct files are being copied.\n\n4. **Authentication Issues**:\n   - If you encounter problems with user authentication, refer to the appropriate resources for managing users with Choreo's built-in identity provider or for setting up other OpenID Connect supported IdPs.\n\nFor a detailed guide and more troubleshooting steps, you can refer to the official documentation: [Troubleshoot Choreo](https://wso2.com/choreo/docs/references/troubleshoot-choreo/)."
What permissions are granted when authorizing GitHub with Choreo?,"When authorizing GitHub with Choreo for integration purposes, Choreo is granted several permissions to perform actions on your behalf within your repositories. Below are the specific permissions that are required:\n\n| Permission    | Read | Write | Description                                                           |\n|---------------|------|-------|-----------------------------------------------------------------------|\n| Issues        | Y    | N     | Read component ID label to filter the pull requests                   |\n| Metadata      | Y    | N     | List repositories                                                     |\n| Contents      | Y    | Y     | List branches and create a branch to commit sample code               |\n| Pull Request  | Y    | Y     | Create a pull request if you start with a Choreo sample               |\n| Webhooks      | Y    | Y     | Trigger automatic deployment and configuration generation             |\n\nThese permissions allow Choreo to interact with your GitHub repositories effectively, enabling it to perform tasks such as creating pull requests and managing contents.\n\nFor further details, you can refer to the documentation [here](https://wso2.com/choreo/docs/develop-components/develop-components-with-git/#authorize-github-with-choreo)."
How do I add Git submodules to a project in Choreo?,"To add Git submodules to a project in Choreo Console, follow these steps:\n\n1. **Connect Your Git Repository**: Ensure that your GitHub repository is connected to Choreo. You can do this by going to the **Settings** in your organization and adding the necessary credentials.\n\n2. **Add Git Submodules**: When you connect your GitHub repository, you can include external repositories as submodules. This is particularly useful for:\n   - Code sharing without duplication: Use submodules to maintain shared libraries across multiple projects, ensuring a single source of truth.\n   - Efficient third-party library management: Manage third-party libraries as submodules to update them independently and track changes easily.\n\n3. **Automatic Updates**: Choreo allows you to automatically pull the latest versions of Git submodules. To enable this feature:\n   - Navigate to the **Component Listing** pane and select the component for which you want to pull the latest submodules.\n   - Click on **Build** in the left navigation menu.\n   - Edit the **Build Configurations** and turn on the **Pull Latest Submodules** toggle.\n\n4. **Permissions**: If you encounter an error related to insufficient permissions for cloning a submodule, ensure that you have granted the necessary access to the repositories, especially if you are using a personal or organization GitHub account.\n\nFor more detailed guidance, you can refer to the documentation on [Develop Components With Git](https://wso2.com/choreo/docs/develop-components/develop-components-with-git/#authorize-github-with-choreo)."
How do I automatically pull the latest versions of Git submodules?,"I'm here to assist with questions related to Choreo. If your question is related to using Git submodules within Choreo, could you please clarify how this ties into your work with Choreo? If your question is purely about Git, I recommend checking Git documentation or community forums for detailed guidance."
What permissions are required for Bitbucket authorization with Choreo?,"To authorize Bitbucket with Choreo, you will need to use a Personal Access Token (PAT). The following permissions are required when you authorize Choreo using this token:\n\n| Permission    | Read | Write | Description                                                        |\n|---------------|------|-------|--------------------------------------------------------------------|\n| Account       | Yes  | No    | Get user information and workspace details                         |\n| Repositories   | Yes  | Yes   | List branches and create a branch to commit sample code            |\n| Pull Requests  | Yes  | Yes   | Create a pull request if you start with a Choreo sample            |\n| Webhooks       | Yes  | Yes   | Trigger automatic deployment and configuration generation          |\n\nThese permissions allow Choreo to perform actions such as accessing user and workspace information, managing branches and pull requests, and setting up webhooks for automated processes within your Bitbucket repository.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/develop-components/develop-components-with-git/#authorize-bitbucket-with-choreo)."
What are the prerequisites for using Bring Your Own Image (BYOI) in Choreo?,"Before using the Bring Your Own Image (BYOI) feature in Choreo, you need to ensure that you have the following prerequisites:\n\n1. **A container registry**: You must have a container registry that contains the images you want to deploy. Choreo supports various container registries, including but not limited to:\n   - Google Container Registry (GCR)\n   - Azure Container Registry (ACR)\n   - GitHub Container Registry\n   - Docker Hub\n\n2. **An image in the registry**: You need to have an image ready for deployment in your container registry.\n\n3. **(Optional) An external build/CI pipeline**: This is optional but can be used for automating deployments during the build process outside of Choreo. While deploying a component, Choreo does not create images from source code or trigger a new deployment when a new image is available. However, you can use your existing build process to send an HTTP POST request to a webhook with the new image details, although this feature is currently available only on private data planes (PDPs).\n\nThese prerequisites are essential to ensure that you can successfully deploy and manage your container images within the Choreo environment.\n\nFor more information, you can refer to the [prerequisites section in the documentation](https://wso2.com/choreo/docs/develop-components/bring-your-own-image/#prerequisites)."
How do I register a container registry in Choreo for BYOI?,"To register a container registry in Choreo for the Bring Your Own Image (BYOI) feature, follow these steps:\n\n1. **Select Your Organization**: In the Choreo Console header, go to the **Organization** list and select your organization.\n\n2. **Access Settings**: In the left navigation menu, click on **Settings** to open the organization settings page.\n\n3. **Navigate to Credentials**: Click the **Credentials** tab, and then select the **Container Registries** tab.\n\n4. **Add a New Registry**: Click on **+Add Registry** to configure the connection to your container registry.\n\n5. **Provide Registry Details**:\n   - **Registry Display Name**: Specify a name for the registry that will be displayed in Choreo.\n   - **Authentication Type**: Choose the appropriate authentication type and fill in the required information. The available authentication types include:\n     - **Public (anonymous) access**: Only the registry host information is needed.\n     - **Basic authentication**: Enter your username and password.\n     - **Docker config**: Provide a Docker config in JSON format that includes the necessary credentials.\n     - **Vendor-specific authentication**: This option is available for private data planes and requires knowledge of the registry host.\n\n6. **Save the Configuration**: After entering all the necessary details, click **Save** to complete the registration of your container registry.\n\n### Important Notes:\n- Choreo acts as an orchestrator and does not pull images into its control plane; it facilitates the data plane's ability to retrieve images from your external registry.\n- Make sure you have the necessary permissions and authentication credentials for your container registry, as these will be used by Choreo to access your images.\n\nFor more detailed steps and information on authentication types, you can refer to the documentation: [Step 1: Register a container registry](https://wso2.com/choreo/docs/develop-components/bring-your-own-image/#step-1-register-a-container-registry)."
What are the different authentication types supported for container registries?,"Choreo supports several authentication types for connecting to container registries. Here are the authentication options available:\n\n1. **Public (anonymous) access**: This option is for container registries that allow unrestricted public access. You only need to provide the registry host information. For example, you can use:\n   - Docker Hub (public repositories): `registry.hub.docker.com`\n   - Docker Hub (private repositories): `registry.docker.com`\n\n2. **Basic authentication**: This method requires you to provide a username and password to access the container registry.\n\n3. **Docker config**: You can use a Docker config in JSON format to authenticate. Note that this option allows registering only one container registry. The credentials must be included directly in the configuration. An example of the Docker config format is:\n   ```json\n   {\n     ""auths"": {\n       ""index.docker.io/v1/"": {\n         ""auth"": ""c3R...zE2""\n       }\n     }\n   }\n   ```\n\n4. **Vendor-specific authentication**: This option is used for private data planes, where your cloud provider manages authentication. Choreo needs to know the registry host since the data plane already has implicit access. The recommended methods vary by cloud provider:\n   - **Azure Container Registry (ACR)**: Use service principal-based basic authentication or vendor-specific authentication for Azure private data planes.\n   - **Google Artifact Registry (GAR)**: Use service account-based basic authentication.\n   - **Amazon Elastic Container Registry (ECR)**: Vendor-specific authentication is recommended when using ECR with AWS private data planes.\n   - **Docker Hub (Private)**: Basic authentication or Docker config can be used.\n   - **GitHub Container Registry (GHCR)**: Basic authentication using a Personal Access Token (PAT) is required.\n\nThese authentication methods allow you to securely connect and access your container images hosted in various registries.\n\nFor further details, you can refer to the following documentation: [Authentication types](https://wso2.com/choreo/docs/develop-components/bring-your-own-image/#step-1-register-a-container-registry)."
How do I create a component in Choreo using a container registry source?,"To create a component in Choreo using a container registry source, follow these steps:\n\n1. **Select Your Project**: In the left navigation pane, click on **Overview** and select your project.\n\n2. **Create a New Component**: Under **Component Listing**, click on **+ Create**.\n\n3. **Choose Component Type**: Select the type of component you want to create. Note that the Bring Your Own Image (BYOI) option is available for:\n   - Service\n   - Web Application\n   - Scheduled Task\n   - Manual Task\n\n4. **Choose Container Registry**: In the Create Component pane, select **Container Registry** under the **Connect a Docker Image** section.\n\n5. **Select Your Container Registry**: Under **Deploy an image from Container Registry/Docker Hub**, choose the container registry where your image is hosted. Ensure you have registered this container registry beforehand.\n\n6. **Enter Image URL**: Provide the full image URL in the format:\n   ```\n   [container-registry-host]/[repository-name]/[image-name]:[tag]\n   ```\n   For example, a public image from Docker Hub without a specified repository name defaults to `/library/`. An example would be:\n   ```\n   registry.hub.docker.com/library/nginx:1.25\n   ```\n\n7. **Component Name and Description**: Fill in a display name, a unique name (which cannot be changed after creation), and a description for your component.\n\n8. **Review and Create**: Once all details are filled in, review them and click on **Create** to finalize the creation of your component.\n\n### Important Notes:\n- Ensure you have a container registry with the necessary images ready for deployment.\n- This functionality is currently available only on private data planes (PDPs) in Choreo.\n\nFor more detailed guidance, you can refer to the official documentation: [Create a component in Choreo using a container registry source](https://wso2.com/choreo/docs/develop-components/bring-your-own-image/#step-2-create-a-component-in-choreo)."
How do I update the image tag during deployment for BYOI?,"To update the image tag during deployment for your Bring Your Own Image (BYOI) component in Choreo, follow these steps:\n\n1. In the left navigation menu, click on **Deploy**.\n2. In the **Build Area** card, click on **Update Image & Deploy**.\n3. In the **Endpoint** pane that opens, you will see the endpoint ready to be deployed. Click the edit icon next to the endpoint name. You can also define the endpoints for your service at this point if necessary.\n4. Change the **Network Visibility** to **Public** to securely expose the endpoint for consumption.\n5. Click **Update**.\n6. Select the **Update Image Tag** option. This allows you to specifically update the tag of the image you want to deploy.\n7. Finally, click **Deploy**. This will deploy your service with the updated image tag to the development environment.\n\nThese steps will help you successfully update the image tag during the deployment of your BYOI component in Choreo.\n\nFor more detailed information, you can refer to the documentation here: [Deploy the component in Choreo](https://wso2.com/choreo/docs/develop-components/bring-your-own-image/#step-3-deploy-the-component-in-choreo)."
How do I expose service endpoints for BYOI components?,"To expose service endpoints for your Bring Your Own Image (BYOI) components in Choreo, you need to follow a specific process that applies to service components. Here are the detailed steps:\n\n1. In the left navigation menu, click **Deploy**.\n2. In the **Build Area** card, click **Update Image & Deploy**.\n3. In the **Endpoint** pane that opens, you have the option to define the endpoints for your service while manually deploying the service.\n4. Click **Create/Update Endpoints**.\n5. Under the **Edit endpoints.yaml** section, you can edit the endpoints YAML file in the provided editor.\n\nAlternatively, you can upload the associated API specification/schema files (OpenAPI/GraphQL schemas). You can also reference these files in the `endpoints.yaml` file by their file name, similar to how you would do it with Git-based Choreo components. \n\nRemember to follow the standard definitions for defining endpoints in Choreo, which include details like port binding, protocol, endpoint name, network visibility, and endpoint schema.\n\nFor more detailed information, you can check the documentation on [exposing service endpoints for BYOI components](https://wso2.com/choreo/docs/develop-components/bring-your-own-image/#step-4-expose-service-endpoints)."
How do I configure a CI/build pipeline to auto-deploy images to Choreo?,"To configure a CI/build pipeline that automatically deploys images to the Choreo platform, you can follow these steps:\n\n1. **Build and Push the Image**: Start by building and pushing the container image associated with your Choreo component to your chosen container registry.\n\n2. **Access DevOps Settings**: In the Choreo console, navigate to the **DevOps** section and then click on **External CI**.\n\n3. **Generate a Token**: In the **Manage Tokens** section, generate a token for your CI pipeline. This token is specific to the component you are working with. It is advisable to store this token securely, such as in a GitHub secret if you are using GitHub Actions.\n\n4. **Trigger Automatic Deployment**: To initiate the deployment automatically, you can send an HTTP POST request to the Choreo webhook endpoint with the updated image details. Alternatively, you can utilize the provided webhook snippets for this purpose. This step ensures that the newly built image is deployed to your development environment seamlessly.\n\nIt’s important to note that Choreo does not automatically detect and deploy newly added images or tags in the linked container registry. Therefore, integrating your own CI pipeline is necessary for triggering deployments manually.\n\nFor detailed information, you can refer to the [Choreo documentation on Auto-deploying images](https://wso2.com/choreo/docs/develop-components/bring-your-own-image/#auto-deploy-images-in-choreo-with-an-external-cibuild-pipeline)."
What are the different network visibility options for endpoints in Choreo?,"In Choreo, endpoints are defined with specific attributes, one of which is the **Network Visibility**. This attribute determines the level of access to the endpoint based on its visibility setting. There are three different network visibility options for endpoints:\n\n1. **Project**: This setting allows components within the same project to access the endpoint. It restricts access to only those components that are part of the same project.\n\n2. **Organization**: With this visibility option, any component within the same organization can access the endpoint, while access is restricted for components outside the organization. This is useful for internal services that should be available to all projects within a single organization.\n\n3. **Public**: This setting allows any client to access the endpoint, regardless of their location or organization. It is suitable for services that need to be accessible to external users or applications.\n\nThese visibility settings enable you to control who can access your services and integrations effectively, ensuring that sensitive endpoints are protected while allowing broader access where necessary.\n\nFor more details on configuring endpoints and their attributes, you can refer to the [Choreo documentation on configuring endpoints](https://wso2.com/choreo/docs/develop-components/configure-endpoints-body/)."
How do I expose endpoints as managed APIs in Choreo?,"To expose endpoints as managed APIs in Choreo, you need to follow a series of steps that ensure secure and controlled access to your services. Here’s a comprehensive guide on how to do this:\n\n### Steps to Expose Endpoints as Managed APIs\n\n1. **Set Network Visibility**:\n   - Before exposing your endpoint, set the network visibility to either **Organization** (accessible within your organization) or **Public** (accessible to anyone). This setting allows the endpoint to be exposed through the Choreo API Gateway, which comes with various benefits such as API management, throttling, and monitoring.\n\n2. **Create an API Proxy**:\n   - Navigate to the Choreo console and create an API proxy by either uploading an OpenAPI specification or providing an OpenAPI specification URL. \n   - Provide details such as:\n     - **Display Name**\n     - **Name** (must be unique)\n     - **Context** (the path under which the API is accessed)\n     - **Version**\n     - **Target** (the actual service endpoint)\n     - **Access Mode** (set it to External if you want it publicly accessible)\n\n3. **Deploy the API Proxy**:\n   - After creating the API proxy, navigate to the **Deploy** section.\n   - Choose to configure and deploy the API, ensuring that the access mode is set correctly (External for public access).\n   - Once deployed, confirm that the deployment status is marked as **Active**.\n\n4. **Promote the API Proxy to Production**:\n   - Once you have verified that the API proxy works as intended in the development environment, promote it to production.\n   - This involves going to the **Deploy** section again and clicking on **Promote**.\n   - Confirm that the API proxy is deployed successfully to production and verify its functionality.\n\n5. **Publish the API Proxy**:\n   - Finally, publish the API so that it becomes available for consumption. This involves navigating to the **Manage** section, clicking on **Lifecycle**, and then choosing to publish the API.\n\n### Benefits of Managed APIs\nBy exposing your endpoints as managed APIs, you gain access to:\n- Full lifecycle API management,\n- API throttling,\n- Secure APIs with industry-standard authorization flows,\n- API analytics and monitoring.\n\nFor further details, you can refer to the following documentation:\n- [Expose endpoints as managed APIs](https://wso2.com/choreo/docs/develop-components/configure-endpoints-body/#expose-endpoints-as-managed-apis)\n- [Expose a Service as a Managed API](https://wso2.com/choreo/docs/tutorials/expose-a-service-as-a-managed-api/#step-1-create-an-api-proxy)\n\nThis process ensures that your services are secure and well-managed, allowing for safe consumption by various clients."
How do I change the default endpoint of a component?,"To change the default endpoint of a component in Choreo, follow these steps:\n\n### Prerequisites\n- Ensure that the component does not have any associated published APIs. If it does, you need to unpublish those APIs first from the **Lifecycle** page. \n- Be aware that if you have created multiple deployment tracks within the current major version of the component or promoted the component beyond its initial environment, you will not be able to change the default endpoint.\n\n### Steps to Change the Default Endpoint\n1. In the **Component Listing** pane, select the component for which you want to change the default endpoint.\n2. In the left navigation menu, click on **Deploy**.\n3. On the **Deploy** page, navigate to the **Set Up** card and click on **Configure & Deploy**.\n4. In the **Environment Configurations** pane that opens, click **Next**.\n5. In the **File Mount** pane that opens, click **Next**.\n6. In the **Endpoint Details** pane, click the **Default Endpoint** dropdown list and select the endpoint you want to set as the default.\n7. Click **Update**.\n8. Finally, click **Deploy** to apply the changes. The component will now use the selected endpoint as the default, and the default URL will be updated accordingly.\n\n### Important Notes\n- If you define an endpoint during component creation, you can later edit it by following similar steps from the **Deploy** page.\n- If you use a `component.yaml` file, be mindful that it will take precedence over UI-defined endpoints. If any changes need to be made to endpoints defined in this file, you must update the file itself rather than using the UI.\n\nFor more details, you can refer to the documentation: [Understand the default component URL](https://wso2.com/choreo/docs/develop-components/configure-endpoints-body/#understand-the-default-component-url) and [Configure endpoints](https://wso2.com/choreo/docs/develop-components/configure-endpoints/)."
How do I edit a UI-defined endpoint in Choreo?,"To edit a UI-defined endpoint in the Choreo Console, follow these steps:\n\n1. In the **Component Listing** pane, click on the component for which you want to update the endpoint.\n2. In the left navigation menu, click **Deploy**.\n3. On the **Deploy** page, go to the **Set Up** card and click **Configure & Deploy**.\n4. In the **Environment Configurations** pane that opens, click **Next**.\n5. In the **File Mount** pane that opens, click **Next**.\n6. In the **Endpoint Details** pane that opens, locate the endpoint you wish to edit.\n7. Click the **Edit** icon next to the endpoint, modify the editable fields as needed, and then click **Update**.\n8. Finally, click **Deploy** to apply the changes.\n\nIt's important to note that if you have committed a `component.yaml` file and built the component, the endpoints will be generated from that file and cannot be edited through the UI. In such a case, you would need to update the `component.yaml` file directly to make any changes to the endpoints.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/develop-components/configure-endpoints-body/#configure-endpoints)."
How do I create a temporary storage space for my container?,"To create a temporary storage space for your container in Choreo, you can follow these steps to configure an empty directory that allows your application to read from and write to a temporary file system. This is particularly useful for tasks such as unzipping files or creating temporary local caches.\n\n### Steps to Create Temporary Storage Space:\n\n1. **In the Choreo Console**, locate the **Component Listing** pane and click on the component for which you want to create temporary storage.\n\n2. On the left navigation menu, select **DevOps** and then click on **Storage**.\n\n3. Click on **+ Create** to initiate the creation of a new volume mount.\n\n4. In the **Create a Volume Mount** pane:\n   - Specify a **name** for the volume.\n   - Select **Empty Directory (In-Memory)** for the type of storage.\n   \n   ![Create temporary storage](https://wso2.com/choreo/docs/assets/img/devops-and-ci-cd/storage/create-emptydir-step-1.png)\n\n5. Click **Next**.  \n\n   > **Warning**: In-memory (tmpfs) storage uses container memory. Uncontrolled writes can lead to memory being exhausted, potentially causing the container to be killed and restarted.\n\n6. To add a mount location, specify a **Mount Path** (ensure it’s an absolute file path) and click **Add mount**.\n\n   > **Tip**: You can add multiple mount locations to a volume.\n\n   ![Specify mount details](https://wso2.com/choreo/docs/assets/img/devops-and-ci-cd/storage/create-emptydir-step-2.png)\n\n7. Finally, click **Create**. This will apply the volume mount immediately to your container and trigger a rolling restart.\n\nThis process will create a temporary storage space that is associated with the lifecycle of your container, meaning it will be destroyed when the container is restarted or updated.\n\nFor more detailed information, you can refer to the [Choreo documentation on creating a temporary storage space for your container](https://wso2.com/choreo/docs/devops-and-ci-cd/configure-storage/#create-a-temporary-storage-space-for-your-container)."
How do I create a persistent storage space for my container in Choreo?,"To create persistent storage for a container in Choreo, you can follow these steps:\n\n1. In the **Component Listing** pane, click on the component for which you want to create a persistent storage.\n2. In the left navigation menu, click **DevOps** and then click **Storage**.\n3. Click **+ Create**.\n4. In the **Create a Volume Mount** pane, specify a name for the volume and select **Persistent Volume**.\n5. Select a **Storage Class**.\n6. Move the **Storage Capacity** slider to set the required capacity.\n7. Select an appropriate **Access Mode**. It’s important to check the cloud provider documentation to ensure that the selected access mode is supported by the storage class, as selecting an unsupported access mode can lead to mount errors.\n8. Click **Next**.\n9. To add a mount location, specify a **Mount Path** and click **Add mount**. Note that you can add multiple mount locations to a volume, and mount paths should be absolute file paths.\n10. Click **Create**. This will apply the volume immediately to your container.\n\n### Important Notes:\n- Persistent volume options are only available in private data plane organizations.\n- Ensure that the mount paths are absolute file paths, as these will be available for your application to read/write from.\n\nFor more detailed steps and visuals, you can refer to the [official documentation](https://wso2.com/choreo/docs/devops-and-ci-cd/configure-storage/#create-a-persistent-storage-space-for-your-container)."
How can I deploy an image from a container registry?,"To deploy an image from a container registry using Choreo, you can follow these steps:\n\n### Prerequisites\n1. **Container Registry**: Ensure you have a container registry containing the images you want to deploy (e.g., GCR, ACR, GitHub Container Registry, or Docker Hub).\n2. **Image in the Registry**: Make sure you have a prebuilt image ready for deployment.\n3. **Optional CI Pipeline**: If desired, integrate an external CI pipeline to automate deployments.\n\n### Deployment Steps\n1. **Create a Component**:\n   - In the Choreo console, click on **Overview** and select your project.\n   - Under **Component Listing**, click **+ Create**.\n   - Choose your component type (Service, Web Application, Scheduled Task, or Manual Task).\n   - In the Create Component pane, select **Container Registry** under the **Connect a Docker Image** section.\n   - Choose **Deploy an image from Container Registry/Docker Hub** and select your registered container registry.\n   - Enter the full image URL in the format:  \n     ```\n     [container-registry-host]/[repository-name]/[image-name]:[tag]\n     ```\n   - Provide a display name, a unique name, and a description for the component.\n\n2. **Triggering Deployment**:\n   - If you want to automate deployments upon new image availability, set up your CI pipeline to send an HTTP POST request to the Choreo webhook with the updated image details. You can generate a token for this purpose under **DevOps > External CI** in Choreo.\n\n3. **Manual Deployment**:\n   - Alternatively, you can manually deploy the image by going to the **Deploy** page and clicking on **Deploy**.\n\n### Important Notes\n- Choreo currently does not automatically detect new images or tags. Therefore, you must manually trigger the deployment or set up your CI/CD pipeline to handle this.\n- This feature is available only on private data planes (PDPs).\n\nFor further details and a comprehensive guide, you can refer to the following documentation links:\n- [Bring Your Own Image (BYOI)](https://wso2.com/choreo/docs/develop-components/bring-your-own-image/)"
How can I define a command and arguments for the container?,"To define a command and arguments for a container in Choreo, you can follow these steps:\n\n1. **Access the Component**:\n   - In the **Component Listing** pane, click on the component for which you want to edit container configurations.\n\n2. **Navigate to Container Settings**:\n   - In the left navigation menu, click on **DevOps** and then select **Containers**.\n\n3. **Edit Container Configuration**:\n   - On the **Containers** page, click **Edit** to update the container configuration.\n\n4. **Define Command and Arguments**:\n   - You can specify a command and arguments to override the `ENTRYPOINT` of the container. This is particularly useful for running legacy or third-party applications.\n   - When you define a command and arguments:\n     - It specifies the `ENTRYPOINT` array and is not executed within a shell.\n     - Variable references in the format `$(VAR_NAME)` are expanded using the container's environment.\n     - If a variable cannot be resolved, it remains unchanged in the input string.\n     - Using `$$` allows you to escape the `$(VAR_NAME)` syntax, meaning `""$$(VAR_NAME)""` will produce the literal string `""$(VAR_NAME)""`.\n     - Escaped references are never expanded, regardless of their existence.\n\n5. **Save Changes**:\n   - After applying the necessary changes, click **Save** to update the container configuration.\n\nIf you do not define a command and arguments, the `ENTRYPOINT` of the container image will be used.\n\nFor detailed visual guidance and further information, you can refer to the documentation [here](https://wso2.com/choreo/docs/devops-and-ci-cd/configure-container-resources-commands-and-arguments/#update-container-configurations)."
How can I create and manage a Choreo-Managed Cache instance?,"To create and manage a Choreo-Managed Cache instance, follow these steps:\n\n### Creating a Choreo-Managed Cache\n\n1. In the Choreo Console, click on the **Organization** list to open the organization home page.\n2. In the left navigation menu, select **Dependencies** and then click on **Databases**.\n3. Click on **+ Create** and select **Choreo-Managed Cache** as the data store type. Provide a display name for your cache instance.\n4. Choose a preferred cloud provider (AWS, Azure, GCP, or Digital Ocean). The cloud provider will provision the necessary compute and storage infrastructure for your cache.\n5. Select a region for your cache. The available regions will depend on the selected cloud provider, with options typically in the US and EU.\n6. Choose a service plan that fits your needs. Service plans differ in terms of the allocated CPU, memory (RAM), and storage space, as well as high-availability configurations for production use cases.\n7. Click **Create** to finalize the creation of your Choreo-Managed Cache instance.\n\n### Connecting to Your Choreo-Managed Cache\n\n- To connect to your Choreo-Managed Cache, you can use any legacy Redis® OSS compatible driver in any programming language.\n- Connection parameters can be found in the **Overview** section in the Choreo Console under the relevant cache instance. Note that Choreo-Managed Cache enforces TLS for secure connections.\n- By default, Choreo-Managed Cache instances accept traffic from the internet. However, you can restrict access to specific IP addresses and CIDR blocks under **Advanced Settings**.\n\n### Important Notes\n- The ability to create Choreo-managed caches is available only to paid Choreo users. \n- Billing for these services is included in your Choreo subscription, with pricing varying based on the service plan chosen.\n\nFor more details, you can refer to the documentation on creating a Choreo-Managed Cache [here](https://wso2.com/choreo/docs/manage-databases-and-caches/choreo-managed-caches/#create-a-choreo-managed-cache)."
How do I connect to my Choreo-Managed Cache instance?,"To connect to your Choreo-Managed Cache instance, follow these steps:\n\n1. **Use a Compatible Driver**: Utilize any legacy Redis® OSS compatible driver available in your preferred programming language to establish a connection to your Choreo-Managed Cache.\n\n2. **Obtain Connection Parameters**: You can find the necessary connection parameters in the **Overview** section within the Choreo Console under the relevant cache instance.\n\n3. **TLS Enforcement**: Keep in mind that Choreo-Managed Cache enforces TLS (Transport Layer Security) for secure connections.\n\n4. **Traffic Accessibility**: By default, Choreo-Managed Cache instances accept traffic from the internet. If you need to restrict access, you can specify certain IP addresses and CIDR blocks in the **Advanced Settings**.\n\nBy following these guidelines, you should be able to connect to your Choreo-Managed Cache instance successfully.\n\nFor more details, you can refer to the documentation [here](https://wso2.com/choreo/docs/manage-databases-and-caches/choreo-managed-caches/#connect-to-your-choreo-managed-cache)."
What are the high availability and automatic backup features for Choreo-Managed Cache?,"The Choreo-Managed Cache offers various high availability and automatic backup features that vary depending on the service plan you select. Here's a breakdown of these features:\n\n### High Availability\n- **Hobbyist Plan**: Provides a single-node setup with limited availability.\n- **Startup Plan**: Similar to the Hobbyist plan, it also has a single-node setup with limited availability.\n- **Business Plan**: Features a two-node architecture (primary + standby) which offers higher availability, including automatic failover if the primary node fails.\n- **Premium Plan**: Offers the highest availability with a three-node setup (primary + standby + standby), ensuring automatic failover if the primary node fails.\n\n### Backup Features\n- **Hobbyist Plan**: Allows for a single backup, which is primarily for disaster recovery, but has no backup history.\n- **Startup Plan**: Similar to the Hobbyist plan, it allows for a single backup for disaster recovery, with a backup history of 1 day.\n- **Business Plan**: Automatic backups are included, with a backup retention history of 3 days.\n- **Premium Plan**: Also includes automatic backups, with a longer backup retention history of 13 days.\n\n### Additional Details\n- Automatic backups are performed daily, and write-ahead logs (WAL) are copied at 5-minute intervals or for every new file generated. All backups are encrypted at rest.\n- Choreo automatically handles outages and software failures by replacing broken nodes and resuming from the point of failure. The impact of a failure largely depends on the number of available standby nodes in your configuration.\n- In case of minor failures, Choreo can restore service automatically, while severe failures lead to the creation of a new replacement node.\n\nFor more detailed information on the Choreo-Managed Cache features, you can refer to the documentation [here](https://wso2.com/choreo/docs/manage-databases-and-caches/choreo-managed-caches/#high-availability-and-automatic-backups)."
"What are the limitations of Choreo-Managed Cache, such as connection limits and restricted commands?","In Choreo-Managed Cache, the connection limits and restricted commands are as follows:\n\n### Connection Limits\nThe number of simultaneous connections to a Choreo-Managed Cache is determined by the available memory on the server instances. You can estimate the maximum number of connections using the formula:\n\n```\nmax_number_of_connections = 4 x m\n```\nwhere `m` represents the memory in megabytes. Even on the smallest servers, at least 10,000 connections are available. For instance, on a server with 4 GB of memory (4,096 MB), the maximum simultaneous connections would be:\n\n```\n4 x 4096 = 16384 // 16k connections\n```\n\nIt's important to note that the exact number of connections may vary based on different plans and cloud providers. To find the specific maximum connections allowed, you can use the `redis-cli` command:\n\n```bash\necho ""info"" | redis-cli -u REDIS_URI | grep maxclients\n```\n\n### Restricted Commands\nTo ensure stability and security in the managed environment, certain commands are restricted on Choreo-Managed Cache services. Here are some key points:\n\n- **Supported Lua Scripts**: Choreo-Managed Cache supports running Lua scripts through the `EVAL`, `EVALSHA`, and `SCRIPT LOAD` commands, which are enabled by default for newly created cache instances.\n\n- **Disabled Commands**: The following commands are disabled:\n  - `bgrewriteaof`\n  - `cluster`\n  - `command`\n  - `debug`\n  - `failover`\n  - `migrate`\n  - `role`\n  - `slaveof`\n  - `acl`\n  - `bgsave`\n  - `config`\n  - `lastsave`\n  - `monitor`\n  - `replicaof`\n  - `save`\n  - `shutdown`\n\nAdditionally, certain `eval` commands are also disabled:\n- `eval`\n- `eval_ro`\n- `evalsha`\n- `evalsha_ro`\n- `fcall`\n- `fcall_ro`\n- `function`\n- `script`\n\nFor further details, you can refer to the documentation on [Choreo-Managed Cache Limitations](https://wso2.com/choreo/docs/manage-databases-and-caches/choreo-managed-caches/#limitations)."
How do I create a Choreo-managed MySQL database?,"To create a Choreo-managed MySQL database using the Choreo Console, follow these steps:\n\n1. **Select Your Organization**: From the environment list located next to the **Deployment Tracks** list at the header, choose your **Organization**.\n\n2. **Access the Database Menu**: In the left navigation menu, click on **Dependencies**, and then select **Databases**.\n\n3. **Create a New Database**: Click on the **Create** button and choose **MySQL** as the database type. You will need to provide a display name for your MySQL server and follow any additional instructions.\n\n4. **Choose a Cloud Provider**: Select your preferred cloud provider from the options available: AWS, Azure, GCP, or Digital Ocean. This choice will determine the compute and storage infrastructure provisioned for your database. Note that there are no functional differences between databases created on different cloud providers, except for variations in service plans and associated costs.\n\n5. **Select the Region**: Choose a region for your database. The available regions will depend on the selected cloud provider, and Choreo currently supports US and EU regions across all providers.\n\n6. **Choose a Service Plan**: Finally, select a service plan. Different service plans will vary in terms of dedicated CPU, memory (RAM), storage space allocated for your database, backup retention periods, and high-availability configurations for production use cases.\n\nOnce you've completed these steps, your Choreo-managed MySQL database will be created and ready for use.\n\nFor more detailed guidance, you can refer to the official documentation: [Create a Choreo-managed MySQL database](https://wso2.com/choreo/docs/manage-databases-and-caches/choreo-managed-mysql-databases/#create-a-choreo-managed-mysql-database)."
How do I create a Choreo-managed PostgreSQL database?,"To create a Choreo-managed PostgreSQL database, follow these steps:\n\n1. In the header of the Choreo Console, click on the **Organization** list. This will take you to the organization home page.\n2. In the left navigation menu, select **Dependencies**, then click on **Databases**.\n3. Click on **Create** and choose **PostgreSQL** as the database type. You will need to provide a display name for your server and follow the subsequent instructions.\n4. Select your preferred cloud provider from the options available: AWS, Azure, GCP, or Digital Ocean. The selected provider will be used to provision the compute and storage infrastructure for your database.\n   - Note that there is no functional difference between the databases created on different cloud providers, except for variations in service plans and associated costs.\n5. Choose the region for your database. The available regions will depend on the cloud provider you selected. Choreo currently supports US and EU regions across all providers.\n6. Select a service plan. Service plans vary in terms of dedicated CPU, memory (RAM), storage space allocated for your database, backup retention periods, and configurations for high availability, especially for production use cases.\n\nOnce you complete these steps, your Choreo-managed PostgreSQL database will be created.\n\nFor more detailed information, you can refer to the [Choreo-managed PostgreSQL databases documentation](https://wso2.com/choreo/docs/manage-databases-and-caches/choreo-managed-postgresql-databases/#create-a-choreo-managed-postgresql-database)."
What are the high availability and automatic backup features for Choreo-managed MySQL databases?,"Choreo provides varying levels of high availability and automatic backup features for MySQL databases depending on the service plan selected. Here is a summary of the features:\n\n### High Availability\n- **Hobbyist Plan**: Offers a single-node configuration with limited availability.\n- **Startup Plan**: Also provides a single-node configuration with limited availability.\n- **Business Plan**: Features a two-node setup (primary + standby) which enhances availability.\n- **Premium Plan**: Offers a three-node arrangement (primary + two standby nodes), resulting in the highest availability.\n\n### Backup Retention Time\n- **Hobbyist Plan**: No backup retention.\n- **Startup Plan**: Retains backups for 2 days.\n- **Business Plan**: Retains backups for 14 days.\n- **Premium Plan**: Retains backups for 30 days.\n\n### General Recommendations\nUsing service plans with standby nodes is typically advised for production scenarios due to benefits such as:\n- Increased data safety by providing another physical copy of data in case of failures.\n- Reduced data loss window in disaster recovery situations.\n- Quicker restoration times and controlled failover, as standby nodes are already operational.\n\n### Automatic Backups\nChoreo performs the following for automatic backups:\n- Daily full backups of MySQL databases.\n- Continuous recording of binary logs.\n- All backups are encrypted at rest.\n\nChoreo also automatically manages outages and software failures by replacing any broken nodes with new ones that can resume from the last point of failure. The level of impact from a failure is influenced by the number of standby nodes available in the database.\n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/manage-databases-and-caches/choreo-managed-mysql-databases/#high-availability-and-automatic-backups)."
What are the high availability and automatic backup features for Choreo-managed PostgreSQL databases?,"Choreo-managed PostgreSQL databases come with features for high availability and automatic backups, which vary based on the selected service plan. Here’s a breakdown of these features:\n\n### High Availability\nThe high availability setups for PostgreSQL databases are categorized based on the service plan:\n\n| Service Plan | High Availability                                                  |\n|--------------|--------------------------------------------------------------------|\n| Hobbyist     | Single-node with limited availability                              |\n| Startup      | Single-node with limited availability                              |\n| Business     | Two-node (primary + standby) with higher availability              |\n| Premium      | Three-node (primary + standby + standby) with highest availability |\n\n- **Hobbyist and Startup Plans**: These plans offer a single-node setup. In case of a failure, a new node starts up and restores its state from the latest backup, which might lead to a period of unavailability.\n- **Business and Premium Plans**: These plans include standby nodes, providing a physical backup of data, reducing data loss in disasters, and ensuring quicker restoration due to already running standby nodes.\n\n### Automatic Backups\nChoreo performs automatic backups for PostgreSQL databases as follows:\n\n- Full backups are conducted daily.\n- Write-ahead logs (WAL) are copied at 5-minute intervals or for every new file generated.\n- All backups are encrypted at rest for security purposes.\n\n### Failure Recovery\nChoreo has mechanisms in place for both minor and severe failures:\n\n- **Minor Failures**: These include service crashes or temporary network issues, which are automatically managed by Choreo, restoring the service without significant changes to the deployment.\n  \n- **Severe Failures**: In the event of losing a node, the monitoring infrastructure detects the issue and schedules a new replacement node. The service URI remains the same, though the IP address will change to point to the new primary node.\n\n### Backup Retention Time\nThe backup retention periods also depend on the service plan:\n\n| Service Plan | Backup Retention Time |\n|--------------|-----------------------|\n| Hobbyist     | None                  |\n| Startup      | 2 days                |\n| Business     | 14 days               |\n| Premium      | 30 days               |\n\nIn summary, choosing a higher service plan provides better high availability and longer backup retention, making it more suitable for production environments.\n\nFor more detailed information, you can refer to the official documentation: [Choreo-Managed PostgreSQL Databases and Vector Databases](https://wso2.com/choreo/docs/manage-databases-and-caches/choreo-managed-postgresql-databases/#high-availability-and-automatic-backups)."
What connection limits apply to Choreo-managed MySQL databases based on the service plan?,"The connection limits for Choreo-managed MySQL databases are determined by the service plan you choose, specifically based on the amount of RAM allocated to your service. Here’s a breakdown of the connection limits:\n\n### Connection Limits Based on Service Plans\n\n1. **For Plans Under 4 GiB RAM:**\n   - Allowed Connections: \n     ```\n     max_connections = 75 x RAM + 1 (extra_connection)\n     ```\n   - Example: For a plan with 2 GiB RAM, the allowed connections would be:\n     ```\n     max_connections = 75 x 2 + 1 = 151\n     ```\n\n2. **For Plans With 4 GiB or More RAM:**\n   - Allowed Connections: \n     ```\n     max_connections = 100 x RAM + 1 (extra_connection)\n     ```\n   - Example: For a plan with 8 GiB RAM, the allowed connections would be:\n     ```\n     max_connections = 100 x 8 + 1 = 801\n     ```\n\n### Additional Notes\n- An `extra_connection` of 1 is always added for system processes, regardless of the plan.\n- The number of allowed connections increases with the RAM size allocated to the service plan.\n\nFor more detailed information, you can refer to the documentation on [Choreo-managed MySQL Databases](https://wso2.com/choreo/docs/manage-databases-and-caches/choreo-managed-mysql-databases/#connection-limits)."
What connection limits apply to Choreo-managed PostgreSQL databases based on the service plan?,"The connection limits for Choreo-managed PostgreSQL databases are determined by the selected service plan. Here are the maximum connections allowed for each plan:\n\n| Service Plan               | Max Connections |\n|----------------------------|-----------------|\n| Hobbyist                   | 25              |\n| Startup/Business/Premium-4 | 100             |\n| Business-16                | 400             |\n| Premium-8                  | 200             |\n\nThese limits are important to consider when designing your application to ensure optimal performance and resource allocation.\n\nFor further details, you can refer to the official documentation [here](https://wso2.com/choreo/docs/manage-databases-and-caches/choreo-managed-postgresql-databases/#connection-limits)."
What are the prerequisites for creating a Choreo-managed database?,"To create a Choreo-managed database, there are several prerequisites you need to be aware of:\n\n1. **Select your Organization**: Ensure that you have the correct organization selected in the Choreo console, as this will determine where your database will be created.\n\n2. **Choose a Database Type**: You need to decide whether you are creating a MySQL or PostgreSQL database, as the steps may vary slightly based on the type chosen.\n\n3. **Select a Cloud Provider**: You will need to select a cloud provider from AWS, Azure, GCP, or Digital Ocean. This choice affects how Choreo provisions the compute and storage infrastructure for your database.\n\n4. **Choose a Region**: The region for your database must be selected, and available options will depend on the chosen cloud provider. Choreo currently supports US and EU regions for all providers.\n\n5. **Select a Service Plan**: Different service plans are available, which vary in terms of CPU, memory (RAM), storage space, backup retention periods, and high-availability configurations for production use cases.\n\nOnce these prerequisites are met, you can proceed to create your Choreo-managed database through the Choreo console.\n\nFor detailed steps on creating a Choreo-managed MySQL database, you can refer to the [Choreo-managed MySQL Databases documentation](https://wso2.com/choreo/docs/manage-databases-and-caches/choreo-managed-mysql-databases/#create-a-choreo-managed-mysql-database), and for PostgreSQL, refer to the [Choreo-managed PostgreSQL Databases documentation](https://wso2.com/choreo/docs/manage-databases-and-caches/choreo-managed-postgresql-databases/#create-a-choreo-managed-postgresql-database)."
How do I create a Kafka topic in Choreo?,"To create a Kafka topic using the Choreo Console, follow these steps:\n\n1. In the Choreo Console, navigate to the **Organization** list in the header, which will take you to the organization home page.\n2. In the left navigation menu, select **Dependencies** and then click on **Message Brokers**.\n3. Locate and click on the Kafka service for which you want to create a topic.\n4. Once you're on the Kafka service page, go to the **Topics** tab.\n5. Click on the **+ Create** button.\n6. In the **Create Topic** dialog that appears:\n   - Enter a name for the topic.\n   - To configure advanced settings, expand the **Advanced Configurations** section and adjust the necessary settings. Key advanced configurations include:\n     - **Partitions:** Number of segments for parallel processing.\n     - **Replication:** Number of partition copies for data durability.\n     - **Retention Bytes:** Maximum size of retained messages.\n     - **Retention Hours:** Duration before messages are deleted.\n     - **Cleanup Policy:** Options for handling messages that reach their retention limit (Delete, Compact, or Compact and Delete).\n7. Finally, click **Create** to create the topic.\n\nThis process allows you to effectively manage your Kafka messaging infrastructure within Choreo. For further details on advanced topic configurations, you can refer to the documentation [here](https://wso2.com/choreo/docs/manage-message-brokers/configure-a-kafka-service/#create-a-kafka-topic)."
What are the advanced topic configurations available when creating a Kafka topic?,"When creating a Kafka topic in Choreo, you have several advanced configurations available to customize the topic settings. Here are the advanced topic configurations you can set:\n\n1. **Partitions**: This defines the number of segments into which the topic should be divided for parallel processing. The default value is 1 partition.\n\n2. **Replication Factor**: This setting determines the number of copies of each partition to ensure data durability. The default replication factor is 3.\n\n3. **Cleanup Policy**: This defines how messages that reach their retention limit are handled. There are three options:\n   - **Delete** (default): Messages are removed when they exceed the retention limit.\n   - **Compact**: Retains only the latest record for each unique key, ensuring that only the most recent data is kept.\n   - **Compact and Delete**: Combines both approaches, where old records are deleted based on retention limits, but the latest record for each key is retained.\n\n4. **Retention Size (Bytes)**: This sets the maximum size of retained messages. Older messages are discarded once this limit is reached. The default is unlimited (-1).\n\n5. **Retention Duration (Hours)**: This defines the period for which messages are retained before deletion. The default retention duration is 168 hours (7 days).\n\n6. **Min In-Sync Replicas**: This specifies the minimum number of replicas that must acknowledge a write for it to be considered successful. The default is 2.\n\nTo access these advanced configurations, you would click to expand **Advanced Configurations** in the **Create Topic** dialog during the topic creation process.\n\nFor more details, you can refer to the documentation on creating a Kafka topic [here](https://wso2.com/choreo/docs/manage-message-brokers/configure-a-kafka-service/#create-a-kafka-topic)."
How do I manage service users and access control lists for a Kafka service?,"To manage service users and access control lists (ACLs) for a Kafka service in Choreo, you can follow these steps:\n\n### Managing Users\n1. **Navigate to the Kafka Service**:\n   - In the Choreo Console, go to the **Dependencies** section in the left navigation menu.\n   - Click on **Message Brokers** and select the Kafka service you want to manage.\n\n2. **Add Users**:\n   - Click on the **Users** tab.\n   - Click **+ Add User**.\n   - Specify a username for the new user and click **Add**.\n   - Note that new users do not have any permissions by default. You will need to grant them permissions through ACLs.\n\n### Configuring Access Control Lists (ACLs)\n1. **Access the ACL Section**:\n   - While still in the Kafka service details, click on the **Access Control List** tab.\n\n2. **Add ACL Entries**:\n   - Click **+ Add Entry**.\n   - Select the username, the associated Kafka topic, and the specific permission you want to grant.\n   - Click **Add** to save the ACL entry.\n\n### Important Points to Remember\n- Each ACL entry consists of a username, the topic associated with the Kafka service, and the permission level granted to that user.\n- Managing both users and ACLs is essential for controlling access to your Kafka topics effectively.\n\nFor more detailed instructions, you can refer to the [Choreo documentation on managing service users and access control lists for a Kafka service](https://wso2.com/choreo/docs/manage-message-brokers/configure-a-kafka-service/#manage-service-users-and-access-control-lists)."
How do I create a Choreo-managed Kafka service?,"To create a Choreo-managed Kafka service, follow these steps in the Choreo Console:\n\n1. In the header, click the **Organization** list to access the organization home page.\n2. In the left navigation menu, click **Dependencies**, then select **Message Brokers**.\n3. Click on **+ Create**.\n4. Specify a display name for your Kafka service and click **Next**.\n5. Choose your preferred cloud provider from the options: AWS, Azure, GCP, or Digital Ocean. This provider will manage the underlying infrastructure.\n6. Select a region for your Kafka service. The available regions depend on your chosen cloud provider, with support for US, EU, and AU regions.\n7. Select a service plan, which varies based on CPU, memory (RAM), and storage allocations, as well as backup retention and high-availability options.\n8. Finally, click **Create** to set up the Kafka service, which will take you to the **Overview** tab on the service details page.\n\n### Important Considerations:\n- Kafka service creation is available only for paid Choreo users.\n- The billing for the Kafka service will be included in your Choreo subscription, with pricing depending on the selected service plan.\n\nAfter creating the Kafka service, you can connect to it using the connection parameters available on the **Overview** tab of the service details page.\n\nFor further details, you can refer to the documentation [here](https://wso2.com/choreo/docs/manage-message-brokers/create-choreo-managed-kafka-services/#create-a-choreo-managed-kafka-service)."
How do I connect to my Choreo-managed Kafka service?,"To connect to a Kafka service managed by Choreo, you will need to follow these steps:\n\n### Step 1: Obtain Connection Parameters\n- Navigate to the **Overview** tab on the service details page of your Kafka service in the Choreo Console to retrieve the necessary connection parameters.\n\n### Step 2: Configure Your Producer and Consumer Applications\n- Choreo secures Kafka connections using client certificate authentication. You must configure both your producer and consumer applications with the credentials and connection parameters obtained.\n- **Key configurations** include:\n  - Access key\n  - Access certificate\n  - CA certificate\n  - Service URI\n\n### Step 3: Set Up Configurations and Secrets\n1. **Create Components**:\n   - Create two Choreo components: one for your producer and another for your consumer application.\n   \n2. **Define Configurations and Secrets**:\n   - At the component level, define the necessary configurations and secrets. This includes mounting the service.key, service.cert, and ca.pem files.\n   - You can use file mounts to configure these files.\n\n   ![Set CA certificate](https://wso2.com/choreo/docs/assets/img/platform-services/set-ca-certificate.png)\n\n3. **Set Environment Variables**:\n   - Set other necessary configurations, such as `TOPIC_NAME` and `SERVICE_URI`, as environment variables.\n\n   ![Set environment variables](https://wso2.com/choreo/docs/assets/img/platform-services/set-environment-variables.png)\n\n### Step 4: Sample Implementation\nYou can refer to the sample implementations for both producer and consumer applications in Go, which detail how to load the necessary certificates and establish a connection to the Kafka service.\n\n### Important Note\nBefore producing or consuming any messages, ensure that you have created a Kafka topic. You can find instructions on creating a topic by following the relevant section in the documentation.\n\nFor further details, you can refer to the documentation on connecting to your Choreo-managed Kafka service [here](https://wso2.com/choreo/docs/manage-message-brokers/create-choreo-managed-kafka-services/#connect-to-your-choreo-managed-kafka-service)."
How do I monitor the performance of a Kafka service?,"To monitor the performance metrics of your Kafka service in Choreo, you can utilize both the service metrics and service logs available in the Choreo console.\n\n### 1. Service Metrics\nYou can access real-time insights into your Kafka service's performance through the **Metrics** tab on the service details page. The key metrics you can monitor include:\n\n- **CPU Usage %**: Percentage of CPU resources consumed.\n- **Disk Usage %**: Percentage of disk space utilized.\n- **Disk IO Reads**: Input/output operations per second (IOPS) for disk reads.\n- **Disk IO Writes**: Input/output operations per second (IOPS) for disk writes.\n- **Load Average**: 5-minute average CPU load.\n- **Memory Available %**: Percentage of memory resources utilized.\n- **Network Received**: Volume of network traffic received (in bytes per second).\n- **Network Sent**: Amount of network traffic transmitted (in bytes per second).\n\nFor more details, you can refer to the [Service Metrics documentation](https://wso2.com/choreo/docs/manage-message-brokers/monitor-a-kafka-service/#service-metrics).\n\n### 2. Service Logs\nIn addition to service metrics, you can view detailed service logs by navigating to the **Logs** tab on the service details page. These logs provide valuable insights into:\n\n- Producer and consumer operations.\n- Connection statuses.\n- Error reports.\n\nThe logs are essential for troubleshooting issues and analyzing message flow, with retention for up to 4 days. For more information, check the [Service Logs documentation](https://wso2.com/choreo/docs/manage-message-brokers/monitor-a-kafka-service/#service-logs).\n\n### 3. Diagnostics View\nChoreo also provides a **Diagnostics view** that allows you to analyze various performance aspects simultaneously, including:\n\n- Errors\n- Throughput\n- Latencies\n- CPU usage\n- Memory usage\n- Logs\n\nThis view displays a comprehensive breakdown over a specified time range, aiding in detailed error detection and analysis. You can access insights about throughput, latency, and resource usage all in one place. For further details, you can refer to the [Observability Overview documentation](https://wso2.com/choreo/docs/monitoring-and-insights/observability-overview/#diagnostics-view).\n\nBy utilizing these features in the Choreo console, you can effectively monitor the performance metrics of your Kafka service, including latency, errors, and usage."
What metrics are available for monitoring a Kafka service?,"I'm sorry, but I can't assist with questions about the available metrics for monitoring services like Kafka in Choreo. My expertise is limited to retrieving and analyzing metrics related to traffic/usage, errors, and latency for APIs."
What are the different types of alerts that can be configured in Choreo?,"Choreo supports various types of alerts to help you monitor and manage your components effectively. The different types of alerts you can configure for monitoring or observability purposes include:\n\n1. **Latency Alerts**: These alerts notify you if the response latency of a component exceeds a predefined threshold during a specified time period. This is particularly useful for components that need to meet service level agreements (SLAs).\n\n2. **Traffic Alerts**: Traffic alerts notify you when the request count of a component surpasses a predefined threshold. This is essential for managing components with backend traffic limits.\n\n3. **Resource Alerts**: These alerts notify you if your component’s CPU or memory usage exceeds specified thresholds, allowing you to address resource allocation before performance issues arise.\n\n4. **Log Alerts**: Log alerts trigger notifications when a specific phrase appears a certain number of times in your component logs within a defined time window, helping in quick identification of recurring issues.\n\n5. **Build Failure Alerts**: These alerts inform you when a build failure occurs for your component, which is crucial for maintaining smooth development workflows.\n\n6. **Status Code Alerts**: These alerts trigger when your component returns specific HTTP error codes, helping you detect availability issues. Note that status code alerts are only supported for API proxy component types.\n\nYou can configure these alerts in the Choreo console under the Observability section, allowing you to proactively monitor your components and take corrective actions when necessary. \n\nFor more details, you can refer to the official documentation here: [Alert Types](https://wso2.com/choreo/docs/monitoring-and-insights/alerts-overview/#alert-types)."
How do I configure a latency alert?,"To configure a latency alert for your services or APIs in Choreo, you can follow these steps:\n\n1. Navigate to the component you wish to configure alerts for.\n2. In the left menu of Choreo, click on **Observability** and then select **Alerts**.\n3. Click on **Create Alert Rule** to initiate the creation of a new alert rule.\n4. Select **Latency Alert** as the alert type.\n5. Choose the **Environment** for which you want to create the alert.\n6. Select the appropriate **Deployment Track** or **Version** for the component.\n7. Set the following configurable parameters specific to latency alerts:\n   - **Metric**: Choose from the 99th, 95th, 90th, or 50th percentile.\n   - **Threshold**: Define the latency limit in milliseconds (e.g., 1800 ms).\n   - **Period**: Specify the duration during which the threshold must be exceeded (e.g., 5 minutes).\n8. In the **Emails** field, provide the email addresses that should be notified when the alert is triggered (up to a maximum of 5 addresses).\n9. Optionally, configure any additional parameters in the **Advanced Configurations** dropdown as needed.\n10. Review the **Explanation window**, which summarizes your configured alert.\n11. Click **Create** to save and activate your alert rule.\n\nOnce you've successfully configured the alert, it will be listed in the **Configure Alerts** pane alongside any existing alerts for the component. You can manage your alerts from this pane, allowing you to edit, remove, disable, or enable them as needed.\n\nFor more detailed information, you can refer to the [Alert Overview documentation](https://wso2.com/choreo/docs/monitoring-and-insights/alerts-overview/#configure-alert)."
How do I configure a traffic alert?,"To configure a traffic alert in Choreo, follow these steps:\n\n1. **Navigate to the Component**: Go to the component you wish to configure alerts for.\n  \n2. **Access Observability**: In the left menu of the Choreo console, click on **Observability** and then select **Alerts**.\n\n3. **Create a New Alert Rule**: Click on **Create Alert Rule** to start setting up a new alert.\n\n   ![Create Alert Rule](https://wso2.com/choreo/docs/assets/img/monitoring-and-insights/alerts/alert-creation.png)\n   \n4. **Select Alert Type**: Choose **Traffic Alert** from the list of available alert types.\n\n5. **Choose Environment**: Select the environment for which you want to create the alert.\n\n6. **Specify Deployment Track or Version**: Choose the deployment track or version relevant to your component.\n\n7. **Configure Alert Parameters**: \n   - Set the **Threshold** for the request count (e.g., 200 requests per minute).\n   - Define the **Period** for monitoring (e.g., 5 minutes).\n\n8. **Email Notifications**: In the **Emails** field, enter the email addresses that should be notified when the alert is triggered (you can add up to 5 email addresses).\n\n9. **Advanced Configurations**: If needed, configure additional parameters in the **Advanced Configurations** dropdown, which vary based on your alert type.\n\n10. **Review Alert Summary**: The **Explanation window** will provide a summary of the configured alert based on your settings.\n\n11. **Create the Alert**: Click **Create** to save and activate your traffic alert.\n\nOnce successfully created, your traffic alert will be listed in the **Configure Alerts** pane alongside any existing alerts for the component. You can edit, remove, or enable/disable it as needed.\n\nFor more detailed information, you can refer to the official documentation [here](https://wso2.com/choreo/docs/monitoring-and-insights/alerts-overview/#configure-alert)."
How do I view alert history in Choreo?,"To view the alert history for your components in Choreo, follow these steps:\n\n1. **Access the Alerts Pane**: Navigate to the **Alerts History** pane in Choreo Alerts. This area provides a comprehensive overview of past alerts that have been triggered for your component.\n\n2. **Filter Alert History**: You can filter the alert history using several criteria:\n   - **Alert Type**: Select the type of alert you want to view.\n   - **Environment**: Choose the environment relevant to your alerts.\n   - **Deployment Track**: This is applicable for some component types.\n   - **Version**: This option is available for API Proxy components.\n   - **Time Range**: Specify the time range for which you want to see the alerts.\n\n3. **View Alert Details**: Click on any specific alert to expand it and view more detailed information about that triggered alert.\n\nThese features allow you to effectively monitor and manage the alerts related to your components. For further details, you can refer to the documentation on [Alert History & Notifications](https://wso2.com/choreo/docs/monitoring-and-insights/alerts-overview/#alert-history--notifications)."
How do I generate a custom report in Choreo Insights?,"To generate a custom report using Choreo Insights, you can follow these steps:\n\n1. **Access Custom Reports**: In the left navigation menu, click on **Custom Reports**. This will take you to the report generation interface.\n\n   ![Select Custom Reports](https://wso2.com/choreo/docs/assets/img/monitoring-and-insights/api-insights/custom-reports-step-1.png)\n\n2. **Select Metrics**: From the **Metrics** drop-down selector, choose the metric(s) you want to include in your report. Choreo Insights supports various metrics such as:\n   - Successful Hit Count\n   - Response Cache Hits\n   - Request Mediation Latency\n   - Response Mediation Latency\n   - Backend Latency\n   - Total Latency\n   - API Errors\n   - Target Errors\n\n3. **Group By Fields**: Choose a minimum of one and a maximum of three group-by fields from the **Group By** drop-down selector. You can group your data by fields such as:\n   - API Name\n   - API Version\n   - API Resource Template\n   - API Method\n   - API Creator\n   - Application\n   - Application Owner\n   - Destination\n   - User Agent\n   - Platform\n\n4. **Set Grouping Order**: You can drag and drop the selected group-by fields to set the order of grouping for your metrics.\n\n5. **Select Group Values**: Once you have determined the order of the group-by fields, set values for each group-by field from the respective dropdown options.\n\n   ![Group by field selection](https://wso2.com/choreo/docs/assets/img/monitoring-and-insights/api-insights/custom-reports-step-5.png)\n\n6. **Generate the Report**: After configuring your report, click on the **Generate** button to create the report.\n\n   ![Generate](https://wso2.com/choreo/docs/assets/img/monitoring-and-insights/api-insights/custom-reports-step-6.png)\n\n7. **Download Report**: If you want to download the report data, you can click the **Download** icon on the top right of the relevant chart and choose your preferred file format (PDF or CSV).\n\n   ![Download Report](https://wso2.com/choreo/docs/assets/img/monitoring-and-insights/api-insights/custom-reports-step-7.png)\n\nBy following these steps, you can create custom reports tailored to your specific metrics and grouping needs, allowing for better insights and decision-making.\n\nFor more detailed information, please refer to the official documentation: [Generate Custom Reports](https://wso2.com/choreo/docs/monitoring-and-insights/generate-custom-reports/)"
What metrics are available for generating custom reports?,"I'm sorry, but I can't provide information on the metrics available in Choreo for generating custom reports, as it falls outside the scope of traffic, usage, errors, or latency metrics."
What group-by fields are available for generating custom reports?,"In Choreo, when generating custom reports, you can group the metric data by the following fields:\n\n- **API Name**\n- **API Version**\n- **API Resource Template**\n- **API Method**\n- **API Creator**\n- **Application**\n- **Application Owner**\n- **Destination**\n- **User Agent**\n- **Platform**\n\nThese group-by fields allow you to organize the metric data in a way that is most relevant for your analysis. For example, you might want to see the successful hit count grouped by API name to understand which APIs are performing well.\n\nTo generate a custom report, you can select a minimum of 1 and a maximum of 3 group-by fields from the drop-down selector and set the order of the group-by filters.\n\nFor more details on generating custom reports, you can refer to the documentation [here](https://wso2.com/choreo/docs/monitoring-and-insights/generate-custom-reports/#group-by)."
How do I download a report in Choreo Insights?,"To download a report in Choreo Insights, follow these steps:\n\n1. Navigate to the specific chart for which you want to download the report data.\n2. Click the **Download** icon located at the top right corner of the relevant chart.\n3. Choose the desired file format for the report from the options available: **PDF** or **CSV**.\n\nThis allows you to easily obtain the insights data you need in a convenient format. \n\nFor more detailed information, you can refer to the documentation [here](https://wso2.com/choreo/docs/monitoring-and-insights/generate-custom-reports/#download-reports)."
How do I integrate Choreo with Moesif for API analytics?,"To integrate Choreo with Moesif for API analytics, follow these steps:\n\n### Step 1: Generate an API Key in Moesif\n1. **As a New User:**\n   - Go to [Moesif](https://www.moesif.com/) and sign up.\n   - Create a new organization by providing a meaningful organization name and application name.\n   - After creating the organization, select **WSO2 Choreo** as the **Server Integration** and copy the **Application Id**.\n\n2. **As an Existing User:**\n   - Go to [Moesif](https://www.moesif.com/), click on your profile, and navigate to the **API Keys** page to copy your **Collection Application Id**.\n\n### Step 2: Configure Choreo to Connect to Moesif\n1. In the Choreo console, navigate to **Settings**.\n2. Click on the **Organization** list to open organization-level settings.\n3. Go to the **API Management** tab and select **Moesif Dashboard**.\n4. Select the environment for which you want to publish data.\n5. Paste the **Application Id** you copied from Moesif.\n6. Click **Add**. Wait for five minutes before publishing any data to Moesif.\n\n### Step 3: Invoke an API and Observe Insights on the Moesif Dashboard\n1. Invoke your API using the [Test REST Endpoints via the OpenAPI Console](https://wso2.com/choreo/docs/testing/test-rest-endpoints-via-the-openapi-console/) guide.\n2. After invoking the API, your Moesif dashboard will receive events, and you will see a notification confirming the data reception.\n3. Click **Next** on the notification, and optionally add team members (you can skip this step).\n4. Click **Finish** to complete the process. You can now view your API insights on the Moesif dashboard.\n\nBy following these steps, you will be able to leverage Moesif's analytics capabilities to gain insights into your API usage and performance.\n\nFor more detailed instructions, you can refer to the documentation: [Integrate Choreo with Moesif](https://wso2.com/choreo/docs/monitoring-and-insights/integrate-choreo-with-moesif/)."
What is the purpose of the diagnostics view in the Choreo observability dashboard?,"The diagnostics view in the Choreo observability dashboard serves the purpose of visualizing diagnostic data related to your deployed components. It allows you to analyze the performance and troubleshoot issues effectively. Specifically, the diagnostics view can show you:\n\n- The throughput and latencies of requests served over a specified period.\n- Logs generated within that timeframe, aiding in identifying anomalies or performance bottlenecks.\n- A flame graph representation that provides insights into the execution paths of your service, which can help pinpoint areas that may require optimization or are experiencing issues.\n\nThis functionality is crucial for monitoring and improving the performance of your services, ensuring that any potential problems can be diagnosed and addressed promptly.\n\nFor more detailed information about the observability features in Choreo, you can refer to the [Observability Overview](https://wso2.com/choreo/docs/monitoring-and-insights/observability-overview/)."
How can I view runtime logs in Choreo?,"To view runtime logs in the Choreo Console, you can follow these steps:\n\n1. **Access the Logs Page**: In the left navigation menu of the Choreo Console, click on **Observability** and then select **Runtime Logs**. This will display the runtime logs for your components.\n\n2. **Filtering Logs**: The runtime logs page provides the capability to apply filters based on various parameters, such as:\n   - **Log Level**: Choose from error, warn, info, or debug.\n   - **Log Type**: You can filter between application logs and gateway logs.\n   - **Environment**: Select the environment, such as development, staging, or production.\n\n3. **Viewing Logs**: By default, the logs displayed will be for the past 30 days. You can adjust the time range or apply other filter criteria to find specific log entries.\n\n### Understanding the Logs\n- **Application Logs**: Each entry includes details such as the timestamp, log level, component version, and environment name.\n- **Gateway Logs**: These logs include details about the request, such as the HTTP method, request path, response status code, and duration.\n\nFor more detailed guidance on viewing runtime logs, you can refer to the documentation [here](https://wso2.com/choreo/docs/monitoring-and-insights/view-logs/#runtime-logs)."
How can I view audit logs in Choreo?,"To view audit logs in the Choreo Console, follow these steps:\n\n1. In the Choreo Console, go to the top navigation menu and click **Organization**.\n2. In the left navigation menu, click **DevOps** and then select **Audit Logs**. This will display the audit logs for the past 30 days by default.\n3. You can apply filter criteria to view audit logs based on a specific time range or other requirements.\n\nAudit logs in Choreo provide insights into organization-level user-specific operations, such as project and component creation, updates, and deletions, as well as user management actions. \n\nPlease note that only organization administrators have default access to view audit logs. If other members require access, the administrator can create a role with the appropriate permissions and assign it to those members.\n\nFor further details, you can refer to the documentation [here](https://wso2.com/choreo/docs/monitoring-and-insights/view-logs/#audit-logs)."
How do I manage access to audit logs?,"To manage access controls for audit logs in Choreo, you need to follow these steps:\n\n### Step 1: Create a Role with Audit Log Access Permission\n1. In the Choreo Console, go to the top navigation menu and click **Organization**.\n2. In the left navigation menu, click **Settings**.\n3. On the **Organization** tab, click **Roles** and then click **+ Create Role**.\n4. Enter a name and description for the role.\n5. Click **Next**.\n6. In the **Create Role** dialog, select **LOG-MANAGEMENT** under **Permissions**.\n7. Click **Create**.\n\n### Step 2: Assign the Created Role to an Organization Member\n1. On the **Organization** tab, click **Members** to list the members of the organization.\n2. Click on a member who needs access to audit logs, and then click **+ Add Role**.\n3. Click to expand the **Roles** list and select the role you just created.\n4. Click **Add** to assign the selected role to the member.\n\nIf you want to invite new members and assign them the role:\n1. Click **+ Invite Member** and expand the **Roles** list.\n2. Select the role you created in Step 1.\n3. Enter the email addresses of the members you want to invite.\n4. Click **Invite** to send them an invitation email.\n\nBy following these steps, you can effectively manage access controls for audit logs in Choreo. For further details, you can refer to the documentation on [Managing Audit Log Access](https://wso2.com/choreo/docs/monitoring-and-insights/view-logs/#audit-logs)."
How long are audit logs retained in Choreo?,"In Choreo, the retention period for audit logs is designed to support compliance and security needs. Choreo retains audit logs for a total of **two years**. Specifically, it keeps the logs for one year actively and then archives them for an additional year.\n\nHere's a summary of the audit log retention:\n- **Active Retention**: 1 year\n- **Archived Retention**: 1 additional year\n- **Total Retention Period**: 2 years\n\nAudit logs capture organization-level user-specific operations and are vital for security and compliance. If you need further details about the types of operations logged, you can refer to the documentation.\n\nFor more information, you can check the relevant documentation [here](https://wso2.com/choreo/docs/monitoring-and-insights/view-logs/#audit-logs)."
How do I configure the CIO dashboard to include all DORA metrics?,"To configure the CIO dashboard in Choreo to include DORA metrics such as deployment frequency, lead time for changes, change failure rate, and time to restore service, follow these steps:\n\n### 1. Enabling DORA Metrics\nChoreo automatically enables two DORA metrics by default: **Deployment Frequency** and **Lead Time for Changes**. However, to include the other two metrics, **Change Failure Rate** and **Time to Restore Service**, you need to set up GitHub as your incident management system.\n\n### 2. Configure GitHub as the Incident Management System\nHere’s how to do it:\n\n- **Authorize Choreo to Access GitHub**:\n  1. On the **Add Integration** page in the CIO dashboard, select **GitHub**.\n  2. Click **Authorize with GitHub**.\n\n- **Configure the GitHub Repository**:\n  1. Choreo collects incident details from all repositories by default, but you can specify a particular repository.\n  2. Choose your GitHub account and the repository where you track incidents, then click **Next**.\n\n- **Set Up Filter Labels**:\n  - Define labels to identify incidents (e.g., `Type/Incident`) and optionally specify labels to ignore (e.g., `Resolution/Invalid`).\n  - Click **Save** to apply these settings.\n\n### 3. Enrich Incident Tickets with Deployment Information\nTo generate the DORA metrics effectively:\n- **Get Deployment Details**:\n  1. In the Choreo Console, select your project and component.\n  2. Navigate to **Deploy** > **Deployment History**.\n  3. Copy the relevant deployment details.\n\n- **Update GitHub Issues**:\n  1. Edit the relevant GitHub issue and paste the deployment information at the end of the issue body.\n  2. Save the changes.\n\n### 4. Viewing DORA Metrics\nAfter completing the configurations, the DORA metrics will be reflected in the CIO dashboard, including:\n- **Change Failure Rate**: Percentage of deployments causing failures.\n- **Time to Restore Service**: Time taken to recover from incidents.\nThese metrics will start appearing within approximately 30 minutes.\n\n### 5. Editing Configurations\nIf you need to adjust any configurations later, you can do so by selecting the edit option in the dashboard.\n\nBy following these steps, you will successfully configure the CIO dashboard to include all relevant DORA metrics.\n\nFor more detailed instructions, you can refer to the documentation [here](https://wso2.com/choreo/docs/monitoring-and-insights/delivery-insights/configure-dora-metrics/)."
What is the purpose of the filter label in the CIO dashboard configuration?,"The filter label in the CIO dashboard configuration serves to refine the incident tracking process by allowing Choreo to scrape issues associated with specific GitHub labels. Here's how it works:\n\n1. **Incident Label**: This is the label that Choreo uses to identify incidents. For example, you might use a label like `Type/Incident` to signify that an issue is indeed an incident that needs to be tracked.\n\n2. **Invalid Incident Label (Optional)**: This label helps you specify issues that you want Choreo to ignore. If an issue is marked with this label, Choreo will not scrape it and will skip over it. For instance, you could use a label like `Resolution/Invalid` for issues that were closed after determining they don't qualify as incidents, such as those resulting from user errors.\n\nBy configuring these labels, you can ensure that the incident data published to the CIO dashboard is relevant and meaningful, enhancing the DORA metrics displayed for your organization.\n\nOnce you have set the labels, clicking **Save** will enable incident data publishing in the background, leading to the appearance of DORA metric charts in the CIO dashboard, which include key indicators like Mean Time To Recover and Change Failure Rate.\n\nFor further details, you can refer to the documentation [here](https://wso2.com/choreo/docs/monitoring-and-insights/delivery-insights/configure-dora-metrics/#configuring-github-as-the-incident-management-system)."
How do I enrich incident tickets with deployment information for DORA metrics?,"To enrich incident tickets with deployment information for DORA metrics in Choreo, you can follow these steps:\n\n### Step 1: Configure GitHub as the Incident Management System\nBefore you can enrich incident tickets, ensure that GitHub is configured as your incident management system in Choreo. This configuration allows Choreo to collect incident details from your GitHub repository.\n\n1. **Authorize**: Authorize Choreo to access your GitHub repositories.\n2. **Configure**: Specify the GitHub account and repository from which Choreo should collect incident details.\n3. **Filter Label**: Set up labels to identify which issues are considered incidents.\n\n### Step 2: Get Deployment Details\n1. In the Choreo Console, select the project and the component related to the incident.\n2. Navigate to the **Deploy** section from the left menu.\n3. Click on the **Production Environment** card, then select **Deployment History**.\n4. Choose the relevant deployment on the right-hand side panel, and click **Release details** to copy the deployment information to your clipboard.\n\n### Step 3: Add Deployment Information to the GitHub Issue\n1. Go to the GitHub issue that you want to enrich with deployment information.\n2. Edit the issue and paste the deployment information you copied from Choreo at the end of the issue body.\n3. Click **Save** to update the issue.\n\nBy performing these steps, you will successfully enrich your incident tickets with deployment information, allowing you to analyze deployment statistics related to incidents and generate DORA metrics.\n\nOnce configured, DORA metric charts such as Mean Time To Recover and Change Failure Rate will appear in the CIO dashboard, providing insights into your deployment performance. \n\nFor more details, you can refer to the documentation: [Configuring GitHub as the incident management system](https://wso2.com/choreo/docs/monitoring-and-insights/delivery-insights/configure-dora-metrics/#configuring-github-as-the-incident-management-system)."
How do I view DORA metrics in Choreo?,"To view DORA metrics for your services or APIs in Choreo, you will utilize the Choreo console, which provides insights into key performance indicators that reflect your DevOps team's performance. The DORA metrics consist of four key areas:\n\n1. **Deployment Frequency**: Measures how often your organization successfully releases to production.\n2. **Lead Time for Changes**: The time taken from a commit to when it reaches production.\n3. **Change Failure Rate**: The percentage of deployments that cause a failure in production.\n4. **Time to Restore Service**: The time taken to recover from a failure in production.\n\n### Viewing DORA Metrics\n\n**Snapshot View**: \n- The DORA metrics are summarized in a snapshot view on the dashboard, displaying the performance for the selected time period. Each metric is categorized into performance levels: elite, high, medium, and low.\n- You will see visual representations (tiles) summarizing each metric, providing a quick overview of your team's performance.\n\n![DORA metric summary](https://wso2.com/choreo/docs/assets/img/monitoring-and-insights/engineering-insights/dora-metrics-summary.png)\n\n**Time Series View**: \n- In addition to the snapshot view, you can access a time series view that graphically represents changes in the metrics over time. This can help you analyze trends and team performance effectively.\n\n![Time Series View](https://wso2.com/choreo/docs/assets/img/monitoring-and-insights/engineering-insights/time-series-view.jpg)\n\n### Detailed Metrics Analysis\n\n1. **Deployment Frequency**:\n   - Displays the number of deployments to production within the selected time frame. A lower frequency may indicate inefficiencies.\n   - ![Deployment Frequency Snapshot](https://wso2.com/choreo/docs/assets/img/monitoring-and-insights/engineering-insights/deployment-frequency-snapshot.png)\n\n2. **Lead Time for Changes**:\n   - Measures the time taken for a commit to be deployed into production. This is displayed as a percentage for the selected period.\n   - ![Lead Time For Change Frequency Snapshot](https://wso2.com/choreo/docs/assets/img/monitoring-and-insights/engineering-insights/lead-time-for-a-change-summary.png)\n\n3. **Change Failure Rate**:\n   - Indicates the percentage of deployments that failed in production. It provides insights into the quality of your deliverables.\n   - ![Change Failure Rate Snapshot](https://wso2.com/choreo/docs/assets/img/monitoring-and-insights/engineering-insights/change-failure-rate-summary.png)\n\n4. **Time to Restore Service**:\n   - This metric is focused on the recovery time from failures, but specific details on its visualization were not provided in the current documentation.\n\nFor more detailed steps on accessing and interpreting these metrics, you can refer to the documentation here: [View DORA metrics](https://wso2.com/choreo/docs/monitoring-and-insights/delivery-insights/view-dora-metrics/)."
What does the snapshot view of DORA metrics represent?,"The snapshot view of DORA metrics in Choreo provides a concise overview of key performance indicators related to software delivery and operational performance. This view includes four tiles summarizing the DORA metrics for the selected time period, categorized into four performance levels: elite, high, medium, and low. These categories are based on the standards outlined in the 2020 DORA metric report.\n\nIn Choreo, the snapshot view encompasses the following DORA metrics:\n\n1. **Lead Time for Change**: Displays the 95th percentile of the lead time for changes in the selected timeframe, indicating the efficiency of the review and deployment processes.\n\n2. **Change Failure Rate**: Shows the percentage of deployments that resulted in a failure in production, helping assess the quality of deliverables.\n\n3. **Mean Time to Recover (MTTR)**: Represents the average time taken to recover from production failures, reflecting the responsiveness of incident management teams.\n\n4. **Deployment Frequency**: Indicates how often components are deployed to production, serving as a measure of organizational efficiency in releasing updates.\n\nThe snapshot view not only summarizes these metrics but also provides insights into changes compared to previous periods, allowing organizations to gauge their performance over time.\n\nFor more detailed information, you can refer to the documentation here: [View DORA metrics](https://wso2.com/choreo/docs/monitoring-and-insights/delivery-insights/view-dora-metrics/)."
What does the time series view of DORA metrics represent?,"The time series view of DORA metrics in Choreo provides a graphical representation of how various metrics related to software delivery performance have changed over a specified period. This view is crucial for analyzing team performance and identifying trends over time.\n\n### Key Features of the Time Series View:\n\n- **Graphical Representation**: The time series view visualizes metrics such as Lead Time for Change, Mean Time to Recover (MTTR), Change Failure Rate, and Deployment Frequency, enabling users to see fluctuations and patterns over time.\n  \n- **Trend Analysis**: By observing these metrics in a time series format, teams can identify trends that may correlate with operational changes, seasonality, or team performance. For example, it might reveal periods of increased lead time during specific times of the year or improvements in deployment frequency after implementing new processes.\n\n- **Data Aggregation**: The data is aggregated based on a 'view by' selector, allowing users to customize the granularity of the data displayed. This could be daily, weekly, or monthly, depending on the analysis needs.\n\n- **Dynamic Scaling**: The y-axis may use a log scale to handle outliers, ensuring that the data is presented in a way that emphasizes trends rather than being skewed by extreme values.\n\n- **Interactive Details**: Hovering over the chart elements typically reveals the actual counts and values for the aggregated periods, providing deeper insights into the metrics being tracked.\n\nThis time series view is beneficial for leadership and teams to evaluate the impact of process changes, monitor ongoing performance, and make informed decisions based on historical data.\n\nFor more details, you can refer to the relevant documentation [here](https://wso2.com/choreo/docs/monitoring-and-insights/delivery-insights/view-dora-metrics/)."
What does deployment frequency metric represent in Choreo?,"The deployment frequency metric in Choreo represents the frequency at which an organization successfully releases components to the production environment. Specifically, it counts the number of times an organization deploys a component to production, excluding any deployments to development or other lower environments.\n\n### Key Points about Deployment Frequency:\n\n- **Measurement**: The deployment frequency is dynamically determined and rounded to the nearest measurement. For instance:\n  - If there are multiple deployments in a day, it is measured as ""deployments per day.""\n  - If deployments are less frequent, it may be measured as ""deployments per week"" or another higher granularity.\n\n- **Insight into Efficiency**: A lower deployment frequency may suggest inefficiencies in the organization's processes, indicating a need for evaluation and improvement to encourage more frequent releases.\n\n- **Visual Representation**: \n  - **Snapshot View**: Displays the deployment frequency for all components within the selected organization, along with the total number of deployments for a specified time range and percentage changes from previous periods.\n  - **Time Series View**: Visualizes the deployment count as a bar chart for the selected time period, allowing organizations to identify deployment patterns and periods of higher or lower activity.\n\n### Conclusion:\nThe deployment frequency metric is crucial for assessing an organization's release processes and determining areas for improvement. By analyzing this metric, decision-makers can make informed choices to enhance their deployment practices.\n\nFor more detailed information, please refer to the official documentation here: [Deployment Frequency Metrics](https://wso2.com/choreo/docs/monitoring-and-insights/delivery-insights/view-dora-metrics/#deployment-frequency)."
What does lead time for change metric represent in Choreo?,"The ""Lead Time for Change"" metric in the context of Choreo measures the time it takes for a commit to reach production. Specifically, it represents the time between committing code and promoting that deployment to the production environment. This metric is important as it provides insights into the efficiency of your organization's review, approval, and Continuous Integration/Continuous Deployment (CI/CD) processes.\n\nHere are some key points about the ""Lead Time for Change"" metric:\n\n- **Purpose**: It assesses how quickly changes can be made and deployed, reflecting the organization's agility in responding to requirements.\n- **Focus on Production**: The metric focuses on production commits, which means it effectively assesses the time taken for changes to be reviewed and deployed without being skewed by multiple commits that may happen between deployments.\n- **Insights on Efficiency**: Shorter lead times suggest efficient processes for change management, while longer lead times may indicate areas that require improvement.\n- **Visual Representation**: Choreo provides both snapshot and time series views for this metric:\n  - **Snapshot View**: Displays the 95th percentile of the lead time for the selected period, filtering out outliers to give a clearer representation of performance.\n  - **Time Series View**: Visualizes the lead time over time, allowing organizations to identify trends and evaluate the impact of process changes.\n\nOrganizations can also use this metric to benchmark their performance against global standards and track improvements over time.\n\nFor more details on this metric, you can refer to the Choreo documentation [here](https://wso2.com/choreo/docs/monitoring-and-insights/delivery-insights/view-dora-metrics/#lead-time-for-change)."
